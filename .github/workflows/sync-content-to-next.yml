name: Sync Content to Next Branch

on:
  push:
    branches:
      - main
    paths:
      - 'docusaurus/docs/cms/**'
      - 'docusaurus/docs/cloud/**'
      - 'docusaurus/static/img/assets/**'
  pull_request:
    types: [labeled, closed]

jobs:
  # Debug Job: Print event info
  debug-event:
    runs-on: ubuntu-latest
    steps:
      - name: Print event info
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Event action: ${{ github.event.action }}"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "PR number: ${{ github.event.pull_request.number }}"
            if [ "${{ github.event.action }}" = "labeled" ]; then
              echo "Added label: ${{ github.event.label.name }}"
            fi
          fi

  # Job 1: Automatic replication of commits pushed to main
  cherry-pick-from-push:
    if: github.event_name == 'push'
    needs: debug-event
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.SYNC_MAIN_TO_NEXT }}

      - name: Set up Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Get latest commit
        id: get-commit
        run: |
          COMMIT_HASH=$(git log -1 --format="%H")
          COMMIT_MSG=$(git log -1 --format="%s" $COMMIT_HASH)
          echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
          echo "commit_msg=$COMMIT_MSG" >> $GITHUB_OUTPUT

      - name: Create PR to next branch
        run: |
          # Get modified files in the commit
          MODIFIED_FILES=$(git diff-tree --no-commit-id --name-only -r ${{ steps.get-commit.outputs.commit_hash }})
          
          # Check if any file is in our content folders
          CONTENT_FOUND=false
          while IFS= read -r file; do
            if [[ "$file" =~ ^docusaurus/docs/cms/ || "$file" =~ ^docusaurus/docs/cloud/ || "$file" =~ ^docusaurus/static/img/assets/ ]]; then
              CONTENT_FOUND=true
              break
            fi
          done <<< "$MODIFIED_FILES"
          
          if [ "$CONTENT_FOUND" != "true" ]; then
            echo "No content files found to sync"
            exit 0
          fi
          
          # Create branch and cherry-pick
          BRANCH_NAME="sync-content-$(date +%Y%m%d-%H%M%S)"
          
          git fetch origin next
          git checkout -b $BRANCH_NAME origin/next
          
          git cherry-pick ${{ steps.get-commit.outputs.commit_hash }} || {
            echo "Cherry-pick failed, attempting to resolve simple conflicts"
            git cherry-pick --abort
            exit 1
          }
          
          git push origin $BRANCH_NAME
          
          gh pr create --base next --head $BRANCH_NAME \
            --title "[Auto-sync] ${{ steps.get-commit.outputs.commit_msg }}" \
            --body "Automatic synchronization of content from main"
        env:
          GITHUB_TOKEN: ${{ secrets.SYNC_MAIN_TO_NEXT }}

  # Job 2: Create PR to next when a PR is labeled
  create-pr-for-labeled:
    if: >-
      github.event_name == 'pull_request' &&
      github.event.action == 'labeled' &&
      github.event.label.name == 'temp - port to docs-next'
    needs: debug-event
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.SYNC_MAIN_TO_NEXT }}

      - name: Simple port of PR
        run: |
          # Setup git
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          # Get PR info
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          SOURCE_BRANCH="${{ github.event.pull_request.head.ref }}"
          
          echo "Creating port for PR #$PR_NUMBER: $PR_TITLE"
          
          # Prepare branches
          TARGET_BRANCH="next-port-pr$PR_NUMBER"
          
          git fetch origin next
          git checkout -b $TARGET_BRANCH origin/next
          
          # If it's a PR from the same repo, fetch it
          git fetch origin $SOURCE_BRANCH
          
          # Get the raw list of changed files from GitHub CLI
          PR_FILES_JSON=$(gh pr view $PR_NUMBER --json files --jq '.files[].path')
          
          echo "Files from PR:"
          echo "$PR_FILES_JSON"
          
          # Parse and process files one by one
          echo "$PR_FILES_JSON" | while read -r file; do
            # Check if it's a content file
            if [[ "$file" == docusaurus/docs/cms/* || "$file" == docusaurus/docs/cloud/* || "$file" == docusaurus/static/img/assets/* ]]; then
              echo "Processing content file: $file"
              mkdir -p $(dirname "$file")
              git checkout origin/$SOURCE_BRANCH -- "$file"
            fi
          done
          
          # Check if we have changes
          if ! git diff --staged --quiet; then
            # We have changes to commit
            git commit -m "Port PR #$PR_NUMBER: $PR_TITLE to next branch"
            git push origin $TARGET_BRANCH
            
            gh pr create --base next --head $TARGET_BRANCH \
              --title "[Port to next] $PR_TITLE" \
              --body "Automatic port of PR #$PR_NUMBER to next branch"
          else
            echo "No content files to port"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.SYNC_MAIN_TO_NEXT }}

  # Job 3: Sync changes when a labeled PR is merged to main
  sync-merged-pr:
    if: >-
      github.event_name == 'pull_request' &&
      github.event.action == 'closed' &&
      github.event.pull_request.merged == true &&
      contains(github.event.pull_request.labels.*.name, 'temp - port to docs-next')
    needs: debug-event
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.SYNC_MAIN_TO_NEXT }}

      - name: Simple sync merged PR
        run: |
          # Setup git
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          # Get PR info
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          MERGE_COMMIT="${{ github.event.pull_request.merge_commit_sha }}"
          
          echo "Syncing merged PR #$PR_NUMBER: $PR_TITLE"
          
          # Create branch from next
          BRANCH_NAME="sync-merged-pr$PR_NUMBER"
          
          git fetch origin next
          git checkout -b $BRANCH_NAME origin/next
          
          # Try cherry-pick
          if git cherry-pick -m 1 $MERGE_COMMIT; then
            git push origin $BRANCH_NAME
            
            gh pr create --base next --head $BRANCH_NAME \
              --title "[Merged-sync] $PR_TITLE" \
              --body "Sync of merged PR #$PR_NUMBER to next branch"
          else
            echo "Cherry-pick failed, aborting"
            git cherry-pick --abort
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.SYNC_MAIN_TO_NEXT }}
