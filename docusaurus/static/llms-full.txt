# Account billing details
Source: https://docs.strapi.io/cloud/account/account-billing

# Account billing & invoices 

Through the *Profile* page, accessible by clicking on your profile picture on the top right hand corner of the interface then clicking on **Profile**, you can access the [ *Billing*](#account-billing) and [ *Invoices*](#account-invoices) tabs.

## Account billing

The  *Billing* tab displays and enables you to modify the billing details and payment method set for the account.

The *Payment method* section of the  *Billing* tab allows you to manage the credit cards that can be used for the Strapi Cloud projects. The *Billing details* section requires to be filled in, at least for the mandatory fields, as this information will be the default billing details for all Strapi Cloud projects related to your account.

### Adding a new credit card

1. In the *Payment method* section of the  *Billing* tab, click on the **Add card** button.
2. Fill in the following fields:

| Field name | Description |
| --- | --- |
| Card Number | Write the number of the credit card to add as payment method. |
| Expires | Write the expiration date of the credit card. |
| CVC | Write the 3-numbers code displayed at the back of the credit card. |

3. Click on the **Save** button.

:::tip
The first credit card to be added as payment method for the account will by default be the primary one. It is however possible to define another credit card as primary by clicking on the  icon, then **Switch as primary**.
:::

### Deleting a credit card

To remove a credit card from the list of payment methods for the account:

1. Click on the  icon of the credit card you wish to delete.
2. Click **Remove card**. The card is immediately deleted.

:::note
You cannot delete the primary card as at least one credit card must be available as payment method, and the primary card is by default that one. If the credit card you wish to delete is currently the primary card, you must first define another credit card as primary, then delete it.
:::

## Account invoices

The  *Invoices* tab displays the complete list of invoices for all your Strapi Cloud projects.

:::strapi Invoices are also available per project.
In the *Settings > Invoices* tab of any project, you will find the invoices for that project only. Feel free to check the [dedicated documentation](/cloud/projects/settings#invoices).
:::



# Profile settings
Source: https://docs.strapi.io/cloud/account/account-settings

# Profile settings

The *Profile* page enables you to manage your account details and preferences. It is accessible by clicking on your profile picture, on the top right hand corner of the interface, and **Profile**.

There are 3 tabs available in the *Profile* interface:  [*General*](#general),  *Billing* and  Invoices (the last 2 are documented in the [Account billing details](/cloud/account/account-billing) section of this documentation).

## General

The  *General* tab enables you to edit the following details for your account profile:

- Details: to see the name associated with your account.
- Connected accounts: to manage Google, GitHub and GitLab accounts connected with your Strapi Cloud account (see [Managing connected accounts](#managing-connected-accounts)).
- Delete account: to permanently delete your Strapi Cloud account (see [Deleting Strapi Cloud account](#deleting-strapi-cloud-account)).

### Managing connected accounts

You can connect a Google, GitLab and GitHub account to your Strapi Cloud account. The _Connected accounts_ section lists accounts that are currently connected to your Strapi Cloud account. From there you can also connect a new Google, GitLab and GitHub account if one is not already connected.

To connect a new Google, GitLab or GitHub account to your Strapi Cloud account, click on the **Connect account** button and follow the next steps on the corresponding website.

You can also click on the three dots button of a connected account and click on the "Manage on" button to manage your GitHub, GitLab or Google account directly on the corresponding website.

### Deleting Strapi Cloud account

You can delete your Strapi Cloud account, but it will be permanent and irreversible. All associated projects and their data will be deleted as well and the subscriptions for the projects will automatically be canceled.

1. In the *Delete account* section of the  *General* tab, click on the **Delete account** button.
2. In the dialog, type `DELETE` in the textbox.
3. Confirm the deletion of your account by clicking on the **Delete** button.



# Database
Source: https://docs.strapi.io/cloud/advanced/database

# Database

Strapi Cloud provides a pre-configured PostgreSQL database by default. However, you can also configure it to utilize an external SQL database, if needed.

:::prerequisites
- A local Strapi project running on `v4.8.2+`.
- Credentials for an external database.
- If using an existing database, the schema must match the Strapi project schema.
:::

:::caution
While it's possible to use an external database with Strapi Cloud, you should do it while keeping in mind the following considerations:
- Strapi Cloud already provides a managed database that is optimized for Strapi.
- Using an external database may result in unexpected behavior and/or performance issues (e.g., network latency may impact performance). For performance reasons, it's recommended to host your external database close to the region where your Strapi Cloud project is hosted. You can find where your Strapi Cloud project is hosted in your Project Settings (see [Project Settings > General > Selected Region](/cloud/projects/settings#general)).
- Strapi can't provide security or support with external databases used with Strapi Cloud.
:::

## Configuration

The project `./config/database.js` or `./config/database.ts` file must match the configuration found in the [environment variables in database configurations](https://docs.strapi.io/cms/configurations/database#environment-variables-in-database-configurations) section.

Before pushing changes, add environment variables to the Strapi Cloud project:

1. Log into Strapi Cloud and click on the corresponding project on the Projects page.
2. Click on the **Settings** tab and choose **Variables** in the left menu.
3. Add the following environment variables:

    | Variable                           | Value            | Details  |
    | ---------------------------------- | ---------------- |----------|
    | `DATABASE_CLIENT`                  | your_db          | Should be one of `mysql`, `postgres`, or `sqlite`. |
    | `DATABASE_HOST`                    | your_db_host     | The URL or IP address of your database host |
    | `DATABASE_PORT`                    | your_db_port     | The port to access your database |
    | `DATABASE_NAME`                    | your_db_name     | The name of your database |
    | `DATABASE_USERNAME`                | your_db_username | The username to access your database |
    | `DATABASE_PASSWORD`                | your_db_password | The password associated to this username |
    | `DATABASE_SSL_REJECT_UNAUTHORIZED` | false            | Whether unauthorized connections should be rejected |
    | `DATABASE_SCHEMA`                  | public           | - |

4.  Click **Save**.

:::caution
To ensure a smooth deployment, it is recommended to not change the names of the environment variables.
:::

## Deployment

To deploy the project and utilize the external database, push the changes from earlier. This will trigger a rebuild and new deployment of the Strapi Cloud project.

Once the application finishes building, the project will use the external database.

## Reverting to the default database

To revert back to the default database, remove the previously added environment variables related to the external database from the Strapi Cloud project dashboard, and save. For the changes to take effect, you must redeploy the Strapi Cloud project.



# Email Provider
Source: https://docs.strapi.io/cloud/advanced/email

# Email Provider

Strapi Cloud comes with a basic email provider out of the box. However, it can also be configured to utilize another email provider, if needed.

:::caution
Please be advised that Strapi is unable to provide support for third-party email providers.

:::

:::prerequisites

- A local Strapi project running on `v4.8.2+`.
- Credentials for another email provider (see 

</Tabs>

:::caution
The file structure must match the above path exactly, or the configuration will not be applied to Strapi Cloud.
:::

Each provider will have different configuration settings available. Review the respective entry for that provider in the 

</Tabs>
</TabItem>

</Tabs>
</TabItem>
</Tabs>

:::tip
Before pushing the above changes to GitHub, add environment variables to the Strapi Cloud project to prevent triggering a rebuild and new deployment of the project before the changes are complete.
:::

### Strapi Cloud Configuration

1. Log into Strapi Cloud and click on the corresponding project on the Projects page.
2. Click on the **Settings** tab and choose **Variables** in the left menu.
3. Add the required environment variables specific to the email provider.
4. Click **Save**.

**Example:**

</Tabs>

## Deployment

To deploy the project and utilize another party email provider, push the changes from earlier. This will trigger a rebuild and new deployment of the Strapi Cloud project.

Once the application finishes building, the project will use the new email provider.

:::strapi Custom Provider
If you want to create a custom email provider, please refer to the [Email providers](/cms/features/email#providers) documentation in the CMS Documentation.
:::



# Upload Provider
Source: https://docs.strapi.io/cloud/advanced/upload

# Upload Provider

Strapi Cloud comes with a local upload provider out of the box. However, it can also be configured to utilize a third-party upload provider, if needed.

:::caution
Please be advised that Strapi is unable to provide support for third-party upload providers.
:::

:::prerequisites

- A local Strapi project running on `v4.8.2+`.
- Credentials for a third-party upload provider (see 

</Tabs>

:::caution
The file structure must match the above path exactly, or the configuration will not be applied to Strapi Cloud.
:::

Each provider will have different configuration settings available. Review the respective entry for that provider in the 
</Tabs>
</TabItem>

</Tabs>
</TabItem>
</Tabs>

### Configure the Security Middleware

Due to the default settings in the Strapi Security Middleware you will need to modify the `contentSecurityPolicy` settings to properly see thumbnail previews in the Media Library.

To do this in your Strapi project:

1. Navigate to `./config/middleware.js` or `./config/middleware.ts` in your Strapi project.
2. Replace the default `strapi::security` string with the object provided by the upload provider.

**Example:**

</Tabs>
</TabItem>

</Tabs>
</TabItem>
</Tabs>

:::tip
Before pushing the above changes to GitHub, add environment variables to the Strapi Cloud project to prevent triggering a rebuild and new deployment of the project before the changes are complete.
:::

### Strapi Cloud Configuration

1. Log into Strapi Cloud and click on the corresponding project on the Projects page.
2. Click on the **Settings** tab and choose **Variables** in the left menu.
3. Add the required environment variables specific to the upload provider.
4. Click **Save**.

**Example:**

</Tabs>

## Deployment

To deploy the project and utilize the third-party upload provider, push the changes from earlier. This will trigger a rebuild and new deployment of the Strapi Cloud project.

Once the application finishes building, the project will use the new upload provider.

:::strapi Custom Provider
If you want to create a custom upload provider, please refer to the [Providers](/cms/features/media-library#providers) documentation in the CMS Documentation.
:::



# Command Line Interface (CLI) <NewBadge />
Source: https://docs.strapi.io/cloud/cli/cloud-cli

# Command Line Interface (CLI) 

Strapi Cloud comes with a Command Line Interface (CLI) which allows you to log in and out, and to deploy a local project without it having to be hosted on a remote git repository. The CLI works with both the `yarn` and `npm` package managers.

:::note
It is recommended to install Strapi locally only, which requires prefixing all of the following `strapi` commands with the package manager used for the project setup (e.g `npm run strapi help` or `yarn strapi help`) or a dedicated node package executor (e.g. `npx strapi help`).
:::

## strapi login

**Alias:** `strapi cloud:login`

Log in Strapi Cloud.

```bash
strapi login
```

This command automatically opens a browser window to first ask you to confirm that the codes displayed in both the browser window and the terminal are the same. Then you will be able to log into Strapi Cloud via Google, GitHub or GitLab. Once the browser window confirms successful login, it can be safely closed.

If the browser window doesn't automatically open, the terminal will display a clickable link as well as the code to enter manually.

## strapi deploy

**Alias:** `strapi cloud:deploy`

Deploy a new local project (< 100MB) in Strapi Cloud.

```bash
strapi deploy
```

This command must be used after the `login` one. It deploys a local Strapi project on Strapi Cloud, without having to host it on a remote git repository beforehand. The terminal will inform you when the project is successfully deployed on Strapi Cloud.

Deploying a Strapi project through the CLI creates a project on the Free plan.

Once the project is first deployed on Strapi Cloud with the CLI, the `deploy` command can be reused to trigger a new deployment of the same project.

:::note
Once you deployed your project, if you visit the Strapi Cloud dashboard, you may see some limitations as well as impacts due to creating a Strapi Cloud project that is not in a remote repository and which was deployed with the CLI.

- Some areas in the dashboard that are usually reserved to display information about the git provider will be blank.
- Some buttons, such as the **Trigger deploy** button, will be greyed out and unclickable since, unless you have [connected a git repository to your Strapi Cloud project](/cloud/getting-started/deployment-cli#automatically-deploying-subsequent-changes).
:::

## strapi link 

**Alias:** `strapi cloud:link`

Links project in the current folder to an existing project in Strapi Cloud.

```bash
strapi link
```

This command connects your local project in the current directory with an existing project on your Strapi Cloud account. You will be prompted to select the project you wish to link from a list of available projects hosted on Strapi Cloud.

## strapi projects 

**Alias:** `strapi cloud:projects`

Lists all Strapi Cloud projects associated with your account.

```bash
strapi projects
```

This command retrieves and displays a list of all projects hosted on your Strapi Cloud account.

## strapi logout

**Alias:** `strapi cloud:logout`

Log out of Strapi Cloud.

```bash
strapi logout
```

This command logs you out of Strapi Cloud. Once the `logout` command is run, a browser page will open and the terminal will display a confirmation message that you were successfully logged out. You will not be able to use the `deploy` command anymore.



# Caching & Performance
Source: https://docs.strapi.io/cloud/getting-started/caching

# Caching & Performance

For Strapi Cloud applications with large amounts of cacheable content, such as images, videos, and other static assets, enabling CDN (Content Delivery Network) caching via the 

</Tabs>



# Strapi Cloud fundamentals <UpdatedBadge />
Source: https://docs.strapi.io/cloud/getting-started/cloud-fundamentals

# Strapi Cloud fundamentals 

Before going any further into this Strapi Cloud documentation, we recommend you to acknowledge the main concepts below. They will help you to understand how Strapi Cloud works, and ensure a smooth Strapi Cloud experience.

- **Hosting Platform** <br/> Strapi Cloud is a hosting platform that allows to deploy already existing Strapi projects created with Strapi CMS (Content Management System). Strapi Cloud is *not* the SaaS (Software as a Service) version of Strapi CMS. Feel free to refer to the [CMS documentation](https://docs.strapi.io/cms/intro) to learn more about Strapi CMS.

- **Strapi Cloud Pricing Plans** <br/> As a Strapi Cloud user you have the choice between 4 plans: Free, Essential, Pro and Scale. Depending on the plan, you have access to different functionalities, support and customization options (see [Pricing page](https://strapi.io/pricing-cloud) for more details). In this Strapi Cloud documentation, the , , and  badges can be displayed below a section's title to indicate that the feature is only available starting from the corresponding paid plan. If no badge is shown, the feature is available on the Free plan.

- **Types of Strapi Cloud users** <br/> There can be 2 types of users on a Strapi Cloud project: owners and maintainers. The owner is the one who has created the project and has therefore access to all features and options for the project. Maintainers are users who have been invited to contribute to an already created project by its owner. Maintainers, as documented in the [Collaboration](/cloud/projects/collaboration) page, cannot view and access all features and options from the Strapi Cloud dashboard.

- **Support** <br/> The level of support provided by the Strapi Support team depends on the Strapi Cloud plan you subscribed for. The Free plan does not include access to support. The Essential and Pro plans include Basic support while the Scale plan includes Standard support. Please refer to the [dedicated support article](https://support.strapi.io/support/solutions/articles/67000680833-what-is-supported-by-the-strapi-team#Not-Supported) for all details regarding support levels.



# with Cloud dashboard
Source: https://docs.strapi.io/cloud/getting-started/deployment

# Project deployment with the Cloud dashboard

This is a step-by-step guide for deploying your project on Strapi Cloud for the first time, using the Cloud dashboard.

:::prerequisites
Before you can deploy your Strapi application on Strapi Cloud using the Cloud dashboard, you need to have the following prerequisites:

* Strapi version `4.8.2` or higher
* Project database must be compatible with PostgreSQL. Strapi does not support and does not recommend using any external databases, though it's possible to configure one (see [advanced database configuration](/cloud/advanced/database)).
* Project(s) source code hosted on 

    </Tabs>

5. Set up your Strapi Cloud project.

    5.a. Fill in the following information:

    | Setting name | Instructions                                                                                            |
    |--------------|---------------------------------------------------------------------------------------------------------|
    | Display name | Write the name of your Strapi app, this is fetched from the repository name but can be edited. It is automatically converted to slug format (`my-strapi-app`). |
    | Git branch   | Choose from the drop-down the default branch to use for this deployment. This uses the default branch of the repository. |
    | Deploy on push | Check the box to automatically deploy the latest changes from the selected branch. When disabled, you will need to manually deploy the latest changes. |
    | Region       | Choose the geographic location of the servers where your Strapi application is hosted. Selected region can either be US (East), Europe (West), Asia (Southeast) or Oceania. |

    :::note
    The Git branch and "Deploy on push" settings can be modified afterwards through the project's setting, however the hosting region can only be chosen during the creation of the project (see [Project Settings](/cloud/projects/settings)).
    :::

    5.b. (optional) Click on **Show advanced settings** to fill in the following options:

    | Setting name | Instructions                                                                                            |
    |--------------|---------------------------------------------------------------------------------------------------------|
    | Base directory | Write the name of the directory where your Strapi app is located in the repository. This is useful if you have multiple Strapi apps in the same repository or if you have a monorepo. |
    | Environment variables | Click on **Add variable** to add environment variables used to configure your Strapi app (see [Environment variables](/cms/configurations/environment/) for more information). You can also add environment variables to your Strapi application by adding a `.env` file to the root of your Strapi app directory. The environment variables defined in the `.env` file will be used by Strapi Cloud. |
    | Node version | Choose a Node version from the drop-down. Default Node version will automatically be chosen to best match the version of your Strapi project. If you manually choose a version that doesn't match with your Strapi project, the build will fail but the explanation will be displayed in the build logs. |

    :::strapi Using Environment Variables
    You can use environment variable to connect your project to an external database rather than the default one used by Strapi Cloud (see [database configuration](/cms/configurations/database#environment-variables-in-database-configurations) for more details). If you would like to revert and use Strapi's default database again, you have to remove your `DATABASE_` environment variables (no automatic migration implied).

    You can also set up here a custom email provider. Sendgrid is set as the default one for the Strapi applications hosted on Strapi Cloud (see [providers configuration](/cms/features/email#providers) for more details).
    :::

## Setting up billing details

:::strapi No billing step for the Free plan
If you chose the free plan, this billing step will be skipped as you will not be asked to share your credit card details at the creation of the project.

To upgrade your project to a paid plan, you will need to fill in your billing information in the **Billing** section of your Profile.

 Skip to step 5 of the section below to finalise the creation of your project.
:::

1. Click on the **Continue to billing** button. You will directly be redirected to the second and final project deployment interface. There you can review all your new project setup information, enter payment & billing details and receive your invoice.

2. Review your project: make sure the plan and setup information are correct. If needed, click the  **Edit** button to be redirected to the first interface of the project creation and fix any mistake.

3. In the Payment section, fill in at least all mandatory elements for *Payment method* and *Billing information*.

4. Check your invoice which informs you of what should be paid now and the following month. Optionally, you can enter a *Discount code* if you have one.

5. Click on the **Create project** button to finalize the deployment of your new Strapi Cloud project. An initial deployment will automatically be triggered and you will be redirected to the *Projects* page.

:::caution
Create your Admin user after the initial deployment is complete. Do not share your application URL with anyone until you have created your Admin user.
:::

##  What to do next?

Now that you have deployed your project via the Cloud dashboard, we encourage you to explore the following ideas to have an even more complete Strapi Cloud experience:

- Invite other users to [collaborate on your project](/cloud/projects/collaboration).
- Check out the [deployments management documentation](/cloud/projects/deploys) to learn how to trigger new deployments for your project.



# with Cloud CLI
Source: https://docs.strapi.io/cloud/getting-started/deployment-cli

# Project deployment with the Command Line Interface (CLI)

This is a step-by-step guide for deploying your project on Strapi Cloud for the first time, using the Command Line Interface.

:::prerequisites
Before you can deploy your Strapi application on Strapi Cloud using the Command Line Interface, you need to have the following prerequisites:

- Have a Google, GitHub or GitLab account.
- Have an already created Strapi project (see [Installing from CLI in the CMS Documentation](/cms/installation/cli)), stored locally. The project must be less than 100MB.
- Have available storage in your hard drive where the temporary folder of your operating system is stored.
:::

## Logging in to Strapi Cloud

1. Open your terminal.

2. Navigate to the folder of your Strapi project, stored locally on your computer.

3. Enter the following command to log into Strapi Cloud:

  </Tabs>

4. In the browser window that opens automatically, confirm that the code displayed is the same as the one written in the terminal message.

5. Still in the browser window, choose whether to login via Google, GitHub or GitLab. The window should confirm the successful login soon after.

## Deploying your project

1. From your terminal, still from the folder of your Strapi project, enter the following command to deploy the project:

  </Tabs>

2. Follow the progression bar in the terminal until confirmation that the project was successfully deployed with Strapi Cloud.
Deploying the project will create a new Strapi Cloud project on the Free plan.

### Automatically deploying subsequent changes

By default, when creating and deploying a project with the Cloud CLI, you need to manually deploy again all subsequent changes by running the corresponding `deploy` command everytime you make a change.

Another option is to enable automatic deployment through a git repository. To do so:

1. Host your code on a git repository, such as  or .
2. Connect your Strapi Cloud project to the repository (see the _Connected repository_ setting in [Projects Settings > General](/cloud/projects/settings#general)).
3. Still in _Projects Settings > General_ tab, tick the box for the "Deploy the project on every commit pushed to this branch" setting. From now on, a new deployment to Strapi Cloud will be triggered any time a commit is pushed to the connected git repository.

:::note
Automatic deployment is compatible with all other deployment methods, so once a git repository is connected, you can trigger a new deployment to Strapi Cloud [from the Cloud dashboard](/cloud/projects/deploys), [from the CLI](/cloud/cli/cloud-cli#strapi-deploy), or by pushing new commits to your connected repository.
:::

## ⏩ What to do next?

Now that you have deployed your project via the Command Line Interface, we encourage you to explore the following ideas to have an even more complete Strapi Cloud experience:

- Visit the Cloud dashboard to follow [insightful metrics and information](/cloud/projects/overview) on your Strapi project.
- Check out the full [Command Line Interface documentation](/cloud/cli/cloud-cli) to learn about the other commands available.



# Project deployment
Source: https://docs.strapi.io/cloud/getting-started/deployment-options

# Project deployment with Strapi Cloud

You have 2 options to deploy your project with Strapi Cloud:

- either with the user interface (UI), meaning that you will perform all the actions directly on the Strapi Cloud dashboard,
- or using the Cloud Comment Line Interface (CLI), meaning that you will only interact with a terminal.

The guides below will guide you through all the steps for each of the deployment options.



# Welcome to the Strapi Cloud Documentation!
Source: https://docs.strapi.io/cloud/getting-started/intro

# Welcome to the Strapi Cloud Documentation!

<!--

-->

The Strapi Cloud documentation contains all information related to the setup, deployment, update and customization of your Strapi Cloud account and applications. 

:::strapi What is Strapi Cloud?
 built on top of Strapi, the open-source headless CMS.
:::

:::prerequisites
The typical workflow, which is recommended by the Strapi team, is:
1. Create your Strapi application locally (v4.8.2 or later).
2. Optionally, extend the application with plugins or custom code.
3. Version the application's codebase through your git provider (GitHub or GitLab).
4. Deploy the application with Strapi Cloud.
:::

The Strapi Cloud documentation is organised in topics in a order that should correspond to your journey with the product. The following cards, on which you can click, will redirect you to the main topics and steps.

:::strapi Welcome to the Strapi community!
Strapi Cloud is built on top of Strapi, an open-source, community-oriented project. The Strapi team has at heart to share their vision and build the future of Strapi with the Strapi community. This is why the  is open: as all insights are very important and will help steer the project in the right direction. Any community member is most welcome to share ideas and opinions there.

You can also join , the , and the  and benefit from the years of experience, knowledge, and contributions by the Strapi community as a whole.
:::



# Information on billing & usage
Source: https://docs.strapi.io/cloud/getting-started/usage-billing

# Information on billing & usage

This page contains general information related to the usage and billing of your Strapi Cloud account and projects.

 Strapi Cloud offers 1 Free plan and 3 paid plans: Essential, Pro and Scale (see [Pricing page](https://strapi.io/pricing-cloud)). The table below summarizes Strapi Cloud usage-based pricing plans, for general features and usage:

| Feature                          | Free  | Essential | Pro | Scale |
| -------------------------------- | ----- | --------- | --- | ----- |
| **Database Entries**             | 500   | Unlimited* | Unlimited* | Unlimited* |
| **Asset Storage**               | 10GB  | 50GB      | 250GB | 1,000GB |
| **Asset Bandwidth (per month)** | 10GB  | 50GB      | 500GB | 1,000GB |
| **API Requests (per month)**     | 10,000 | 100,000 | 1,000,000 | 10,000,000 |
|  |  |  |  |  |
| **Backups**                      | N/A | N/A | Weekly | Daily |
| **Custom domains**               | N/A | Included | Included | Included | 
| **Environments**                 | N/A | N/A | 0 included (up to 99 extra) | 1 included (up to 99 extra) |
| **Emails (per month)**           | 100 | Unlimited* | Unlimited* | Unlimited* |

:::strapi Additional information on usage and features
- General features & usage:
  - Database entries are the number of entries in your database.
  - Asset storage is the amount of storage used by your assets.
  - Asset bandwidth is the amount of bandwidth used by your assets.
  - API requests are the number of requests made to your APIs. This includes requests to the GraphQL and REST APIs, excluding requests for file and media assets counted towards CDN bandwidth and storage.
- Cloud specific feature:
  - Backups refers to the automatic backups of Strapi Cloud projects (see [Backups documentation](/cloud/projects/settings#backups) for more information on the feature).
  - Custom domains refer to the ability to define a custom domain for your Strapi Cloud (see [Custom domains](/cloud/projects/settings#connecting-a-custom-domain)).
  - Environments refers to the number of environments included in the plan on top of the default production environment (see [Environments](/cloud/projects/settings#environments) documentation for more information on the feature).
:::

:::info Scale-to-zero and cold start on the Free plan
On the Free plan, projects automatically scale down to zero after a short period of inactivity. When the application is accessed again—either through the frontend or via an API request—it may take a few seconds (up to a minute) before a response is returned.
Upgrading to a paid plan disables scaling to zero and cold starts, resulting in instant response times at all times.
:::

## Environments management

Environments are isolated instances of your Strapi Cloud project. All projects have a default production environment, but other additional environments can be configured for projects on a Pro or Scale plan, from the *Environments* tab of a project's settings (see [Environments](/cloud/projects/settings#environments)). There is no limit to the number of additional environments that can be configured for a Strapi Cloud project.

The usage limits of additional environments are the same as for the project's production environment (e.g. an additional environment on the Pro plan will be limited at 250GB for asset storage, and overages will be charged the same way as for the production environment). Note however that the asset bandwidth and API calls are project-based, not environment-based, so these usage limits do not change even with additional environments.
 
## Billing

Billing is based on the usage of your Strapi Cloud account and projects. You will be billed monthly for the usage of your account and applications. You can view your usage and billing information in the  section of your Strapi Cloud account.

### Overages

:::caution
Overages are not allowed on the Free plan.
:::

If you exceed the limits of your plan for API Requests, Asset Bandwidth, or Asset Storage, you will be charged for the corresponding overages. 

For example, if you exceed the 500GB limit in asset bandwidth of the Pro plan, you will be charged for the excess bandwidth at the end of the current billing period or on project deletion. Overages are not prorated and are charged in full.

Overages are charged according to the following rates:

| Feature | Rate |
| --- | --- |
| **API Requests** | $1.50 / 25k requests |
| **Asset Bandwidth** | $30.00 / 100GB |
| **Asset Storage** | $0.60 / GB per month |

### Project suspension

Projects may end up in a **Suspended** state for various reasons, including: not paying the invoice, exceeding the limits of your free plan, or violating the . 

If your project is suspended, you will no longer be able to access the application or trigger new deployments. You will also be unable to access the Strapi admin panel.

You can view the status of your project in the  section of your Strapi Cloud account and you will be notified by email.

:::warning
If you do not resolve the issue within 30 days, your suspended project will be deleted and all data will be permanently lost. To avoid this situation, you will be sent a first email when your project becomes suspended, then another email every 5 days until one week left, to remind you to solve the issue. The last week before the deletion of the project, you will be sent 3 more emails: 6 days, 3 days and 1 day before your project is finally deleted.
:::

#### Project suspension for exceeding the Free plan limits

When a project hosted with the Free plan exceeds either the API requests or the Asset Bandwidth limits, it will be suspended until the monthly allowance resets at the beginning of the following month.

While the project is suspended:

- Users cannot trigger new deployments
- Access to the application is blocked
- Users cannot make changes to the project’s settings

To reactivate the project immediately, users can upgrade to a paid plan.

#### Project suspension after subscription cancellation

If you don't pay the invoice, the subscription of your project will automatically be canceled and the project will be suspended. You can reactivate the subscription through the billing modal (see [Edit subscription](/cloud/account/account-billing#account-billing)).

1. Log into the billing modal and go to the *Subscription details* of the subscription associated with the suspended project. You should see a warning message confirming that the subscription was canceled for the following reason: "Not Paid".
2. Go back to the homepage of the billing modal, listing subscriptions and billing options.
3. Go to *Payment methods* and add a new, working card to pay the invoice. As soon as the invoice is paid, your project will automatically be reactivated.

#### Project suspension for other reasons

If your project was suspended for reasons other than unpaid invoice leading to subscription cancellation, you may not have the possibility to reactivate your project yourself. You should receive an email with instructions on how to resolve the issue. If you do not receive the email notification, please contact [Strapi Support](mailto:support@strapi.io).



# Collaboration
Source: https://docs.strapi.io/cloud/projects/collaboration

# Collaboration on projects

Projects are created by a user via their Strapi Cloud account. Strapi Cloud users can share their projects to anyone else, so these new users can have access to the project dashboard and collaborate on that project, without the project owner to ever have to share their credentials.

Users invited to collaborate on a project, called maintainers, do not have the same permissions as the project owner. Contrary to the project owner, maintainers:

- Cannot share the project themselves to someone else
- Cannot delete the project from the project settings
- Cannot access the *Billing* section of project settings

## Sharing a project

To invite a new maintainer to collaborate on a project:

1. From the *Projects* page, click on the project of your choice to be redirected to its dashboard.
2. Click on the **Share** button located in the dashboard's header.
3. In the *Share [project name]* dialog, type the email address of the person to invite in the textbox. A dropdown indicating "Invite [email address]" should appear.
4. Click on the dropdown: the email address should be displayed in a purple box right below the textbox.
5. (optional) Repeat steps 3 and 4 to invite more people. Email addresses can only entered one by one but invites can be sent to several email addresses at the same time.
6. Click on the **Send** button.

New maintainers will be sent an email containing a link to click on to join the project. Once a project is shared, avatars representing the maintainers will be displayed in the project dashboard's header, next to the **Share** button, to see how many maintainers collaborate on that project and who they are.

:::tip
Avatars use GitHub, Google or GitLab profile pictures, but for pending users only initials will be displayed until the activation of the maintainer account. You can hover over an avatar to display the full name of the maintainer.
:::

## Managing maintainers

From the *Share [project name]* dialog accessible by clicking on the **Share** button of a project dashboard, projects owners can view the full list of maintainers who have been invited to collaborate on the project. From there, it is possible to see the current status of each maintainer and to manage them.

Maintainers whose full name is displayed are users who did activate their account following the invitation email. If however there are maintainers in the list whose email address is displayed, it means they haven't activated their accounts and can't access the project dashboard yet. In that case, a status should be indicated right next to the email address to explain the issue:

- Pending: the invitation email has been sent but the maintainer hasn't acted on it yet.
- Expired: the email has been sent over 72 hours ago and the invitation expired.

For Expired statuses, it is possible to send another invitation email by clicking on the **Manage** button, then **Resend invite**. 

### Revoking maintainers

To revoke a maintainer's access to the project dashboard:

1. Click on the **Share** button in the project dashboard's header.
2. In the list of *People with access*, find the maintainer whose access to revoke and click on the **Manage** button.
3. Click on the **Revoke** button.
4. In the confirmation dialog, click again on the **Revoke** button.

The revoked maintainer will completely stop having access to the project dashboard.

:::note
Maintainers whose access to the project has been revoked do not receive any email or notification.
:::



# Deployments management
Source: https://docs.strapi.io/cloud/projects/deploys

# Deployments management

The creation of a new Strapi Cloud project automatically trigger the deployment of that project. After that, deployments can be:

- manually triggered whenever needed, [from the Cloud dashboard](#triggering-a-new-deployment) or [from the CLI](/cloud/cli/cloud-cli#strapi-deploy),
- or automatically triggered everytime a new commit is pushed to the branch, if the Strapi Cloud project is connected to a git repository and the "deploy on push" option is enabled (see [Project settings](/cloud/projects/settings#modifying-git-repository--branch)).

Ongoing deployments can also be [manually canceled](#cancelling-a-deployment) if needed.

## Triggering a new deployment

To manually trigger a new deployment for your project, click on the **Trigger deployment** button always displayed in the right corner of a project dashboard's header. This action will add a new card in the *Deployments* tab, where you can monitor the status and view the deployment logs live (see [Deploy history and logs](/cloud/projects/deploys-history)).

## Cancelling a deployment

If for any reason you want to cancel an ongoing and unfinished deployment:

1. Go to the *Deployment details* page of the latest triggered deployment (see [Accessing log details](/cloud/projects/deploys-history#accessing-deployment-details--logs)).
2. Click on the **Cancel deployment** button in the top right corner. The status of the deployment will automatically change to *Canceled*.

:::tip
You can also cancel a deployment from the *Deployments* tab which lists the deployments history. The card of ongoing deployment with the *Building* status will display a ![Cancel button](/img/assets/icons/clear.svg) button for cancelling the deployment.
:::



# Deployment history & logs
Source: https://docs.strapi.io/cloud/projects/deploys-history

# Deployment history and logs {#deploy-history-and-logs}

For each Strapi Cloud project, you can access the history of all deployments that occurred and their details including build and deployment logs. This information is available in the *Deployments* tab.

## Viewing the deployment history {#viewing-deploy-history}

In the *Deployments* tab is displayed a chronological list of cards with the details of all historical deployments for your project.

, with a direct link to your git provider, and commit message
- Deployment status:
    - *Deploying*
    - *Done*
    - *Canceled*
    - *Build failed*
    - *Deployment failed*
- Last deployment time (when the deployment was triggered and the duration)
- Branch

## Accessing deployment details & logs

From the *Deployments* tab, you can hover a deployment card to make the ![See logs button](/img/assets/icons/Eye.svg) **Show details** button appear. Clicking on this button will redirect you to the *Deployment details* page which contains the deployment's detailed logs.

, with a direct link to your git provider, and commit message used for this deployment
- *Status*, which can be *Building*, *Deploying*, *Done*, *Canceled*, *Build failed*, or *Deployment failed*
- *Source*: the branch and commit message for this deployment
- *Duration*: the amount of time the deployment took and when it occurred



# Notifications
Source: https://docs.strapi.io/cloud/projects/notifications

# Notifications

The Notification center can be opened by clicking the bell icon  in the top navigation of the Cloud dashboard.

It displays a list of the latest notifications for all your existing projects. Clicking on a notification card from the list will redirect you to the *Log details* page of the corresponding deployment (more information in [Deploy history & logs](/cloud/projects/deploys-history#accessing-deployment-details--logs)).

The following notifications can be listed in the Notifications center:

- *deployment completed*: when a deployment is successfully done.
- *Build failed*: when a deployment fails during the build stage.
- *deployment failed*: when a deployment fails during the deployment stage.
- *deployment triggered*: when a deployment is triggered by a new push to the connected repository. This notification is however not sent when the deployment is triggered manually.

:::note
All notifications older than 30 days are automatically removed from the Notification center.
:::



# Projects overview
Source: https://docs.strapi.io/cloud/projects/overview

# Projects overview

The *Projects* page displays a list of all your Strapi Cloud projects. From here you can manage your projects and access the corresponding applications.

Each project card displays the following information:

* the project name
* the last successful deployment’s date of the Production environment
* the current status of the project:
    * *Disconnected*, if the project repository is not connected to Strapi Cloud
    * *Suspended*, if the project has been suspended (refer to [Project suspension](/cloud/getting-started/usage-billing#project-suspension) to reactivate the project)
    * *Incompatible version*, if the project is using a Strapi version that is not compatible with Strapi Cloud

Each project card also displays a  menu icon to access the following options:
* **Visit App**: to be redirected to the application
* **Go to Deployments**: to be redirected to the [*Deployment*](/cloud/projects/deploys) page
* **Go to Settings**: to be redirected to the [*Settings*](/cloud/projects/settings) page

## Accessing a project's dashboard

From the *Projects* page, click on any project card to access its dashboard. It displays the project and environment details and gives access to the deployment history and all available settings.

From the dashboard's header of a chosen project, you can:
- use the **Share** button to invite users to collaborate on the project (see [Collaboration](/cloud/projects/collaboration)) and see the icons of those who have already been invited ,
- use the  **Settings** button to access the settings of the project and its existing environments ,
- choose which environment to visualise for the project or add a new environment ,
- trigger a new deployment (see [Deployments management](/cloud/projects/deploys)) and visit your application .

Your project's dashboard also displays:
- the *Deployments* and *Runtime logs* tabs, to see the deployments history (more details in [Deploy history and logs](/cloud/projects/deploys-history)) and the runtime logs of the project (see [dedicated documentation page](/cloud/projects/runtime-logs)) 
- the project and environment details in a box on the right of the interface , including:
  - the number of API calls,
  - the current usage for asset bandwidth and storage,
  - the name of the branch and a **Manage** button to be redirect to the branch settings (see [Modifying git repository & branch](/cloud/projects/settings#modifying-git-repository--branch)),
  - the name of the base directory,
  - the Strapi version number,
  - the Strapi app's url.



# Runtime logs
Source: https://docs.strapi.io/cloud/projects/runtime-logs

# Runtime logs

From a chosen project's dashboard, the *Runtime logs* tab displays the live logs of the project.

:::note

- The *Runtime logs* are only accessible once the project is successfully deployed.
- Runtime logs are not live for projects on the Free plan and are reset each time the application is scaled to zero due to inactivity.
:::



# Project settings
Source: https://docs.strapi.io/cloud/projects/settings

# Project settings

From a chosen project's dashboard, the  **Settings** button, located in the header, enables you to manage the configurations and settings for your Strapi Cloud project and its environments.

The settings' menu on the left side of the interface is separated into 2 categories: the settings for the entire project and the settings specific to any configured environment for the project.

## Project-level settings

There are 5 tabs available for the project's settings:
-  [*General*](#general),
-  [*Environments*](#environments),
-  [*Billing & Usage*](#billing--usage),
-  [Plans](#plans),
- and  [Invoices](#invoices).

### General

The  *General* tab for the project-level settings enables you to check and update the following options for the project:

- *Basic information*, to see:
  - the name of your Strapi Cloud project — used to identify the project on the Cloud Dashboard, Strapi CLI, and deployment URLs — and change it (see [Renaming project](#renaming-project)).
  - the chosen hosting region for your Strapi Cloud project, meaning the geographical location of the servers where the project and its data and resources are stored. The hosting region is set at project creation (see [Project creation](/cloud/getting-started/deployment)) and cannot be modified afterwards.
  - the app's internal name for the project, which can be useful for debug & support purposes.
- *Strapi CMS license key*: to enable and use some CMS features directly on your Cloud project (see [Pricing page](https://strapi.io/pricing-self-hosted) to purchase a license).

- *Connected Git repository*: to change the repository and branch used for your project (see [Modifying git repository & branch](#modifying-git-repository--branch)). Also allows to enable/disable the "deploy on push" option.
- *Delete project*: to permanently delete your Strapi Cloud project (see [Deleting Strapi Cloud project](#deleting-strapi-cloud-project)).

#### Renaming project

The project name is set at project creation (see [Project creation](/cloud/getting-started/deployment)) and can be modified afterwards via the project's settings.

1. In the *Basic information* section of the  *General* tab, click on the edit  button.
2. In the dialog, write the new project name of your choice in the *Project name* textbox.
3. Click on the **Rename** button to confirm the project name modification.

#### Adding a CMS license key {#adding-cms-license-key}

A CMS license key can be added and connected to a Strapi Cloud project to be able to use some features of Strapi CMS. The CMS features that will be accessible via the license key depend on the type of license that was purchased: please refer to the  for more information and/or to purchase a license.

:::note
If you don't see the *Strapi CMS license key* section, it probably means that your subscription is a legacy one and does not support custom CMS licenses. It means that you already have one that is automatically included on your project.
:::

1. In the *Strapi CMS license key* section, click on the **Add license** button.
2. In the dialog, paste your license key in the field.
3. Click on **Save**.

To remove the Strapi CMS license from your Strapi Cloud project, you can click on the **Unlink license** button. This will also remove access and usage to the CMS features included in the previously added license.

#### Modifying git repository & branch

The GitHub or GitLab repository, branch and base directory for a Strapi Cloud project are by default chosen at the creation of the project (see [Creating a project](/cloud/getting-started/deployment)). After the project's creation, via the project's settings, it is possible to update the project's repository or switch to another git provider.

:::caution
Updating the git repository could result in the loss of the project and its data, for instance if the wrong repository is selected or if the data schema between the old and new repository doesn't match.
:::

1. In the *Connected git repository* section of the  *General* tab, click on the **Update repository** button. You will be redirected to another interface.
2. (optional) If you wish to not only update the repository but switch to another git provider, click on the **Switch Git provider** button at the top right corner of the interface. You will be redirected to the chosen git provider's authorization settings before getting back to the *Update repository* interface.
3. In the *Update repository* section, fill in the 2 available settings:

    | Setting name    | Instructions                                                             |
    | --------------- | ------------------------------------------------------------------------ |
    | Account         | Choose an account from the drop-down list.                               |
    | Repository      | Choose a repository from the drop-down list.                             |

4. In the *Select Git branches* section, fill in the available settings for any of your environments. Note that the branch can be edited per environment via its own settings, see [General (environment)](#environments).

    | Setting name    | Instructions                                                             |
    | --------------- | ------------------------------------------------------------------------ |
    | Branch          | Choose a branch from the drop-down list.                                 |
    | Base directory  | Write the path of the base directory in the textbox.                     |
    | Auto-deploy     | Tick the box to automatically trigger a new deployment whenever a new commit is pushed to the selected branch. Untick it to disable the option. |

5. Click on the **Update repository** button at the bottom of the *Update repository* interface.
6. In the *Update repository* dialog, confirm your changes by clicking on the **Confirm** button.

#### Deleting Strapi Cloud project

You can delete any Strapi Cloud project, but it will be permanent and irreversible. Associated domains, deployments and data will be deleted as well and the subscription for the project will automatically be canceled.

1. In the *Delete project* section of the  *General* tab, click on the **Delete project** button.
2. In the dialog, select the reason why you are deleting your project. If selecting "Other" or "Missing feature", a textbox will appear to let you write additional information.
3. Confirm the deletion of your project by clicking on the **Delete project** button at the bottom of the dialog.

### Environments {#environments}

The  *Environments* tab allows to see all configured environments for the Strapi Cloud project, as well as to create new ones. Production is the default environment, which cannot be deleted. Other environments can be created (depending on the subscription plan for your project) to work more safely on isolated instances of your Strapi Cloud project (e.g. a staging environment where tests can be made before being available on production).

:::tip
Clicking on the **Manage** button for any environment will redirect you to the environment's own general settings, where it is possible to change the Node version, edit the git branches and delete or reset the environment. Please [refer to the dedicated documentation](#environments) for more information.
:::

:::tip
A new environment can also be added from the [project dashboard](/cloud/projects/overview#accessing-a-projects-dashboard).
:::

To create a new environment:

1. Click on the **Add a new environment** button.
2. In the dialog that opens, you can see the price for the new environment and the date of the next invoice.
3. Fill in the available settings:

    | Setting name     | Instructions                                                             |
    | ---------------- | ------------------------------------------------------------------------ |
    | Environment name | (mandatory) Write a name for your project's new environment.             |
    | Git branch       | (mandatory) Select the right branch for your new environment.            |
    | Base directory   | Write the name of the base directory of your new environment.            |
    | Import variables | Tick the box to import variable names from an existing environment. Values will not be imported, and all variables will remain blank. |
    | Auto-deploy      | Tick the box to automatically trigger a new deployment whenever a new commit is pushed to the selected branch. Untick it to disable the option. |

4. Click on the **Add environment** button to create your project's new environment. A new deployment will automatically be triggered.

:::caution
If the creation of a new environment fails but you are still charged, try creating the environment again. This time, the environment creation should be successful and you will not be charged a second time. This behaviour is an known issue that should be fixed in the upcoming weeks.
:::

### Billing & Usage

The  *Billing & Usage* displays your next estimated payment, all information on the current subscription plan and a detailed summary of the project's and its environments' usage. It also allows you to add new environments (please [refer to the documentation in the Environments section](#environments)) for your project.

Through this tab, you also have the possibility to:
- click the **Change** button to be redirected to the  *Plans* tab, where you can change you subscription plan ([see related documentation](#plans)),
- click the **Edit** button in order to set a new payment method (see [related documentation](/cloud/account/account-billing)).

:::note
You can attach a dedicated card to your project by choosing the payment method directly from this page. In that way, you can manage your subscriptions with different cards.
:::

:::tip
In the Usage section of the  *Billing & Usage* tab, you can see the current monthly usage of your project compared to the maximum usage allowed by your project's subscription. Use the arrows in the top right corner to see the project's usage for any chosen month.

Note also that if your usage indicates that another subscription plan would fit better for your project, a message will be displayed in the  *Billing & Usage* tab to advise which plan you could switch to.
:::

### Plans

The  *Plans* tab displays an overview of the available Strapi Cloud plans and allows you to upgrade or downgrade from your current plan to another.

:::info
Strapi recently launched [new Cloud plans](https://strapi.io/pricing-cloud). For now, you can [downgrade](#downgrading-to-another-plan) or [upgrade](#upgrading-to-another-plan) to another plan directly from the Cloud dashboard, under the  **Settings** >  **Plans** section.

If your project was created before the new plans were released, it may be on a *legacy* plan—deprecated but still supported. You can sidegrade to a new plan if desired (see [downgrade section](#downgrading-to-another-plan)).
:::

#### Upgrading to another plan

Strapi Cloud plan upgrades to another, higher plan are immediate and can be managed for each project via the project settings.

:::note
When using the Free plan, the buttons to upgrade to another plan are greyed out and unusable until you have filled in your billing information. Please refer to [Account billing details](/cloud/account/account-billing) for more information.
:::

To upgrade your current plan to a higher one:

1. In the  *Plans* tab of your project's settings, click on the **Upgrade** button of the plan you want to upgrade to.
2. In the window that opens, check the payment details that indicate how much you will have to pay immediately after confirming the upgrade, and the available options.

   a. (optional) Click the **Edit** button to select another payment method.
   b. (optional) Click **I have a discount code**, enter your discount code in the field, and click on the **Apply** button.

3. Click on the **Upgrade to [plan name]** button to confirm the upgrade of your Strapi project to another plan.

#### Downgrading to another plan

Strapi Cloud plan downgrades can be managed for each project via the project settings. Downgrades are however not immediately effective: the higher plan will still remain active until the end of the current month (e.g. if you downgrade from the Scale plan to the Pro plan on June 18th, your project will remain on the Scale plan until the end of the month: on July 1st, the Pro plan will be effective for the project).

:::caution
Make sure to check the usage of your Strapi Cloud project before downgrading: if your current usage exceeds the limits of the lower plan, you are taking the risk of getting charged for the overages. You may also lose access to some features: for example, downgrading to the Essential plan which doesn't include the Backups feature, would make you lose all your project's backups. Please refer to [Information on billing & usage](/cloud/getting-started/usage-billing) for more information.

Note also that you cannot downgrade if you have additional environments (i.e. extra environments that have been purchased, not the default or included environments). For instance, if you wish to downgrade from the Pro plan to the Essential plan, you first need to delete all additional environments that have been configured (see [Resetting & Deleting environment](#resetting--deleting-environment)), for the **Downgrade** button to be displayed and available again.
:::

To downgrade your current plan to a lower one:

1. In the  *Plans* tab of your project's settings, click on the **Downgrade** button of the plan you want to downgrade to.
2. In the window that opens, check the information related to downgrading.
3. Click on the **Downgrade** button to confirm the downgrade of your Strapi project's plan. 

:::tip
Downgrades are effective from the 1st of the following month. Before that date, you can click on the **Cancel downgrade** button to remain on the current plan.
:::

### Invoices

The  *Invoices* tab displays the full list of invoices for your Strapi Cloud project as well as their status.

:::strapi Invoices are also available in your profile settings.
In the *Profile > Invoices* tab, you will find the complete list of invoices for all your projects. Feel free to check the [dedicated documentation](/cloud/account/account-billing#account-invoices).
:::

No invoice is issued for the Free plan.

## Environment-level settings

In the project's environments' settings, you first need to select the environment whose settings you would like to configure, using the dropdown. Depending on the chosen environment, there are 3 to 4 tabs available:

-  [*Configuration*](#configuration),
-  [*Backups*](#backups), which are only available for the production environment,
-  [*Domains*](#domains),
- and  [*Variables*](#variables).

### Configuration

The  *Configuration* tab for the environment-level settings enables you to check and update the following options for the project:

- *Basic information*, to see:
  - the name of your Strapi Cloud project's environment. The environment name is set when it is created and cannot be modified afterwards.
  - the Node version of the environment: to change the Node version of the project (see [Modifying Node version](#modifying-node-version)).
  - the app's internal name for the environment, which can be useful for debug & support purposes.
- *Connected branch*: to change the branch of the GitHub repository used for your environment (see [Editing Git branch](#editing-git-branch)). Also allows to enable/disable the "deploy on push" option.
- *Danger zone*: to reset or permanently delete your Strapi Cloud project's environment (see [Resetting & Deleting environment](#resetting--deleting-environment)).

#### Modifying Node version

The environment's Node version is based on the one chosen at the creation of the project (see [Creating a project](/cloud/getting-started/deployment)), through the advanced settings. It is possible to switch to another Node version afterwards, for any environment.

1. In the *Basic information* section of the  *Configuration* tab, click on the *Node version*'s edit  button.
2. Using the *Node version* drop-down in the dialog, click on the version of your choice.
3. Click on the **Save** button.
4. Trigger a new deployment in the environment for which you changed the Node version. If the deployment fails, it is because the Node version doesn't match the version of your Strapi project. You will have to switch to the other Node version and re-deploy your project again.

#### Editing Git branch

2. In the *Edit branch* dialog, edit the available settings. Note that the branch can be edited for all environments at the same time via the project's settings, see [General](#general).

    | Setting name    | Instructions                                                             |
    | --------------- | ------------------------------------------------------------------------ |
    | Selected branch | (mandatory) Choose a branch from the drop-down list.                     |
    | Base directory  | Write the path of the base directory in the textbox.                     |
    | Deploy the project on every commit pushed to this branch | Tick the box to automatically trigger a new deployment whenever a new commit is pushed to the selected branch. Untick it to disable the option. |

3. Click on the **Save** button.

#### Resetting & Deleting environment

You can reset or delete any additional environment of your Strapi Cloud project, but it will be permanent and irreversible. The default, production environment, can however not be neither reset nor deleted.

##### Resetting an environment

Resetting an environment deletes all environments data and resets the variables to their default. To do so:

1. In the *Danger zone* section of the  *Configuration* tab, click on the **Reset environment** button.
2. In the dialog that opens, click on the **Continue** button to confirm the environment reset.
3. Fill in the available fields to reset the environment:

    | Setting name    | Instructions                                                             |
    | --------------- | ------------------------------------------------------------------------ |
    | Environment name | (mandatory) Write a name for your project's new environment.            |
    | Git branch      | (mandatory) Choose a branch from the drop-down list.                     |
    | Base directory  | Write the path of the base directory in the textbox.                     |
    | Import variables | Tick the box to import variable names from an existing environment. Values will not be imported, and all variables will remain blank. |
    | Auto-deploy     | Deploy the project on every commit pushed to this branch | Tick the box to automatically trigger a new deployment whenever a new commit is pushed to the selected branch. Untick it to disable the option. |

4. Click on the **Reset** button.

##### Deleting an environment

1. In the *Danger zone* section of the  *Configuration* tab, click on the **Delete environment** button.
2. Write in the textbox your *Environment name*.
3. Click on the **Delete environment** button to confirm the deletion.

### Backups {#backups}

The  *Backups* tab informs you of the status and date of the latest backup of your Strapi Cloud projects. The databases associated with all existing Strapi Cloud projects are indeed automatically backed up (weekly for Pro plans and daily for Scale plans). Backups are retained for a 28-day period. Additionally, you can create a single manual backup.

:::note Notes

- The backup feature is not available for Strapi Cloud projects using the Free or Essential plans. You will need to upgrade to either the Pro or Scale plan to have your project automatically backed up and to have access to manual backups.

<!-- - Only project owners can restore a backup. Maintainers have access to the  *Backups* tab but the **Restore backup** button won't be displayed for them. Refer to [Collaboration](/cloud/projects/collaboration) for more information. -->

- The manual backup option should become available shortly after project's first succesful deployment.

- The backup feature is only available for the default, production environment. Other additional environment's settings will not show the  *Backups* tab.
:::

:::tip
For projects created before the release of the Backup feature in October 2023, the first backup will automatically be triggered with the next deployment of the project.
:::

#### Creating a manual backup

To create a manual backup, in the  *Backups* section, click on the **Create backup** button.

The manual backup should start immediately, and restoration or creation of other backups will be disabled until backup is complete.

:::caution
When creating a new manual backup, any existing manual backup will be deleted. You can only have one manual backup at a time.
:::

#### Restoring a backup

If you need to restore a backup of your project:

1. In the  *Backups* section, click on the **Restore backup** button.
2. In the dialog, choose one of the available backups (automatic or manual) of your project in the *Choose backup* drop-down.
3. Click on the **Restore** button of the dialog. Once the restoration is finished, your project will be back to the state it was at the time of the chosen backup. You will be able to see the restoration timestamp and the backup restored in the  *Backups* tab.
4. The timestamp of the last completed restoration will be displayed to help you track when the project was last restored.

### Domains

The  *Domains* tab enables you to manage domains and connect new ones.

All existing domains for your Strapi Cloud project are listed in the  *Domains* tab. For each domain, you can:

- see its current status:
    -  Active: the domain is currently confirmed and active
    -  Pending: the domain transfer is being processed, waiting for DNS changes to propagate
    -  Failed: the domain change request did not complete as an error occured
- click the  edit button to access the settings of the domain
- click the  delete button to delete the domain

#### Connecting a custom domain

Default domain names are made of 2 randomly generated words followed by a hash. They can be replaced by any custom domain of your choice.

1. Click the **Connect new domain** button.
2. In the window that opens, fill in the following fields:

| Setting name              | Instructions                                                              |
| ------------------------- | ------------------------------------------------------------------------- |
| Domain name               | Type the new domain name (e.g. *custom-domain-name.com*)                  |
| Hostname                  | Type the hostname (i.e. address end-users enter in web browser, or call through APIs). |
| Target                    | Type the target (i.e. actual address where users are redirected when entering hostname). |
| Set as default domain     | Tick the box to make the new domain the default one.                      |

3. Click on the **Save** button.

:::caution Custom domains and assets
When using custom domains, these domains do not apply to the URLs of uploaded assets. Uploaded assets keep the Strapi Cloud project-based URL.

This means that, if your custom domain is hosted at `https://my-custom-domain.com` and your Strapi Cloud project name is `my-strapi-cloud-instance`, API calls will still return URLs such as `https://my-strapi-cloud-instance.media.strapiapp.com/example.png`.
:::

:::note
Custom domains are not available on the Free plan. Downgrading to the Free plan will result in the application domain's being restored to the default one.
:::

### Variables

Environment variables (more information in the [CMS Documentation](/cms/configurations/environment)) are used to configure the environment of your Strapi application, such as the database connection.

In the  *Variables* tab are listed both the default and custom environment variables for your Strapi Cloud project. Each variable is composed of a *Name* and a *Value*.

#### Managing environment variables

Hovering on an environment variable, either default or custom, displays the following available options:

-  **Show value** to replace the `*` characters with the actual value of a variable.
-  **Copy to clipboard** to copy the value of a variable.
-  **Actions** to access the  Edit and  Delete buttons.
  - When editing a default variable, the *Name* cannot be modified and the *Value* can only be automatically generated using the  Generate value button. Don't forget to **Save** at the end.
  - When editing a custom variable, both the *Name* and *Value* can be modified by writing something new or by using the  Generate value button. Don't forget to **Save** at the end.
  - When deleting a variable, you will be asked to click on a **Confirm** button to confirm the deletion.

:::tip
Use the search bar to find more quickly an environment variable in the list!
:::

#### Creating custom environment variables

Custom environment variables can be created for the Strapi Cloud project. Make sure to redeploy your project after creating or editing an environment variable.

<!-- Future iteration
:::note
Instead of creating a new custom environment variable from scratch, you can also import one by clicking on the **Import variables (.env)** button.
:::
-->

1. In the *Custom environment variables* section, click on the **Add variable** button.
2. Write the *Name* and *Value* of the new environment variable in the same-named fields. Alternatively, you can click on the  icon to generate automatically the name and value.
3. (optional) Click on **Add another** to directly create one or more other custom environment variables.
4. Click on the **Save** button to confirm the creation of the custom environment variables.



# 관리자 패널 커스터마이징
Source: https://docs.strapi.io/cms/admin-panel-customization

# 관리자 패널 커스터마이징

**Strapi의 프론트엔드** 는 관리자 패널이라고 부릅니다. 관리자 패널은 콘텐츠 API로 접근할 수 있는 콘텐츠를 구조화하고 관리할 수 있도록 그래픽 UI를 제공합니다. 관리자 패널 개요는 [시작하기 > 관리자 패널](/cms/features/admin-panel) 페이지를 참고하세요.

개발자 관점에서 Strapi의 관리자 패널은 React 기반의 싱글 페이지 애플리케이션이며, Strapi 애플리케이션의 모든 기능과 설치된 플러그인을 포함합니다.

관리자 패널 커스터마이징은 `src/admin/app` 파일 또는 `src/admin` 폴더 내의 다른 파일(자세한 구조는 [프로젝트 구조](/cms/project-structure) 참고)을 수정하여 진행합니다. 이를 통해 다음과 같은 작업이 가능합니다:

- 로고, 파비콘, 언어 등 브랜드 아이덴티티에 맞게 일부 UI를 커스터마이징
- 리치 텍스트 에디터, 번들러 등 일부 기능 교체
- 테마 확장 또는 UI 확장으로 새로운 기능 추가 및 기존 UI 커스터마이징

## 일반 고려사항

:::prerequisites
관리자 패널 커스터마이징을 위해 코드를 수정하기 전:

- 기본 `app.example.tsx|js` 파일을 `app.ts|js`로 이름 변경
- `/src/admin/`에 `extensions` 폴더 생성
- 개발 중 변경 사항을 실시간으로 확인하려면, 관리자 패널 서버가 실행 중이어야 합니다(기본 [호스트, 포트, 경로](/cms/configurations/admin-panel#admin-panel-server)를 변경하지 않았다면 `yarn develop` 또는 `npm run develop` 명령어로 실행)
:::

가장 기본적인 커스터마이징은 `/src/admin/app` 파일에서 `config` 객체를 수정하여 진행합니다.

`config` 객체에서 사용하는 파일(예: 커스텀 로고)은 `/src/admin/extensions/` 폴더에 두고, `/src/admin/app.js`에서 import해야 합니다.

</Tabs>

이 명령어는 `./build` 폴더의 내용을 대체합니다. 

## 기본 예시

아래는 관리자 패널을 간단히 커스터마이징하는 예시입니다:

</Tabs>

:::strapi 코드베이스의 상세 예시

* 전체 번역 키(예: 환영 메시지 변경)는 [GitHub](https://github.com/strapi/strapi/blob/develop/packages/core/admin/admin/src/translations)에서 확인할 수 있습니다.
* 라이트/다크 테마 색상도 [GitHub](https://github.com/strapi/design-system/tree/main/packages/design-system/src/themes)에서 확인할 수 있습니다.
:::



# 관리자 패널 번들러
Source: https://docs.strapi.io/cms/admin-panel-customization/bundlers

Strapi의 [관리자 패널](/cms/admin-panel-customization)은 Strapi 애플리케이션의 모든 기능과 설치된 플러그인을 포함하는 React 기반 싱글 페이지 애플리케이션입니다. Strapi 5에서는 2가지 번들러([Vite](#vite)(기본값), [webpack](#webpack))를 사용할 수 있으며, 둘 다 필요에 맞게 설정할 수 있습니다.

:::info
문서에서는 편의상 `strapi develop` 명령어를 언급하지만, 실제로는 사용하는 패키지 매니저에 따라 `yarn develop` 또는 `npm run develop`을 실행하게 됩니다.
:::

## Vite

Strapi 5에서는 

</Tabs>

## Webpack

Strapi 5의 기본 번들러는 Vite입니다. 

</Tabs>



# 관리자 패널 확장
Source: https://docs.strapi.io/cms/admin-panel-customization/extension

# 관리자 패널 확장

Strapi의 [관리자 패널](/cms/admin-panel-customization)은 Strapi 애플리케이션의 모든 기능과 설치된 플러그인을 포함하는 React 기반 싱글 페이지 애플리케이션입니다. Strapi에서 제공하는 [커스터마이징 옵션](/cms/admin-panel-customization#available-customizations)만으로는 요구사항을 충족할 수 없는 경우, 관리자 패널을 확장해야 합니다.

관리자 패널 확장이란, React 기반 구조를 활용해 프로젝트의 특정 요구에 맞게 인터페이스와 기능을 확장하거나 새로운 컴포넌트, 필드 타입 등을 추가하는 것을 의미합니다.

관리자 패널을 확장해야 하는 경우는 2가지가 있습니다:

- Strapi 플러그인 개발자로서, **어떤 Strapi 애플리케이션에 설치해도 항상 관리자 패널을 확장하는 플러그인**을 개발하고 싶은 경우

  👉 [플러그인용 관리자 패널 API](/cms/plugins-development/admin-panel-api)를 활용하면 됩니다.

- Strapi 개발자로서, **특정 Strapi 애플리케이션 인스턴스만을 위한 고유한 확장**을 개발하고 싶은 경우

  👉 `/src/admin/app` 파일을 직접 수정하고, `/src/admin/extensions` 내의 파일을 import하여 확장할 수 있습니다.

:::strapi 추가 자료
* 기본 리치 텍스트 에디터를 교체하고 싶다면 [관련 문서](/cms/admin-panel-customization/wysiwyg-editor)를 참고하세요.
* 에서도 관리자 패널 개발에 대한 추가 정보를 확인할 수 있습니다.
:::



# 파비콘
Source: https://docs.strapi.io/cms/admin-panel-customization/favicon

# 파비콘

Strapi의 [관리자 패널](/cms/admin-panel-customization)에는 브랜드를 나타내는 여러 이미지가 표시됩니다. 대표적으로 [로고](/cms/admin-panel-customization/logos)와 파비콘이 있습니다. 이 이미지를 교체하면 인터페이스와 애플리케이션을 브랜드 아이덴티티에 맞게 맞출 수 있습니다.

파비콘을 교체하려면:

1. `/src/admin/extensions/` 폴더가 없다면 새로 만듭니다.
2. 파비콘 이미지를 `/src/admin/extensions/` 폴더에 업로드합니다.
3. Strapi 애플리케이션 루트의 기존 **favicon.png|ico** 파일을 원하는 커스텀 `favicon.png|ico` 파일로 교체합니다.
4. `/src/admin/app.[tsx|js]` 파일을 아래와 같이 수정합니다:

   ```js title="./src/admin/app.js"
   import favicon from "./extensions/favicon.png";

   export default {
     config: {
       // 커스텀 아이콘으로 파비콘 교체
       head: {
         favicon: favicon,
       },
     },
   };
   ```

5. 터미널에서 `yarn build && yarn develop` 명령어로 앱을 다시 빌드하고 실행한 뒤, 변경된 파비콘이 적용됐는지 확인합니다.

:::tip
동일한 방법으로 로그인 로고(`AuthLogo`)와 메뉴 로고(`MenuLogo`)도 교체할 수 있습니다. ([로고 커스터마이징 문서](/cms/admin-panel-customization/logos) 참고)
:::

:::caution
파비콘이 캐시될 수 있으니, 웹 브라우저와 Cloudflare CDN 등 도메인 관리 도구의 캐시를 반드시 삭제하세요.
:::



# 홈페이지 커스터마이징
Source: https://docs.strapi.io/cms/admin-panel-customization/homepage

# 홈페이지 커스터마이징

</Tabs>

:::note API는 Strapi 5.13+ 필요
`app.widgets.register` API는 Strapi 5.13 이상에서만 동작합니다. 이전 버전에서 호출하면 관리자 패널이 오류로 중단됩니다.
플러그인 개발자는 다음 중 하나를 따라야 합니다:

- 플러그인의 `package.json`에 `@strapi/strapi` peerDependency를 `^5.13.0`으로 지정(마켓플레이스 호환성 체크에 사용)
- 또는 API 존재 여부를 체크 후 호출:

  ```js
  if ('widgets' in app) {
    // 등록 진행
  }
  ```

플러그인 전체 목적이 위젯 등록이라면 peerDependency 방식이 권장됩니다. 위젯 추가가 부가 기능이라면 두 번째 방식이 더 적합합니다.
:::

#### 위젯 API 레퍼런스

`app.widgets.register()`는 단일 위젯 설정 객체 또는 객체 배열을 받을 수 있습니다. 각 위젯 설정 객체는 다음 속성을 가질 수 있습니다:

| 속성         | 타입                                 | 설명                                              | 필수 여부 |
|--------------|--------------------------------------|---------------------------------------------------|----------|
| `icon`       | `React.ComponentType`                | 위젯 제목 옆에 표시할 아이콘 컴포넌트              | 예       |
| `title`      | `MessageDescriptor`                  | 번역 지원되는 위젯 제목                           | 예       |
| `component`  | `() => Promise

</Tabs>

:::tip
아래 예시는 useEffect에서 직접 데이터 패칭을 하지만, 실제 서비스에서는 [React 공식문서](https://react.dev/learn/build-a-react-app-from-scratch#data-fetching)에서 권장하는 방식이나 [TanStackQuery](https://tanstack.com/query/v3/)와 같은 라이브러리 사용을 추천합니다.
:::

**데이터 관리**:

![렌더링 및 데이터 관리](/img/assets/homepage-customization/rendering-data-management.png)

위 그림의 초록색 박스는 [API](#widget-api-reference)의 `widget.component`로 전달된 사용자의 React 컴포넌트가 렌더링되는 영역입니다. 이 영역 안에서는 원하는 내용을 자유롭게 렌더링할 수 있습니다. 그 외의 영역은 Strapi가 렌더링하여 전체 디자인 일관성을 보장합니다. API에서 전달한 `icon`, `title`, `link`(선택) 속성은 위젯에 표시됩니다.

#### 위젯 헬퍼 컴포넌트 레퍼런스

Strapi는 위젯 간 일관된 UX를 위해 여러 헬퍼 컴포넌트를 제공합니다:

| 컴포넌트              | 설명                                   | 사용 시점                  |
|----------------------|----------------------------------------|----------------------------|
| `Widget.Loading`     | 로딩 스피너와 메시지 표시              | 데이터 패칭 중             |
| `Widget.Error`       | 에러 상태 표시                         | 에러 발생 시               |
| `Widget.NoData`      | 데이터 없음 표시                       | 표시할 데이터가 없을 때     |
| `Widget.NoPermissions` | 권한 부족 안내 표시                  | 위젯 접근 권한 없을 때      |

이 컴포넌트들은 위젯 간 일관된 UI/UX를 제공합니다. 자식 없이 `
            </Td>
            
            </Td>
          </Tr>
        ))}
      </Tbody>
    </Table>
  );
};

```

아래는 모든 콘텐츠 타입의 개수를 세는 커스텀 컨트롤러 예시입니다:

```js title="src/plugins/content-metrics/server/src/controllers/metrics.js"
'use strict';
module.exports = ({ strapi }) => ({
  async getContentCounts(ctx) {
    try {
      // 모든 콘텐츠 타입 가져오기
      const contentTypes = Object.keys(strapi.contentTypes)
        .filter(uid => uid.startsWith('api::'))
        .reduce((acc, uid) => {
          const contentType = strapi.contentTypes[uid];
          acc[contentType.info.displayName || uid] = 0;
          return acc;
        }, {});
      
      // 각 콘텐츠 타입별 엔트리 개수 세기
      for (const [name, _] of Object.entries(contentTypes)) {
        const uid = Object.keys(strapi.contentTypes)
          .find(key => 
            strapi.contentTypes[key].info.displayName === name || key === name
          );
          
        if (uid) {
          // Document Service API의 count() 사용
          const count = await strapi.documents(uid).count();
          contentTypes[name] = count;
        }
      }
      
      ctx.body = contentTypes;
    } catch (err) {
      ctx.throw(500, err);
    }
  }
});
```

아래는 metrics 컨트롤러를 `/count` 경로로 연결하는 라우트 예시입니다:

```js title="src/plugins/content-metrics/server/src/routes/index.js"

  'content-api': {
    type: 'content-api',
    routes: [
      {
        method: 'GET',
        path: '/count',
        handler: 'metrics.getContentCounts',
        config: {
          policies: [],
        },
      },
    ],
  },
};
```

</TabItem>

</Tabs>



# 로케일 & 번역
Source: https://docs.strapi.io/cms/admin-panel-customization/locales-translations

# 로케일 & 번역

Strapi의 [관리자 패널](/cms/admin-panel-customization)은 항상 영어 번역을 기본으로 제공하지만, 추가 언어를 표시할 수 있습니다. 또한 인터페이스에 표시되는 모든 텍스트를 오버라이드할 수도 있습니다.
이 문서에서는 프로젝트 코드베이스에서 직접 로케일을 정의하고, Strapi 또는 플러그인 번역을 확장하는 방법을 안내합니다.

## 로케일 정의하기

관리자 패널에서 사용할 수 있는 로케일 목록을 업데이트하려면 `config.locales` 배열을 사용하세요:

</Tabs>

:::note 참고

- `en` 로케일은 빌드에서 제거할 수 없습니다. 이는 기본값이자, 번역이 없는 경우 fallback으로 사용됩니다.
- 사용 가능한 전체 로케일 목록은 

</Tabs>

플러그인 번역 키/값 쌍은 각 플러그인의 `/admin/src/translations/[언어명].json` 파일에 별도로 선언되어 있습니다. 이 키/값 쌍도 `config.translations` 키에서 플러그인 이름을 접두사로 붙여 확장할 수 있습니다(예: `[plugin name].[key]: 'value'`). 아래 예시를 참고하세요:

</Tabs>

추가 번역 파일이 필요하다면 `/src/admin/extensions/translations` 폴더에 파일을 추가하세요.



# 로고
Source: https://docs.strapi.io/cms/admin-panel-customization/logos

# 로고

Strapi의 [관리자 패널](/cms/admin-panel-customization)은 로그인 화면과 메인 네비게이션에 브랜드 로고를 표시합니다. 이 이미지를 교체하면 인터페이스를 브랜드에 맞게 맞출 수 있습니다. 본 문서에서는 관리자 패널 설정 파일을 통해 두 개의 로고 파일을 오버라이드하는 방법을 안내합니다. UI에서 직접 업로드하고 싶다면 [로고 커스터마이징](/cms/features/admin-panel#customizing-the-logo) 문서를 참고하세요.

Strapi 관리자 패널은 2개의 위치에 각각 다른 키로 로고를 표시합니다:

| UI 내 위치 | 설정에서 변경할 키 |
| ---------------------- | --------------------------- |
| 로그인 페이지 | `config.auth.logo` |
| 메인 네비게이션 | `config.menu.logo` |

:::note
관리자 패널에서 직접 업로드한 로고가 설정 파일에서 지정한 로고보다 우선 적용됩니다.
:::

### 관리자 패널 내 로고 위치

<!--TODO: update screenshot #2 -->

`config.auth.logo`로 지정한 로고는 로그인 화면에만 표시됩니다:

![Auth 로고 위치](/img/assets/development/config-auth-logo.png)

`config.menu.logo`로 지정한 로고는 관리자 패널 좌측 상단 메인 네비게이션에 표시됩니다:

![메뉴 로고 위치](/img/assets/development/config-menu-logo.png)

### 로고 변경 방법

로고 이미지를 `/src/admin/extensions` 폴더에 두고, `src/admin/app`에서 import한 뒤 아래 예시처럼 해당 키를 업데이트하세요:

</Tabs>

:::note
There is no size limit for image files set through the configuration files.
:::



# 테마 확장
Source: https://docs.strapi.io/cms/admin-panel-customization/theme-extension

# 테마 확장

Strapi의 [관리자 패널](/cms/admin-panel-customization)은 라이트/다크 모드를 지원하며, 두 모드 모두 커스텀 테마 설정을 통해 확장할 수 있습니다.

테마를 확장하려면 다음 중 하나를 사용하세요:

- 라이트 모드 확장: `config.theme.light` 키
- 다크 모드 확장: `config.theme.dark` 키

:::strapi Strapi 디자인 시스템
기본 는 다양한 테마 관련 키(그림자, 색상 등)를 정의하며, `config.theme.light` 및 `config.theme.dark` 키를 통해 업데이트할 수 있습니다. 은 완전히 커스터마이징 가능하며,  문서도 참고할 수 있습니다.
:::



# 리치 텍스트 에디터 커스터마이징
Source: https://docs.strapi.io/cms/admin-panel-customization/wysiwyg-editor

# 기본 리치 텍스트 에디터 변경하기

Strapi의 [관리자 패널](/cms/admin-panel-customization)에는 기본 리치 텍스트 에디터가 내장되어 있습니다. 기본 에디터를 변경하는 방법은 여러 가지가 있습니다:

- 에서 CKEditor 등 서드파티 플러그인을 설치할 수 있습니다.
- [커스텀 필드 문서](/cms/features/custom-fields)를 참고하여 직접 플러그인을 개발하고 완전히 커스텀한 WYSIWYG 필드를 등록할 수 있습니다.



# Strapi Client
Source: https://docs.strapi.io/cms/api/client

# Strapi Client

The Strapi Client library simplifies interactions with your Strapi back end, providing a way to fetch, create, update, and delete content. This guide walks you through setting up the Strapi Client, configuring authentication, and using its key features effectively.

## Getting Started
:::prerequisites
- A Strapi project has been created and is running. If you haven't set one up yet, follow the [Quick Start Guide](/cms/quick-start) to create one.
- You know the URL of the Content API of your Strapi instance (e.g., `http://localhost:1337/api`).
:::

### Installation

To use the Strapi Client in your project, install it as a dependency using your preferred package manager:

  </Tabs>

### Basic configuration

To start interacting with your Strapi back end, initialize the Strapi Client and set the base API URL:

```js

const client = strapi({ baseURL: 'http://localhost:1337/api' });
```

If you're using the Strapi Client in a browser environment, you can include it using a `<script>` tag:

```js title="./src/api/[apiName]/routes/[routerName].ts (e.g './src/api/restaurant/routes/restaurant.ts')"
<script src="https://cdn.jsdelivr.net/npm/@strapi/client"></script>

<script>
  const client = strapi.strapi({ baseURL: 'http://localhost:1337/api' });
</script>
```

### Authentication

The Strapi Client supports different authentication strategies to access protected resources in your Strapi back end.

If your Strapi instance uses API tokens, configure the Strapi Client as follows:

```js
const client = strapi({
  baseURL: 'http://localhost:1337/api',
  auth: 'your-api-token-here',
});
```

This allows your requests to include the necessary authentication credentials automatically.

## API Reference

The Strapi Client provides the following key properties and methods for interacting with your Strapi back end:

| Parameter | Description                                                                                  |
| ----------| -------------------------------------------------------------------------------------------- |
| `baseURL`  | The base API URL of your Strapi back end.        |
| `fetch()`    | A utility method for making generic API requests similar to the native fetch API. |
| `collection()`  | Manages collection-type resources (e.g., blog posts, products). |
| `single()`  | Manages single-type resources (e.g., homepage settings, global configurations). |

### General purpose fetch

The Strapi Client provides access to the underlying JavaScript `fetch` function to make direct API requests. The request is always relative to the base URL provided during client initialization:

```js
const result = await client.fetch('articles', { method: 'GET' });
```

### Working with collection types

Collection types in Strapi are entities with multiple entries (e.g., a blog with many posts). The Strapi Client provides a `collection()` method to interact with these resources, with the following methods available:

| Parameter | Description                                                                                  |
| ----------| -------------------------------------------------------------------------------------------- |
| `find(queryParams?)`  | Fetch multiple documents with optional filtering, sorting, or pagination.       |
| `findOne(documentID, queryParams?)`    | Retrieve a single document by its unique ID.        |
| `create(data, queryParams?)`  | Create a new document in the collection. |
| `update(documentID, data, queryParams?)`  | Update an existing document. |
| `delete(documentID, queryParams?)`  | Update an existing document. |

**Usage examples:**
```js
const articles = client.collection('articles');

// Fetch all english articles sorted by title
const allArticles = await articles.find({
  locale: 'en',
  sort: 'title',
});

// Fetch a single article
const singleArticle = await articles.findOne('article-document-id');

// Create a new article
const newArticle = await articles.create({ title: 'New Article', content: '...' });

// Update an existing article
const updatedArticle = await articles.update('article-document-id', { title: 'Updated Title' });

// Delete an article
await articles.delete('article-id');
```

### Working with single types

Single types in Strapi represent unique content entries that exist only once (e.g., the homepage settings or site-wide configurations). The Strapi Client provides a `single()` method to interact with these resources, with the following methods available:
| Parameter | Description                                                                                  |
| ----------| -------------------------------------------------------------------------------------------- |
| `find(queryParams?)`  | Fetch the document.        |
| `update(documentID, data, queryParams?)`  | Update the document. |
| `delete(queryParams?) `  | Remove the document. |

**Usage examples:**
```js
const homepage = client.single('homepage');

// Fetch the default homepage content
const defaultHomepage = await homepage.find();

// Fetch the Spanish version of the homepage
const spanishHomepage = await homepage.find({ locale: 'es' });

// Update the homepage draft content
const updatedHomepage = await homepage.update(
  { title: 'Updated Homepage Title' },
  { status: 'draft' }
);

// Delete the homepage content
await homepage.delete();
```

### Working with files 

The Strapi Client provides access to the [Media Library](/cms/features/media-library) via the `files` property. This allows you to retrieve and manage file metadata without directly interacting with the REST API.

The following methods are available for working with files:

| Method | Description |
|--------|-------------|
| `find(params?)` | Retrieves a list of file metadata based on optional query parameters |
| `findOne(fileId)` | Retrieves the metadata for a single file by its ID |
| `update(fileId, fileInfo)` | Updates metadata for an existing file |
| `delete(fileId)` | Deletes a file by its ID |

**Usage examples:**

```js
// Initialize the client
const client = strapi({
  baseURL: 'http://localhost:1337/api',
  auth: 'your-api-token',
});

// Find all file metadata
const allFiles = await client.files.find();
console.log(allFiles);

// Find file metadata with filtering and sorting
const imageFiles = await client.files.find({
  filters: {
    mime: { $contains: 'image' }, // Only get image files
    name: { $contains: 'avatar' }, // Only get files with 'avatar' in the name
  },
  sort: ['name:asc'], // Sort by name in ascending order
});

// Find file metadata by ID
const file = await client.files.findOne(1);
console.log(file.name); // The file name
console.log(file.url); // The file URL
console.log(file.mime); // The file MIME type

// Update file metadata
const updatedFile = await client.files.update(1, {
  name: 'New file name',
  alternativeText: 'Descriptive alt text for accessibility',
  caption: 'A caption for the file',
});

// Delete a file by ID
const deletedFile = await client.files.delete(1);
console.log('File deleted successfully');
console.log('Deleted file ID:', deletedFile.id);
console.log('Deleted file name:', deletedFile.name);
```

:::strapi Additional information
More details about the Strapi Strapi Client might be found in the .
:::



# Content API
Source: https://docs.strapi.io/cms/api/content-api

# Strapi APIs to access your content

Once you've created and configured a Strapi project, created a content structure with the [Content-Type Builder](/cms/features/content-type-builder) and started adding data through the [Content Manager](/cms/features/content-manager), you likely would like to access your content.

From a front-end application, your content can be accessed through Strapi's Content API, which is exposed:
- by default through the [REST API](/cms/api/rest)
- and also through the [GraphQL API](/cms/api/graphql) if you installed the Strapi built-in [GraphQL plugin](/cms/plugins/graphql).

You can also use the [Strapi Client](/cms/api/client) library to interact with the REST API.

REST and GraphQL APIs represent the top-level layers of the Content API exposed to external applications. Strapi also provides 2 lower-level APIs:

- The [Document Service API](/cms/api/document-service) is the recommended API to interact with your application's database within the [backend server](/cms/customization) or through [plugins](/cms/plugins-development/developing-plugins). The Document Service is the layer that handles **documents**



# Documents
Source: https://docs.strapi.io/cms/api/document

<div className="document-concept-page custom-mermaid-layout">

A **document** in Strapi 5 is an API-only concept. A document represents all the different variations of content for a given entry of a content-type.

A single type contains a unique document, and a collection type can contain several documents.

When you use the admin panel, the concept of a document is never mentioned and not necessary for the end user. Users create and edit **entries** in the [Content Manager](/cms/features/content-manager). For instance, as a user, you either list the entries for a given locale, or edit the draft version of a specific entry in a given locale.

However, at the API level, the value of the fields of an entry can actually have:

- different content for the English and the French locale,
- and even different content for the draft and published version in each locale.

The bucket that includes the content of all the draft and published versions for all the locales is a document.

Manipulating documents with the [Document Service API](/cms/api/document-service) will help you create, retrieve, update, and delete documents or a specific subset of the data they contain.

The following diagrams represent all the possible variations of content depending on which features, such as [Internationalization (i18n)](/cms/features/internationalization) and [Draft & Publish](/cms/features/draft-and-publish), are enabled for a content-type:

</Tabs>

- If the Internationalization (i18n) feature is enabled on the content-type, a document can have multiple **document locales**.
- If the Draft & Publish feature is enabled on the content-type, a document can have a **published** and a **draft** version.

:::strapi APIs to query documents data
To interact with documents or the data they represent:

  - From the back-end server (for instance, from controllers, services, and the back-end part of plugins), use the [Document Service API](/cms/api/document-service).
  - From the front-end part of your application, query your data using the [REST API](/cms/api/rest) or the [GraphQL API](/cms/api/graphql).

For additional information about the APIs, please refer to the [Content API introduction](/cms/api/content-api).
:::

:::info Default version in returned results
An important difference between the back-end and front-end APIs is about the default version returned when no parameter is passed:
- The Document Service API returns the draft version by default,
- while REST and GraphQL APIs return the published version by default.
:::

</div>



# Document Service API
Source: https://docs.strapi.io/cms/api/document-service

# Document Service API

The Document Service API is built on top of the **Query Engine API**  and used to perform CRUD ([create](#create), [retrieve](#findone), [update](#update), and [delete](#delete)) operations on **documents** 

</ApiCall>

## `findFirst()`

Find the first document matching the parameters.

Syntax:  `findFirst(parameters: Params) => Document`

### Parameters

| Parameter | Description | Default | Type |
|-----------|-------------|---------|------|
| [`locale`](/cms/api/document-service/locale#find-first) |  Locale of the documents to find. | Default locale | String or `undefined` |
| [`status`](/cms/api/document-service/status#find-first) | _If [Draft & Publish](/cms/features/draft-and-publish) is enabled for the content-type_:<br/>Publication status, can be: <ul><li>`'published'` to find only published documents</li><li>`'draft'` to find only draft documents</li></ul> | `'draft'` | `'published'` or `'draft'` |
| [`filters`](/cms/api/document-service/filters) | [Filters](/cms/api/document-service/filters) to use | `null` | Object |
| [`fields`](/cms/api/document-service/fields#findfirst)   | [Select fields](/cms/api/document-service/fields#findfirst) to return   | All fields<br/>(except those not populate by default)  | Object |
| [`populate`](/cms/api/document-service/populate) | [Populate](/cms/api/document-service/populate) results with additional fields. | `null` | Object |

### Examples

<br />

#### Generic example

By default, `findFirst()` returns the draft version, in the default locale, of the first document for the passed unique identifier (collection type id or single type id):

</ApiCall>

#### Find the first document matching parameters

Pass some parameters to `findFirst()` to return the first document matching them.

If no `locale` or `status` parameters are passed, results return the draft version for the default locale:

</ApiCall>

## `findMany()`

Find documents matching the parameters.

Syntax: `findMany(parameters: Params) => Document[]`

### Parameters

| Parameter | Description | Default | Type |
|-----------|-------------|---------|------|
| [`locale`](/cms/api/document-service/locale#find-many) |  Locale of the documents to find. | Default locale | String or `undefined` |
| [`status`](/cms/api/document-service/status#find-many) | _If [Draft & Publish](/cms/features/draft-and-publish) is enabled for the content-type_:<br/>Publication status, can be: <ul><li>`'published'` to find only published documents</li><li>`'draft'` to find only draft documents</li></ul> | `'draft'` | `'published'` or `'draft'` |
| [`filters`](/cms/api/document-service/filters) | [Filters](/cms/api/document-service/filters) to use | `null` | Object |
| [`fields`](/cms/api/document-service/fields#findmany)   | [Select fields](/cms/api/document-service/fields#findmany) to return   | All fields<br/>(except those not populate by default)  | Object |
| [`populate`](/cms/api/document-service/populate) | [Populate](/cms/api/document-service/populate) results with additional fields. | `null` | Object |
| [`pagination`](/cms/api/document-service/sort-pagination#pagination) | [Paginate](/cms/api/document-service/sort-pagination#pagination) results |
| [`sort`](/cms/api/document-service/sort-pagination#sort) | [Sort](/cms/api/document-service/sort-pagination#sort) results | | | 

### Examples

<br />

#### Generic example

When no parameter is passed, `findMany()` returns the draft version in the default locale for each document:

</ApiCall>

#### Find documents matching parameters

Available filters are detailed in the [filters](/cms/api/document-service/filters) page of the Document Service API reference.

If no `locale` or `status` parameters are passed, results return the draft version for the default locale:

</ApiCall>

<!-- TODO: To be completed post v5 GA -->
<!-- #### Find ‘fr’ version of all documents with fallback on default (en)

```js
await documents('api:restaurant.restaurant').findMany({ locale: 'fr', fallbackLocales: ['en'] } );
``` -->

<!-- TODO: To be completed post v5 GA -->
<!-- #### Find sibling locales for one or many documents

```js
await documents('api:restaurant.restaurant').findMany({ locale: 'fr', populateLocales: ['en', 'it'] } );
// Option of response forma for this case 
{
  data: {
		title: { "Wonderful" }
  },
  localizations: [
    { enLocaleData },
    { itLocaleData }
  ]
}

await documents('api:restaurant.restaurant').findMany({ locale: ['en', 'it'] } );
// Option of response format for this case 
{
  data: {
		title: {
			"en": "Wonderful",
			"it": "Bellissimo"
		}
  },
}
```

</Request> -->

## `create()`

Creates a drafted document and returns it.

Pass fields for the content to create in a `data` object.

Syntax: `create(parameters: Params) => Document`

### Parameters

| Parameter | Description | Default | Type |
|-----------|-------------|---------|------|
| [`locale`](/cms/api/document-service/locale#create) | Locale of the documents to create. | Default locale | String or `undefined` |
| [`fields`](/cms/api/document-service/fields#create)   | [Select fields](/cms/api/document-service/fields#create) to return   | All fields<br/>(except those not populated by default)  | Object |
| [`status`](/cms/api/document-service/status#create) | _If [Draft & Publish](/cms/features/draft-and-publish) is enabled for the content-type_:<br/>Can be set to `'published'` to automatically publish the draft version of a document while creating it  | -| `'published'` |
| [`populate`](/cms/api/document-service/populate) | [Populate](/cms/api/document-service/populate) results with additional fields. | `null` | Object |

### Example

If no `locale` parameter is passed, `create()` creates the draft version of the document for the default locale:

</ApiCall>

:::tip
If the [Draft & Publish](/cms/features/draft-and-publish) feature is enabled on the content-type, you can automatically publish a document while creating it (see [`status` documentation](/cms/api/document-service/status#create)).
:::

## `update()`

Updates document versions and returns them.

Syntax: `update(parameters: Params) => Promise

</ApiCall>

<!-- ! not working -->
<!-- #### Update many document locales

```js
// Updates the default locale by default
await documents('api:restaurant.restaurant').update(documentId, {locale: ['es', 'en'], data: {name: "updatedName" }}
``` -->

## `delete()`

Deletes one document, or a specific locale of it.

Syntax: `delete(parameters: Params): Promise<{ documentId: ID, entries: Number }>`

### Parameters

| Parameter | Description | Default | Type |
|-----------|-------------|---------|------|
| `documentId`| Document id | | `ID`|
| [`locale`](/cms/api/document-service/locale#delete) | Locale version of the document to delete. | `null`<br/>(deletes only the default locale) | String, `'*'`, or `null` |
| [`filters`](/cms/api/document-service/filters) | [Filters](/cms/api/document-service/filters) to use | `null` | Object |
| [`fields`](/cms/api/document-service/fields#delete)   | [Select fields](/cms/api/document-service/fields#delete) to return   | All fields<br/>(except those not populate by default)  | Object |
| [`populate`](/cms/api/document-service/populate) | [Populate](/cms/api/document-service/populate) results with additional fields. | `null` | Object |

### Example

If no `locale` parameter is passed, `delete()` only deletes the default locale version of a document. This deletes both the draft and published versions:

<!-- ! not working -->
<!-- #### Delete a document with filters

To delete documents matching parameters, pass these parameters to `delete()`.

If no `locale` parameter is passed, it will delete only the default locale version:

 -->

## `publish()`

Publishes one or multiple locales of a document.

This method is only available if [Draft & Publish](/cms/features/draft-and-publish) is enabled on the content-type.

Syntax: `publish(parameters: Params): Promise<{ documentId: ID, entries: Number }>`

### Parameters

| Parameter | Description | Default | Type |
|-----------|-------------|---------|------|
| `documentId`| Document id | | `ID`|
| [`locale`](/cms/api/document-service/locale#publish) | Locale of the documents to publish. | Only the default locale | String, `'*'`, or `null` |
| [`filters`](/cms/api/document-service/filters) | [Filters](/cms/api/document-service/filters) to use | `null` | Object |
| [`fields`](/cms/api/document-service/fields#publish)   | [Select fields](/cms/api/document-service/fields#publish) to return   | All fields<br/>(except those not populate by default)  | Object |
| [`populate`](/cms/api/document-service/populate) | [Populate](/cms/api/document-service/populate) results with additional fields. | `null` | Object |

### Example

If no `locale` parameter is passed, `publish()` only publishes the default locale version of the document:

</ApiCall>

<!-- ! not working -->
<!-- #### Publish document locales with filters

```js
// Only publish locales with title is "Ready to publish"
await strapi.documents('api::restaurant.restaurant').publish(
  { filters: { title: 'Ready to publish' }}
);
``` -->

## `unpublish()`

Unpublishes one or all locale versions of a document, and returns how many locale versions were unpublished.

This method is only available if [Draft & Publish](/cms/features/draft-and-publish) is enabled on the content-type.

Syntax: `unpublish(parameters: Params): Promise<{ documentId: ID, entries: Number }>`

### Parameters

| Parameter | Description | Default | Type |
|-----------|-------------|---------|------|
| `documentId`| Document id | | `ID`|
| [`locale`](/cms/api/document-service/locale#unpublish) | Locale of the documents to unpublish. | Only the default locale | String, `'*'`, or `null` |
| [`filters`](/cms/api/document-service/filters) | [Filters](/cms/api/document-service/filters) to use | `null` | Object |
| [`fields`](/cms/api/document-service/fields#unpublish)   | [Select fields](/cms/api/document-service/fields#unpublish) to return   | All fields<br/>(except those not populate by default)  | Object |
| [`populate`](/cms/api/document-service/populate) | [Populate](/cms/api/document-service/populate) results with additional fields. | `null` | Object |

### Example

If no `locale` parameter is passed, `unpublish()` only unpublishes the default locale version of the document:

</ApiCall>

## `discardDraft()`

Discards draft data and overrides it with the published version.

This method is only available if [Draft & Publish](/cms/features/draft-and-publish) is enabled on the content-type.

Syntax: `discardDraft(parameters: Params): Promise<{ documentId: ID, entries: Number }>`

### Parameters

| Parameter | Description | Default | Type |
|-----------|-------------|---------|------|
| `documentId`| Document id | | `ID`|
| [`locale`](/cms/api/document-service/locale#discard-draft) | Locale of the documents to discard. | Only the default locale. | String, `'*'`, or `null` |
| [`filters`](/cms/api/document-service/filters) | [Filters](/cms/api/document-service/filters) to use | `null` | Object |
| [`fields`](/cms/api/document-service/fields#discarddraft)   | [Select fields](/cms/api/document-service/fields#discarddraft) to return   | All fields<br/>(except those not populate by default)  | Object |
| [`populate`](/cms/api/document-service/populate) | [Populate](/cms/api/document-service/populate) results with additional fields. | `null` | Object |

### Example

If no `locale` parameter is passed, `discardDraft()` discards draft data and overrides it with the published version only for the default locale:

</ApiCall>

## `count()`

Count the number of documents that match the provided parameters.

Syntax: `count(parameters: Params) => number`

### Parameters

| Parameter | Description | Default | Type |
|-----------|-------------|---------|------|
| [`locale`](/cms/api/document-service/locale#count) | Locale of the documents to count | Default locale | String or `null` |
| [`status`](/cms/api/document-service/status#count) | _If [Draft & Publish](/cms/features/draft-and-publish) is enabled for the content-type_:<br/>Publication status, can be: <ul><li>`'published'` to find only published documents </li><li>`'draft'` to find draft documents (will return all documents)</li></ul> | `'draft'` | `'published'` or `'draft'` |
| [`filters`](/cms/api/document-service/filters) | [Filters](/cms/api/document-service/filters) to use | `null` | Object |

:::note
Since published documents necessarily also have a draft counterpart, a published document is still counted as having a draft version.

This means that counting with the `status: 'draft'` parameter still returns the total number of documents matching other parameters, even if some documents have already been published and are not displayed as "draft" or "modified" in the Content Manager anymore. There currently is no way to prevent already published documents from being counted.
:::

### Examples

<br />

#### Generic example

If no parameter is passed, the `count()` method the total number of documents for the default locale:

</ApiCall>

#### Count published documents

To count only published documents, pass `status: 'published'` along with other parameters to the `count()` method.

If no `locale` parameter is passed, documents are counted for the default locale.

#### Count documents with filters

Any [filters](/cms/api/document-service/filters) can be passed to the `count()` method.

If no `locale` and no `status` parameter is passed, draft documents (which is the total of available documents for the locale since even published documents are counted as having a draft version) are counted only for the default locale:

```js
/**
 * Count number of draft documents (default if status is omitted) 
 * in English (default locale) 
 * whose name starts with 'Pizzeria'
 */
strapi.documents('api::restaurant.restaurant').count({ filters: { name: { $startsWith: "Pizzeria" }}})`
```



# Using fields with the Document Service API
Source: https://docs.strapi.io/cms/api/document-service/fields

# Document Service API: Selecting fields

By default the [Document Service API](/cms/api/document-service) returns all the fields of a document but does not populate any fields. This page describes how to use the `fields` parameter to return only specific fields with the query results.

:::tip
You can also use the `populate` parameter to populate relations, media fields, components, or dynamic zones (see the [`populate` parameter](/cms/api/document-service/populate) documentation).
:::

</ApiCall>

## Select fields with `findFirst()` queries {#findfirst}

To select fields to return while [finding the first document](/cms/api/document-service#findfirst) matching the parameters with the Document Service API:

</ApiCall>

## Select fields with `findMany()` queries {#findmany}

To select fields to return while [finding documents](/cms/api/document-service#findmany) with the Document Service API:

</ApiCall>

## Select fields with `create()` queries {#create}

To select fields to return while [creating documents](/cms/api/document-service#create) with the Document Service API:

</ApiCall>

## Select fields with `update()` queries {#update}

To select fields to return while [updating documents](/cms/api/document-service#update) with the Document Service API:

</ApiCall>

## Select fields with `delete()` queries {#delete}

To select fields to return while [deleting documents](/cms/api/document-service#delete) with the Document Service API:

</ApiCall>

## Select fields with `publish()` queries {#publish}

To select fields to return while [publishing documents](/cms/api/document-service#publish) with the Document Service API:

</ApiCall>

## Select fields with `unpublish()` queries {#unpublish}

To select fields to return while [unpublishing documents](/cms/api/document-service#unpublish) with the Document Service API:

</ApiCall>

## Select fields with `discardDraft()` queries {#discarddraft}

To select fields to return while [discarding draft versions of documents](/cms/api/document-service#discarddraft) with the Document Service API:

</ApiCall>



# Using filters with the Document Service API
Source: https://docs.strapi.io/cms/api/document-service/filters

# Document Service API: Filters

The [Document Service API](/cms/api/document-service) offers the ability to filter results.

The following operators are available:

| Operator                         | Description                              |
| -------------------------------- | ---------------------------------------- |
| [`$eq`](#eq)                     | Equal                                    |
| [`$eqi`](#eqi)                   | Equal (case-insensitive)                 |
| [`$ne`](#ne)                     | Not equal                                |
| [`$nei`](#nei)                   | Not equal (case-insensitive)             |
| [`$lt`](#lt)                     | Less than                                |
| [`$lte`](#lte)                   | Less than or equal to                    |
| [`$gt`](#gt)                     | Greater than                             |
| [`$gte`](#gte)                   | Greater than or equal to                 |
| [`$in`](#in)                     | Included in an array                     |
| [`$notIn`](#notin)               | Not included in an array                 |
| [`$contains`](#contains)         | Contains                                 |
| [`$notContains`](#notcontains)   | Does not contain                         |
| [`$containsi`](#containsi)       | Contains (case-insensitive)              |
| [`$notContainsi`](#notcontainsi) | Does not contain (case-insensitive)      |
| [`$null`](#null)                 | Is null                                  |
| [`$notNull`](#notnull)           | Is not null                              |
| [`$between`](#between)           | Is between                               |
| [`$startsWith`](#startswith)     | Starts with                              |
| [`$startsWithi`](#startswithi)   | Starts with (case-insensitive)           |
| [`$endsWith`](#endswith)         | Ends with                                |
| [`$endsWithi`](#endswithi)       | Ends with (case-insensitive)             |
| [`$or`](#or)                     | Joins the filters in an "or" expression  |
| [`$and`](#and)                   | Joins the filters in an "and" expression |
| [`$not`](#not)                   | Joins the filters in an "not" expression |

## Attribute operators

<br/>

### `$not`

Negates the nested condition(s).

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $not: {
        $contains: 'Hello World',
      },
    },
  },
});
```

### `$eq`

Attribute equals input value.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $eq: 'Hello World',
    },
  },
});
```

`$eq` can be omitted:

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: 'Hello World',
  },
});
```

### `$eqi`

Attribute equals input value (case-insensitive).

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $eqi: 'HELLO World',
    },
  },
});
```

### `$ne`

Attribute does not equal input value.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $ne: 'ABCD',
    },
  },
});
```

### `$nei`

Attribute does not equal input value (case-insensitive).

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $nei: 'abcd',
    },
  },
});
```

### `$in`

Attribute is contained in the input list.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $in: ['Hello', 'Hola', 'Bonjour'],
    },
  },
});
```

`$in` can be omitted when passing an array of values:

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: ['Hello', 'Hola', 'Bonjour'],
  },
});
```

### `$notIn`

Attribute is not contained in the input list.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $notIn: ['Hello', 'Hola', 'Bonjour'],
    },
  },
});
```

### `$lt`

Attribute is less than the input value.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    rating: {
      $lt: 10,
    },
  },
});
```

### `$lte`

Attribute is less than or equal to the input value.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    rating: {
      $lte: 10,
    },
  },
});
```

### `$gt`

Attribute is greater than the input value.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    rating: {
      $gt: 5,
    },
  },
});
```

### `$gte`

Attribute is greater than or equal to the input value.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    rating: {
      $gte: 5,
    },
  },
});
```

### `$between`

Attribute is between the 2 input values, boundaries included (e.g., `$between[1, 3]` will also return `1` and `3`).

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    rating: {
      $between: [1, 20],
    },
  },
});
```

### `$contains`

Attribute contains the input value (case-sensitive).

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $contains: 'Hello',
    },
  },
});
```

### `$notContains`

Attribute does not contain the input value (case-sensitive).

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $notContains: 'Hello',
    },
  },
});
```

### `$containsi`

Attribute contains the input value. `$containsi` is not case-sensitive, while [$contains](#contains) is.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $containsi: 'hello',
    },
  },
});
```

### `$notContainsi`

Attribute does not contain the input value. `$notContainsi` is not case-sensitive, while [$notContains](#notcontains) is.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $notContainsi: 'hello',
    },
  },
});
```

### `$startsWith`

Attribute starts with input value (case-sensitive).

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $startsWith: 'ABCD',
    },
  },
});
```

### `$startsWithi`

Attribute starts with input value (case-insensitive).

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $startsWithi: 'ABCD', // will return the same as filtering with 'abcd'
    },
  },
});
```

### `$endsWith`

Attribute ends with input value (case-sensitive).

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $endsWith: 'ABCD',
    },
  },
});
```

### `$endsWithi`

Attribute ends with input value (case-insensitive).

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $endsWith: 'ABCD', // will return the same as filtering with 'abcd'
    },
    },
  },
});
```

### `$null`

Attribute is `null`.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $null: true,
    },
  },
});
```

### `$notNull`

Attribute is not `null`.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $notNull: true,
    },
  },
});
```

## Logical operators

### `$and`

All nested conditions must be `true`.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    $and: [
      {
        title: 'Hello World',
      },
      {
        createdAt: { $gt: '2021-11-17T14:28:25.843Z' },
      },
    ],
  },
});
```

`$and` will be used implicitly when passing an object with nested conditions:

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: 'Hello World',
    createdAt: { $gt: '2021-11-17T14:28:25.843Z' },
  },
});
```

### `$or`

One or many nested conditions must be `true`.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    $or: [
      {
        title: 'Hello World',
      },
      {
        createdAt: { $gt: '2021-11-17T14:28:25.843Z' },
      },
    ],
  },
});
```

### `$not`

Negates the nested conditions.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    $not: {
      title: 'Hello World',
    },
  },
});
```

:::note
`$not` can be used as:

- a logical operator (e.g. in `filters: { $not: { // conditions… }}`)
- [an attribute operator](#not) (e.g. in `filters: { attribute-name: $not: { … } }`).
:::

:::tip
`$and`, `$or` and `$not` operators are nestable inside of another `$and`, `$or` or `$not` operator.
:::



# Using the locale parameter with the Document Service API
Source: https://docs.strapi.io/cms/api/document-service/locale

# Document Service API: Using the `locale` parameter

By default the [Document Service API](/cms/api/document-service) returns the default locale version of documents (which is 'en', i.e. the English version, unless another default locale has been set for the application, see [Internationalization (i18n) feature](/cms/features/internationalization)). This page describes how to use the `locale` parameter to get or manipulate data only for specific locales.

## Get a locale version with `findOne()` {#find-one}

If a `locale` is passed, the [`findOne()` method](/cms/api/document-service#findone) of the Document Service API returns the version of the document for this locale:

</ApiCall>

If no `status` parameter is passed, the `draft` version is returned by default.

## Get a locale version with `findFirst()` {#find-first}

To return a specific locale while [finding the first document](/cms/api/document-service#findfirst) matching the parameters with the Document Service API:

</ApiCall>

If no `status` parameter is passed, the `draft` version is returned by default.

## Get locale versions with `findMany()` {#find-many}

When a `locale` is passed to the [`findMany()` method](/cms/api/document-service#findmany) of the Document Service API, the response will return all documents that have this locale available.

If no `status` parameter is passed, the `draft` versions are returned by default.

</ApiCall>

<details>
<summary>Explanation:</summary>

Given the following 4 documents that have various locales:

- Document A:
  - en
  - `fr`
  - it
- Document B:
  - en
  - it
- Document C:
  - `fr`
- Document D:
  - `fr`
  - it

`findMany({ locale: 'fr' })` would only return the draft version of the documents that have a `‘fr’` locale version, that is documents A, C, and D.

</details>

## `create()` a document for a locale {#create}

To create a document for specific locale, pass the `locale` as a parameter to the [`create` method](/cms/api/document-service#create) of the Document Service API:

</ApiCall>

## `update()` a locale version {#update}

To update only a specific locale version of a document, pass the `locale` parameter to the [`update()` method](/cms/api/document-service#update) of the Document Service API:

</ApiCall>

## `delete()` locale versions {#delete}

Use the `locale` parameter with the [`delete()` method](/cms/api/document-service#delete) of the Document Service API to delete only some locales. Unless a specific `status` parameter is passed, this deletes both the draft and published versions.

### Delete a locale version

To delete a specific locale version of a document:

### Delete all locale versions

The `*` wildcard is supported by the `locale` parameter and can be used to delete all locale versions of a document:

</ApiCall>

## `publish()` locale versions {#publish}

To publish only specific locale versions of a document with the [`publish()` method](/cms/api/document-service#publish) of the Document Service API, pass `locale` as a parameter:

### Publish a locale version

To publish a specific locale version of a document:

</ApiCall>

### Publish all locale versions

The `*` wildcard is supported by the `locale` parameter to publish all locale versions of a document:

</ApiCall>

## `unpublish()` locale versions {#unpublish}

To publish only specific locale versions of a document with the [`unpublish()` method](/cms/api/document-service#unpublish) of the Document Service API, pass `locale` as a parameter:

### Unpublish a locale version

To unpublish a specific locale version of a document, pass the `locale` as a parameter to `unpublish()`:

</ApiCall>

### Unpublish all locale versions

The `*` wildcard is supported by the `locale` parameter, to unpublish all locale versions of a document:

</ApiCall>

</ApiCall>

## `discardDraft()` for locale versions {#discard-draft}

To discard draft data only for some locales versions of a document with the [`discardDraft()` method](/cms/api/document-service#discarddraft) of the Document Service API, pass `locale` as a parameter:

### Discard draft for a locale version

To discard draft data for a specific locale version of a document and override it with data from the published version for this locale, pass the `locale` as a parameter to `discardDraft()`:

</ApiCall>

### Discard drafts for all locale versions

The `*` wildcard is supported by the `locale` parameter, to discard draft data for all locale versions of a document and replace them with the data from the published versions:

</ApiCall>

## `count()` documents for a locale {#count}

To count documents for a specific locale, pass the `locale` along with other parameters to the [`count()` method](/cms/api/document-service#count) of the Document Service API.

If no `status` parameter is passed, draft documents are counted (which is the total of available documents for the locale since even published documents are counted as having a draft version):

```js
// Count number of published documents in French
strapi.documents('api::restaurant.restaurant').count({ locale: 'fr' });
```



# Extending the Document Service behavior
Source: https://docs.strapi.io/cms/api/document-service/middlewares

# Document Service API: Middlewares

The [Document Service API](/cms/api/document-service) offers the ability to extend its behavior thanks to middlewares.

Document Service middlewares allow you to perform actions before and/or after a method runs.

<figure style={{width: '100%', margin: '0'}}>
  <img src="/img/assets/backend-customization/diagram-controllers-services.png" alt="Simplified Strapi backend diagram with controllers highlighted" />
  <em><figcaption style={{fontSize: '12px'}}>The diagram represents a simplified version of how a request travels through the Strapi back end, with the Document Service highlighted. The backend customization introduction page includes a complete, <a href="/cms/backend-customization#interactive-diagram">interactive diagram</a>.</figcaption></em>
</figure>

## Registering a middleware

Syntax: `strapi.documents.use(middleware)`

### Parameters

A middleware is a function that receives a context and a next function.

Syntax: `(context, next) => ReturnType<typeof next>`

| Parameter | Description                           | Type       |
|-----------|---------------------------------------|------------|
| `context` | Middleware context                    | `Context`  |
| `next`    | Call the next middleware in the stack | `function` |

#### `context`

| Parameter     | Description                                                                          | Type          |
|---------------|--------------------------------------------------------------------------------------|---------------|
| `action`      | The method that is running ([see available methods](/cms/api/document-service)) | `string`      |
| `params`      | The method params ([see available methods](/cms/api/document-service))          | `Object`      |
| `uid`         | Content type unique identifier                                                       | `string`      |
| `contentType` | Content type                                                                         | `ContentType` |

<details>
<summary>Examples:</summary>

The following examples show what `context` might include depending on the method called:

</Tabs>
</details>

#### `next`

`next` is a function without parameters that calls the next middleware in the stack and return its response.

**Example**

```js
strapi.documents.use((context, next) => {
  return next();
});
```

### Where to register

Generaly speaking you should register your middlewares during the Strapi registration phase.

#### Users

The middleware must be registered in the general `register()` lifecycle method:

```js title="/src/index.js|ts"
module.exports = {
  register({ strapi }) {
    strapi.documents.use((context, next) => {
      // your logic
      return next();
    });
  },

  // bootstrap({ strapi }) {},
  // destroy({ strapi }) {},
};
```

#### Plugin developers

The middleware must be registered in the plugin's `register()` lifecycle method:

```js title="/(plugin-root-folder)/strapi-server.js|ts"
module.exports = {
  register({ strapi }) {
    strapi.documents.use((context, next) => {
      // your logic
      return next();
    });
  },

  // bootstrap({ strapi }) {},
  // destroy({ strapi }) {},
};
```

## Implementing a middleware

When implementing a middleware, always return the response from `next()`.
Failing to do this will break the Strapi application.

### Examples

```js
const applyTo = ['api::article.article'];

strapi.documents.use((context, next) => {
  // Only run for certain content types
  if (!applyTo.includes(context.uid)) {
    return next();
  }

  // Only run for certain actions
  if (['create', 'update'].includes(context.action)) {
    context.params.data.fullName = `${context.params.data.firstName} ${context.params.data.lastName}`;
  }

  const result = await next();

  // do something with the result before returning it
  return result
});
```

<br/>

:::strapi Lifecycle hooks
The Document Service API triggers various database lifecycle hooks based on which method is called. For a complete reference, see [Document Service API: Lifecycle hooks](/cms/migration/v4-to-v5/breaking-changes/lifecycle-hooks-document-service#table).
:::



# Using Populate with the Document Service API
Source: https://docs.strapi.io/cms/api/document-service/populate

# Document Service API: Populating fields

By default the [Document Service API](/cms/api/document-service) does not populate any relations, media fields, components, or dynamic zones. This page describes how to use the `populate` parameter to populate specific fields.

:::tip
You can also use the `select` parameter to return only specific fields with the query results (see the [`select` parameter](/cms/api/document-service/fields) documentation).
:::

:::caution
If the Users & Permissions plugin is installed, the `find` permission must be enabled for the content-types that are being populated. If a role doesn't have access to a content-type it will not be populated.
:::

<!-- TODO: add link to populate guides (even if REST API, the same logic still applies) -->

## Relations and media fields

Queries can accept a `populate` parameter to explicitly define which fields to populate, with the following syntax option examples.

### Populate 1 level for all relations

To populate one-level deep for all relations, use the `*` wildcard in combination with the `populate` parameter:

</ApiCall>

### Populate 1 level for specific relations

To populate specific relations one-level deep, pass the relation names in a `populate` array:

</ApiCall>

### Populate several levels deep for specific relations

To populate specific relations several levels deep, use the object format with `populate`:

</ApiCall>

## Components & Dynamic Zones

Components are populated the same way as relations:

</ApiCall>

Dynamic zones are highly dynamic content structures by essence. To populate a dynamic zone, you must define per-component populate queries using the `on` property.

</ApiCall>

## Populating with `create()`

To populate while creating documents:

</ApiCall>

## Populating with `update()`

To populate while updating documents:

</ApiCall>

## Populating with `publish()`

To populate while publishing documents (same behavior with `unpublish()` and `discardDraft()`):

</ApiCall>



# Using Sort & Pagination with the Document Service API
Source: https://docs.strapi.io/cms/api/document-service/sort-pagination

# Document Service API: Sorting and paginating results

The [Document Service API](/cms/api/document-service) offers the ability to sort and paginate query results.

## Sort

To sort results returned by the Document Service API, include the `sort` parameter with queries.

### Sort on a single field

To sort results based on a single field:

</ApiCall>

### Sort on multiple fields

To sort on multiple fields, pass them all in an array:

</ApiCall>

## Pagination

To paginate results, pass the `limit` and `start` parameters:

</ApiCall>



# Using Draft & Publish with the Document Service API
Source: https://docs.strapi.io/cms/api/document-service/status

# Document Service API: Usage with Draft & Publish

By default the [Document Service API](/cms/api/document-service) returns the draft version of a document when the [Draft & Publish](/cms/features/draft-and-publish) feature is enabled. This page describes how to use the `status` parameter to:

- return the published version of a document,
- count documents depending on their status, 
- and directly publish a document while creating it or updating it.

:::note
Passing `{ status: 'draft' }` to a Document Service API query returns the same results as not passing any `status` parameter.
:::

## Get the published version with `findOne()` {#find-one}

`findOne()` queries return the draft version of a document by default.

To return the published version while [finding a specific document](/cms/api/document-service#findone) with the Document Service API, pass `status: 'published'`:

</ApiCall>

## Get the published version with `findFirst()` {#find-first}

`findFirst()` queries return the draft version of a document by default.

To return the published version while [finding the first document](/cms/api/document-service#findfirst) with the Document Service API, pass `status: 'published'`:

</ApiCall>

## Get the published version with `findMany()` {#find-many}

`findMany()` queries return the draft version of documents by default.

To return the published version while [finding documents](/cms/api/document-service#findmany) with the Document Service API, pass `status: 'published'`:

</ApiCall>

## `count()` only draft or published versions {#count}

To take into account only draft or published versions of documents while [counting documents](/cms/api/document-service#count) with the Document Service API, pass the corresponding `status` parameter:

```js
// Count draft documents (also actually includes published documents)
const draftsCount = await strapi.documents("api::restaurant.restaurant").count({
  status: 'draft'
});
```

```js
// Count only published documents
const publishedCount = await strapi.documents("api::restaurant.restaurant").count({
  status: 'published'
});
```

:::note
Since published documents necessarily also have a draft counterpart, a published document is still counted as having a draft version.

This means that counting with the `status: 'draft'` parameter still returns the total number of documents matching other parameters, even if some documents have already been published and are not displayed as "draft" or "modified" in the Content Manager anymore. There currently is no way to prevent already published documents from being counted.
:::

## Create a draft and publish it {#create}

To automatically publish a document while creating it, add `status: 'published'` to parameters passed to `create()`:

</ApiCall>

## Update a draft and publish it {#update}

To automatically publish a document while updating it, add `status: 'published'` to parameters passed to `update()`:

</ApiCall>



# GraphQL API
Source: https://docs.strapi.io/cms/api/graphql

# GraphQL API

The GraphQL API allows performing queries and mutations to interact with the [content-types](/cms/backend-customization/models#content-types) through Strapi's [GraphQL plugin](/cms/plugins/graphql). Results can be [filtered](#filters), [sorted](#sorting) and [paginated](#pagination).

:::prerequisites
To use the GraphQL API, install the [GraphQL](/cms/plugins/graphql) plugin:

</Tabs>
:::

Once installed, the GraphQL playground is accessible at the `/graphql` URL and can be used to interactively build your queries and mutations and read documentation tailored to your content-types:

</Tabs>

#### Fetch relations

You can ask to include relation data in your flat queries or in your 

</Columns>
</details>

:::

</TabItem>

</Tabs>

### Fetch media fields

Media fields content is fetched just like other attributes.

The following example fetches the `url` attribute value for each `cover` media field attached to each document from the "Restaurants" content-type:

```graphql
{
  restaurants {
    images {
      documentId
      url
    }
  }
}
```

For multiple media fields, you can use flat queries or 

</Tabs>

### Fetch components

Components content is fetched just like other attributes.

The following example fetches the `label`, `start_date`, and `end_date` attributes values for each `closingPeriod` component added to each document from the "Restaurants" content-type:

```graphql
{
  restaurants {
    closingPeriod {
      label
      start_date
      end_date
    }
  }
}
```

### Fetch dynamic zone data

Dynamic zones are union types in GraphQL so you need to use 

</ApiCall>

### Fetch a document in a specific locale {#locale-fetch}

To fetch a documents 

</ApiCall>

### Create a new localized document {#locale-create}

The `locale` field can be passed to create a localized document  for a specific locale (for more information about mutations with GraphQL, see [the GraphQL API documentation](/cms/api/graphql#create-a-new-document)).

```graphql title="Example: Create a new restaurant for the French locale"
mutation CreateRestaurant($data: RestaurantInput!, $locale: I18NLocaleCode) {
  createRestaurant(
    data: {
      name: "Brasserie Bonjour",
      description: "Description in French goes here"
    },
    locale: "fr"
  ) {
  documentId
  name
  description
  locale
}
```

### Update a document for a specific locale {#locale-update}

A `locale` argument can be passed in the mutation to update a document  for a given locale (for more information about mutations with GraphQL, see [the GraphQL API documentation](/cms/api/graphql#update-an-existing-document)).

```graphql title="Example: Update the description field of restaurant for the French locale"
mutation UpdateRestaurant($documentId: ID!, $data: RestaurantInput!, $locale: I18NLocaleCode) {
  updateRestaurant(
    documentId: "a1b2c3d4e5d6f7g8h9i0jkl"
    data: {
      description: "New description in French"
    },
    locale: "fr"
  ) {
  documentId
  name
  description
  locale
}
```

### Delete a locale for a document {#locale-delete}

Pass the `locale` argument in the mutation to delete a specific localization for a document :

```graphql
mutation DeleteRestaurant($documentId: ID!, $locale: I18NLocaleCode) {
  deleteRestaurant(documentId: "xzmzdo4k0z73t9i68a7yx2kk", locale: "fr") {
    documentId
  }
}
```



# REST API reference
Source: https://docs.strapi.io/cms/api/rest

# REST API reference

The REST API allows accessing the [content-types](/cms/backend-customization/models) through API endpoints. Strapi automatically creates [API endpoints](#endpoints) when a content-type is created. [API parameters](/cms/api/rest/parameters) can be used when querying API endpoints to refine the results.

This section of the documentation is for the REST API reference. We also have [guides](/cms/api/rest/guides/intro) available for specific use cases.

:::prerequisites
All content types are private by default and need to be either made public or queries need to be authenticated with the proper permissions. See the [Quick Start Guide](/cms/quick-start#step-4-set-roles--permissions), the user guide for the [Users & Permissions feature](/cms/features/users-permissions#roles), and [API tokens configuration documentation](/cms/features/api-tokens) for more details.
:::

:::note
By default, the REST API responses only include top-level fields and does not populate any relations, media fields, components, or dynamic zones. Use the [`populate` parameter](/cms/api/rest/populate-select) to populate specific fields. Ensure that the find permission is given to the field(s) for the relation(s) you populate.
:::

:::strapi Strapi Client
The [Strapi Client](/cms/api/client) library simplifies interactions with your Strapi back end, providing a way to fetch, create, update, and delete content.
:::

## Endpoints

For each Content-Type, the following endpoints are automatically generated:

<details>

<summary>Plural API ID vs. Singular API ID:</summary>

In the following tables:

- `:singularApiId` refers to the value of the "API ID (Singular)" field of the content-type,
- and `:pluralApiId` refers to the value of the "API ID (Plural)" field of the content-type.

These values are defined when creating a content-type in the Content-Type Builder, and can be found while editing a content-type in the admin panel (see [User Guide](/cms/features/content-type-builder#creating-content-types)). For instance, by default, for an "Article" content-type:

- `:singularApiId` will be `article`
- `:pluralApiId` will be `articles`

</Tabs>

<details>

<summary>Real-world examples of endpoints:</summary>

The following endpoint examples are taken from the 

</Tabs>
</details>

:::strapi Upload API
The Upload package (which powers the [Media Library feature](/cms/features/media-library)) has a specific API accessible through its [`/api/upload` endpoints](/cms/api/rest/upload).
:::

:::note
[Components](/cms/backend-customization/models#components-json) don't have API endpoints.
:::

## Requests

:::strapi Strapi 5 vs. Strapi v4
Strapi 5's Content API includes 2 major differences with Strapi v4:

- The response format has been flattened, which means attributes are no longer nested in a `data.attributes` object and are directly accessible at the first level of the `data` object (e.g., a content-type's "title" attribute is accessed with `data.title`).
- Strapi 5 now uses **documents** 

</ApiCall>

### Get a document {#get}

Returns a document by `documentId`.

:::strapi Strapi 5 vs. Strapi v4
In Strapi 5, a specific document is reached by its `documentId`.
:::

</ApiCall>

### Create a document {#create}

Creates a document and returns its value.

If the [Internationalization (i18n) plugin](/cms/features/internationalization) is installed, it's possible to use POST requests to the REST API to [create localized documents](/cms/api/rest/locale#rest-delete).

:::note
While creating a document, you can define its relations and their order (see [Managing relations through the REST API](/cms/api/rest/relations.md) for more details).
:::

</ApiCall>

### Update a document {#update}

Partially updates a document by `id` and returns its value.

Send a `null` value to clear fields.

:::note NOTES
* Even with the [Internationalization (i18n) plugin](/cms/features/internationalization) installed, it's currently not possible to [update the locale of a document](/cms/api/rest/locale#rest-update).
* While updating a document, you can define its relations and their order (see [Managing relations through the REST API](/cms/api/rest/relations) for more details).
:::

</ApiCall>

### Delete a document {#delete}

Deletes a document.

`DELETE` requests only send a 204 HTTP status code on success and do not return any data in the response body.

</ApiCall>



# Filters
Source: https://docs.strapi.io/cms/api/rest/filters

# REST API: Filters

The [REST API](/cms/api/rest) offers the ability to filter results found with its ["Get entries"](/cms/api/rest#get-all) method.<br/>
Using optional Strapi features can provide some more filters:

- If the [Internationalization (i18n) plugin](/cms/features/internationalization) is enabled on a content-type, it's possible to filter by locale.
- If the [Draft & Publish](/cms/features/draft-and-publish) is enabled, it's possible to filter based on a `published` (default) or `draft` status.

:::tip

<details>
<summary>JavaScript query (built with the qs library):</summary>

</ApiCall>

## Example: Find multiple restaurants with ids 3, 6,8

You can use the `$in` filter operator with an array of values to find multiple exact values.

<br />

<details>
<summary>JavaScript query (built with the qs library):</summary>

</ApiCall>

## Complex filtering

Complex filtering is combining multiple filters using advanced methods such as combining `$and` & `$or`. This allows for more flexibility to request exactly the data needed.

<br />

<details>
<summary>JavaScript query (built with the qs library):</summary>

</ApiCall>

## Deep filtering

Deep filtering is filtering on a relation's fields.

:::note
- Relations, media fields, components, and dynamic zones are not populated by default. Use the `populate` parameter to populate these content structures (see [`populate` documentation](/cms/api/rest/populate-select#population))
- You can filter what you populate, you can also filter nested relations, but you can't use filters for polymorphic content structures (such as media fields and dynamic zones).
:::

:::caution
Querying your API with deep filters may cause performance issues.  If one of your deep filtering queries is too slow, we recommend building a custom route with an optimized version of the query.
:::

<details>
<summary>JavaScript query (built with the qs library):</summary>

</ApiCall>



# REST API Guides
Source: https://docs.strapi.io/cms/api/rest/guides/intro

# REST API Guides

The [REST API reference](/cms/api/rest) documentation is meant to provide a quick reference for all the endpoints and parameters available.

## Guides

The following guides, officially maintained by the Strapi Documentation team, cover dedicated topics and provide detailed explanations (guides indicated with 🧠) or step-by-step instructions (guides indicated with 🛠️) for some use cases:

## Additional resources

:::strapi Want to help other users?
Some of the additional resources listed in this section have been created for Strapi v4 and might not fully work with Strapi 5. If you want to update one of the following articles for Strapi 5, feel free to  for the Write for the Community program.
:::

Additional tutorials and guides can be found in the following blog posts:



# Interactive Query Builder
Source: https://docs.strapi.io/cms/api/rest/interactive-query-builder

# Build your query URL with Strapi's interactive tool

A wide range of parameters can be used and combined to query your content with the [REST API](/cms/api/rest), which can result in long and complex query URLs.

Strapi's codebase uses  to parse and stringify nested JavaScript objects. It's recommended to use `qs` directly to generate complex query URLs instead of creating them manually.

You can use the following interactive query builder tool to generate query URLs automatically:

1. Replace the values in the _Endpoint_ and _Endpoint Query Parameters_ fields with content that fits your needs.
2. Click the **Copy to clipboard** button to copy the automatically generated _Query String URL_ which is updated as you type.

:::info Parameters usage
Please refer to the [REST API parameters table](/cms/api/rest/parameters) and read the corresponding parameters documentation pages to better understand parameters usage.
:::

<br />

<br />
 
<br />

:::note
The default endpoint path is prefixed with `/api/` and should be kept as-is unless you configured a different API prefix using [the `rest.prefix` API configuration option](/cms/configurations/api).<br/> For instance, to query the `books` collection type using the default API prefix, type `/api/books` in the _Endpoint_ field.
:::

:::caution Disclaimer
The `qs` library and the interactive query builder provided on this page:
- might not detect all syntax errors,
- are not aware of the parameters and values available in a Strapi project,
- and do not provide autocomplete features.

Currently, these tools are only provided to transform the JavaScript object in an inline query string URL. Using the generated query URL does not guarantee that proper results will get returned with your API.
:::



# Locale
Source: https://docs.strapi.io/cms/api/rest/locale

# REST API: `locale`

The [Internationalization (i18n) feature](/cms/features/internationalization) adds new abilities to the [REST API](/cms/api/rest).

:::prerequisites
To work with API content for a locale, please ensure the locale has been already [added to Strapi in the admin panel](/cms/features/internationalization#settings).
:::

The `locale` [API parameter](/cms/api/rest/parameters) can be used to work with documents only for a specified locale. `locale` takes a locale code as a value (see 

</Tabs>

### `GET` Get all documents in a specific locale {#rest-get-all}

</ApiCall>

### `GET` Get a document in a specific locale {#rest-get}

To get a specific document in a given locale, add the `locale` parameter to the query:

| Use case             | Syntax format and link for more information                                                    |
| -------------------- | ---------------------------------------------------------------------------------------------- |
| In a collection type | [`GET /api/content-type-plural-name/document-id?locale=locale-code`](#get-one-collection-type) |
| In a single type     | [`GET /api/content-type-singular-name?locale=locale-code`](#get-one-single-type)               |

#### Collection types {#get-one-collection-type}

To get a specific document in a collection type in a given locale, add the `locale` parameter to the query, after the `documentId`:

</ApiCall>

#### Single types {#get-one-single-type}

To get a specific single type document in a given locale, add the `locale` parameter to the query, after the single type name:

</ApiCall>

### `POST` Create a new localized document for a collection type {#rest-create}

To create a localized document from scratch, send a POST request to the Content API. Depending on whether you want to create it for the default locale or for another locale, you might need to pass the `locale` parameter in the request's body

| Use case                      | Syntax format and link for more information                                               |
| ----------------------------- | --------------------------------------------------------------------------------------- |
| Create for the default locale | [`POST /api/content-type-plural-name`](#rest-create-default-locale) |
| Create for a specific locale  | [`POST /api/content-type-plural-name`](#rest-create-specific-locale)<br/>+ pass locale in request body               |

#### For the default locale {#rest-create-default-locale}

If no locale has been passed in the request body, the document is created using the default locale for the application:

</ApiCall>

#### For a specific locale {#rest-create-specific-locale}

To create a localized entry for a locale different from the default one, add the `locale` attribute to the body of the POST request:

</ApiCall>

### `PUT` Create a new, or update an existing, locale version for an existing document {#rest-update}

With `PUT` requests sent to an existing document, you can:

- create another locale version of the document,
- or update an existing locale version of the document.

Send the `PUT` request to the appropriate URL, adding the `locale=your-locale-code` parameter to the query URL and passing attributes in a `data` object in the request's body:

| Use case             | Syntax format and link for more information                                               |
| -------------------- | --------------------------------------------------------------------------------------- |
| In a collection type | [`PUT /api/content-type-plural-name/document-id?locale=locale-code`](#rest-put-collection-type) |
| In a single type     | [`PUT /api/content-type-singular-name?locale=locale-code`](#rest-put-single-type)               |

:::caution
When creating a localization for existing localized entries, the body of the request can only accept localized fields.
:::

:::tip
The Content-Type should have the [`createLocalization` permission](/cms/features/rbac#collection-and-single-types) enabled, otherwise the request will return a `403: Forbidden` status.
:::

:::note
It is not possible to change the locale of an existing localized entry. When updating a localized entry, if you set a `locale` attribute in the request body it will be ignored.
:::

#### In a collection type {#rest-put-collection-type}

To create a new locale for an existing document in a collection type, add the `locale` parameter to the query, after the `documentId`, and pass data to the request's body:

</ApiCall>

#### In a single type {#rest-put-single-type}

To create a new locale for an existing single type document, add the `locale` parameter to the query, after the single type name, and pass data to the request's body:

</ApiCall>

<br/>

### `DELETE` Delete a locale version of a document {#rest-delete}

To delete a locale version of a document, send a `DELETE` request with the appropriate `locale` parameter.

`DELETE` requests only send a 204 HTTP status code on success and do not return any data in the response body.

#### In a collection type {#rest-delete-collection-type}

To delete only a specific locale version of a document in a collection type, add the `locale` parameter to the query after the `documentId`:

#### In a single type {#rest-delete-single-type}

To delete only a specific locale version of a single type document, add the `locale` parameter to the query after the single type name:



# Parameters
Source: https://docs.strapi.io/cms/api/rest/parameters

# REST API parameters

API parameters can be used with the [REST API](/cms/api/rest) to filter, sort, and paginate results and to select fields and relations to populate. Additionally, specific parameters related to optional Strapi features can be used, like the publication state and locale of a content-type.

The following API parameters are available:

| Operator           | Type          | Description                                           |
| ------------------ | ------------- | ----------------------------------------------------- |
| `filters`          | Object        | [Filter the response](/cms/api/rest/filters) |
| `locale`           | String        | [Select a locale](/cms/api/rest/locale) |
| `status`           | String        | [Select the Draft & Publish status](/cms/api/rest/status) |
| `populate`         | String or Object | [Populate relations, components, or dynamic zones](/cms/api/rest/populate-select#population) |
| `fields`           | Array         | [Select only specific fields to display](/cms/api/rest/populate-select#field-selection) |
| `sort`             | String or Array  | [Sort the response](/cms/api/rest/sort-pagination.md#sorting) |
| `pagination`       | Object        | [Page through entries](/cms/api/rest/sort-pagination.md#pagination) |

Query parameters use the  (i.e. they are encoded using square brackets `[]`).

:::tip
A wide range of REST API parameters can be used and combined to query your content, which can result in long and complex query URLs.<br/>👉 You can use Strapi's [interactive query builder](/cms/api/rest/interactive-query-builder) tool to build query URLs more conveniently. 🤗
:::



# Populate and Select
Source: https://docs.strapi.io/cms/api/rest/populate-select

# REST API: Population & Field Selection

The [REST API](/cms/api/rest) by default does not populate any relations, media fields, components, or dynamic zones. Use the [`populate` parameter](#population) to populate specific fields and the [`select` parameter](#field-selection) to return only specific fields with the query results.

:::tip

</ApiCall>

## Population

The REST API by default does not populate any type of fields, so it will not populate relations, media fields, components, or dynamic zones unless you pass a `populate` parameter to populate various field types.

The `populate` parameter can be used alone or [in combination with with multiple operators](#combining-population-with-other-operators) to have much more control over the population.

:::caution
The `find` permission must be enabled for the content-types that are being populated. If a role doesn't have access to a content-type it will not be populated (see [User Guide](/cms/features/users-permissions#editing-a-role) for additional information on how to enable `find` permissions for content-types).
:::

:::note
It's currently not possible to return just an array of ids with a request.
:::

:::strapi Populating guides

The [REST API guides](/cms/api/rest/guides/intro) section includes more detailed information about various possible use cases for the populate parameter:

- The [Understanding populate](/cms/api/rest/guides/understanding-populate) guide explains in details how populate works, with diagrams, comparisons, and real-world examples.
- The [How to populate creator fields](/cms/api/rest/guides/populate-creator-fields) guide provides step-by-step instructions on how to add `createdBy` and `updatedBy` fields to your queries responses.

:::

The following table sums up possible populate use cases and their associated parameter syntaxes, and links to sections of the Understanding populate guide which includes more detailed explanations:

| Use case  | Example parameter syntax | Detailed explanations to read |
|-----------| ---------------|-----------------------|
| Populate everything, 1 level deep, including media fields, relations, components, and dynamic zones | `populate=*`| [Populate all relations and fields, 1 level deep](/cms/api/rest/guides/understanding-populate#populate-all-relations-and-fields-1-level-deep) |
| Populate one relation,<br/>1 level deep | `populate=a-relation-name`| [Populate 1 level deep for specific relations](/cms/api/rest/guides/understanding-populate#populate-1-level-deep-for-specific-relations) |
| Populate several relations,<br/>1 level deep | `populate[0]=relation-name&populate[1]=another-relation-name&populate[2]=yet-another-relation-name`| [Populate 1 level deep for specific relations](/cms/api/rest/guides/understanding-populate#populate-1-level-deep-for-specific-relations) |
| Populate some relations, several levels deep | `populate[root-relation-name][populate][0]=nested-relation-name`| [Populate several levels deep for specific relations](/cms/api/rest/guides/understanding-populate#populate-several-levels-deep-for-specific-relations) |
| Populate a component | `populate[0]=component-name`| [Populate components](/cms/api/rest/guides/understanding-populate#populate-components) |
| Populate a component and one of its nested components | `populate[0]=component-name&populate[1]=component-name.nested-component-name`| [Populate components](/cms/api/rest/guides/understanding-populate#populate-components) |
| Populate a dynamic zone (only its first-level elements) | `populate[0]=dynamic-zone-name`| [Populate dynamic zones](/cms/api/rest/guides/understanding-populate#populate-dynamic-zones) |
| Populate a dynamic zone and its nested elements and relations, using a precisely defined, detailed population strategy | `populate[dynamic-zone-name][on][component-category.component-name][populate][relation-name][populate][0]=field-name`| [Populate dynamic zones](/cms/api/rest/guides/understanding-populate#populate-dynamic-zones) |

:::tip
The easiest way to build complex queries with multiple-level population is to use our [interactive query builder](/cms/api/rest/interactive-query-builder) tool.
:::

### Combining Population with other operators

By utilizing the `populate` operator it is possible to combine other operators such as [field selection](/cms/api/rest/populate-select#field-selection), [filters](/cms/api/rest/filters), and [sort](/cms/api/rest/sort-pagination) in the population queries.

:::caution
The population and pagination operators cannot be combined.
:::

#### Populate with field selection

`fields` and `populate` can be combined.

<details>
<summary>
</ApiCall>

#### Populate with filtering

`filters` and `populate` can be combined.

<details>
<summary>
</ApiCall>



# Relations
Source: https://docs.strapi.io/cms/api/rest/relations

# Managing relations with API requests

Defining relations between content-types (that are designated as entities in the database layers) is connecting entities with each other.

Relations between content-types can be managed through the [admin panel](/cms/features/content-manager#relational-fields) or through [REST API](/cms/api/rest) or [Document Service API](/cms/api/document-service) requests.

Relations can be connected, disconnected or set through the Content API by passing parameters in the body of the request:

|  Parameter name         | Description | Type of update |
|-------------------------|-------------|----------------|
| [`connect`](#connect)   | Connects new entities.<br /><br />Can be used in combination with `disconnect`.<br /><br />Can be used with [positional arguments](#relations-reordering) to define an order for relations.    | Partial |
| [`disconnect`](#disconnect)    | Disconnects entities.<br /><br />Can be used in combination with `connect`. | Partial |
| [`set`](#set)           | Set entities to a specific set. Using `set` will overwrite all existing connections to other entities.<br /><br />Cannot be used in combination with `connect` or `disconnect`.  | Full |

:::note
When [Internationalization (i18n)](/cms/features/internationalization) is enabled on the content-type, you can also pass a locale to set relations for a specific locale, as in this Document Service API example:

```js
await strapi.documents('api::restaurant.restaurant').update({ 
  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
  locale: 'fr',
  data: { 
    category: {
      connect: ['z0y2x4w6v8u1t3s5r7q9onm', 'j9k8l7m6n5o4p3q2r1s0tuv']
    }
  }
})
```

If no locale is passed, the default locale will be assumed.
:::

## `connect`

Using `connect` in the body of a request performs a partial update, connecting the specified relations.

`connect` accepts either a shorthand or a longhand syntax:

| Syntax type | Syntax example |
| ------------|----------------|
| shorthand   | `connect: ['z0y2x4w6v8u1t3s5r7q9onm', 'j9k8l7m6n5o4p3q2r1s0tuv']` |
| longhand    | ```connect: [{ documentId: 'z0y2x4w6v8u1t3s5r7q9onm' }, { documentId: 'j9k8l7m6n5o4p3q2r1s0tuv' }]``` |

You can also use the longhand syntax to [reorder relations](#relations-reordering).

`connect` can be used in combination with [`disconnect`](#disconnect).

:::caution
`connect` can not be used for media attributes
:::

</MultiLanguageSwitcher>

</TabItem>

</MultiLanguageSwitcher>

</TabItem>
</Tabs>

### Relations reordering

</TabItem>

Omitting the `position` argument (as in `documentId: 'srkvrr77k96o44d9v6ef1vu9'`) defaults to `position: { end: true }`. All other relations are positioned relative to another existing `id` (using `after` or `before`) or relative to the list of relations (using `start` or `end`). Operations are treated sequentially in the order defined in the `connect` array, so the resulting database record will be the following:

```js
categories: [
  { id: 'nyk7047azdgbtjqhl7btuxw' },
  { id: 'j9k8l7m6n5o4p3q2r1s0tuv' },
  { id: '6u86wkc6x3parjd4emikhmx6' },
  { id: '3r1wkvyjwv0b9b36s7hzpxl7' },
  { id: 'a1b2c3d4e5f6g7h8i9j0klm' },
  { id: 'rkyqa499i84197l29sbmwzl' },
  { id: 'srkvrr77k96o44d9v6ef1vu9' }
]
```

</TabItem>

</Tabs>

### Edge cases: Draft & Publish or i18n disabled

When some built-in features of Strapi 5 are disabled for a content-type, such as [Draft & Publish](/cms/features/draft-and-publish) and [Internationalization (i18)](/cms/features/internationalization), the `connect` parameter might be used differently:

**Relation from a `Category` with i18n _off_ to an `Article` with i18n _on_:**

In this situation you can select which locale you are connecting to:

```js
data: {
    categories: {
      connect: [
        { documentId: 'z0y2x4w6v8u1t3s5r7q9onm', locale: 'en' },
        // Connect to the same document id but with a different locale 👇
        { documentId: 'z0y2x4w6v8u1t3s5r7q9onm', locale: 'fr' },
      ]
   }
}
```

**Relation from a `Category` with Draft & Publish _off_ to an `Article` with Draft & Publish _on_:**

```js
data: {
  categories: {
    connect: [
      { documentId: 'z0y2x4w6v8u1t3s5r7q9onm', status: 'draft' },
      // Connect to the same document id but with different publication states 👇
      { documentId: 'z0y2x4w6v8u1t3s5r7q9onm', status: 'published' },
    ]
  }
}
```

## `disconnect`

Using `disconnect` in the body of a request performs a partial update, disconnecting the specified relations.

`disconnect` accepts either a shorthand or a longhand syntax:

| Syntax type | Syntax example |
| ------------|----------------|
| shorthand   | `disconnect: ['z0y2x4w6v8u1t3s5r7q9onm', 'j9k8l7m6n5o4p3q2r1s0tuv']`
| longhand    | ```disconnect: [{ documentId: 'z0y2x4w6v8u1t3s5r7q9onm' }, { documentId: 'j9k8l7m6n5o4p3q2r1s0tuv' }]``` |

`disconnect` can be used in combination with [`connect`](#connect).

<br />

</TabItem>

</TabItem>
</Tabs>

## `set`

Using `set` performs a full update, replacing all existing relations with the ones specified, in the order specified.

`set` accepts a shorthand or a longhand syntax:

| Syntax type | Syntax example                  |
| ----------- | ------------------------------- |
| shorthand   | `set: ['z0y2x4w6v8u1t3s5r7q9onm', 'j9k8l7m6n5o4p3q2r1s0tuv']`                   |
| longhand    | ```set: [{ documentId: 'z0y2x4w6v8u1t3s5r7q9onm' }, { documentId: 'j9k8l7m6n5o4p3q2r1s0tuv' }]``` |

As `set` replaces all existing relations, it should not be used in combination with other parameters. To perform a partial update, use [`connect`](#connect) and [`disconnect`](#disconnect).

:::note Omitting set
Omitting any parameter is equivalent to using `set`.<br/>For instance, the following 3 syntaxes are all equivalent:

- `data: { categories: set: [{ documentId: 'z0y2x4w6v8u1t3s5r7q9onm' }, { documentId: 'j9k8l7m6n5o4p3q2r1s0tuv' }] }}`
- `data: { categories: set: ['z0y2x4w6v8u1t3s5r7q9onm2', 'j9k8l7m6n5o4p3q2r1s0tuv'] }}`
- `data: { categories: ['z0y2x4w6v8u1t3s5r7q9onm2', 'j9k8l7m6n5o4p3q2r1s0tuv'] }`

:::

</TabItem>

</TabItem>
</Tabs>



# Sort and Pagination
Source: https://docs.strapi.io/cms/api/rest/sort-pagination

# REST API: Sort & Pagination

Entries that are returned by queries to the [REST API](/cms/api/rest) can be sorted and paginated.

:::tip

<details>
<summary>JavaScript query (built with the qs library):</summary>

</ApiCall>

### Example: Sort using 2 fields and set the order

Using the `sort` parameter and defining `:asc` or  `:desc` on sorted fields, you can get results sorted in a particular order.

<br />

<details>
<summary>JavaScript query (built with the qs library):</summary>

</ApiCall>

## Pagination

Queries can accept `pagination` parameters. Results can be paginated:

- either by [page](#pagination-by-page) (i.e., specifying a page number and the number of entries per page)
- or by [offset](#pagination-by-offset) (i.e., specifying how many entries to skip and to return)

:::note
Pagination methods can not be mixed. Always use either `page` with `pageSize` **or** `start` with `limit`.
:::

### Pagination by page

To paginate results by page, use the following parameters:

| Parameter               | Type    | Description                                                               | Default |
| ----------------------- | ------- | ------------------------------------------------------------------------- | ------- |
| `pagination[page]`      | Integer | Page number                                                               | 1       |
| `pagination[pageSize]`  | Integer | Page size                                                                 | 25      |
| `pagination[withCount]` | Boolean | Adds the total numbers of entries and the number of pages to the response | True    |

<details>
<summary>JavaScript query (built with the qs library):</summary>

</ApiCall>

### Pagination by offset

To paginate results by offset, use the following parameters:

| Parameter               | Type    | Description                                                    | Default |
| ----------------------- | ------- | -------------------------------------------------------------- | ------- |
| `pagination[start]`     | Integer | Start value (i.e. first entry to return)                      | 0       |
| `pagination[limit]`     | Integer | Number of entries to return                                    | 25      |
| `pagination[withCount]` | Boolean | Toggles displaying the total number of entries to the response | `true`  |

:::tip
The default and maximum values for `pagination[limit]` can be [configured in the `./config/api.js`](/cms/configurations/api) file with the `api.rest.defaultLimit` and `api.rest.maxLimit` keys.
:::

<details>
<summary>JavaScript query (built with the qs library):</summary>

</ApiCall>



# Status
Source: https://docs.strapi.io/cms/api/rest/status

# REST API: `status`

The [REST API](/cms/api/rest) offers the ability to filter results based on their status, draft or published.

:::prerequisites
The [Draft & Publish](/cms/features/draft-and-publish) feature should be enabled.
:::

Queries can accept a `status` parameter to fetch documents based on their status:

- `published`: returns only the published version of documents (default)
- `draft`: returns only the draft version of documents

:::tip
In the response data, the `publishedAt` field is `null` for drafts.
:::

:::note
Since published versions are returned by default, passing no status parameter is equivalent to passing `status=published`.
:::

<br /><br />

<details>
<summary>JavaScript query (built with the qs library):</summary>

</ApiCall>



# Upload files
Source: https://docs.strapi.io/cms/api/rest/upload

# REST API: Upload files

The [Media Library feature](/cms/features/media-library) is powered in the back-end server of Strapi by the `upload` package. To upload files to Strapi, you can either use the Media Library directly from the admin panel, or use the [REST API](/cms/api/rest), with the following available endpoints :

| Method | Path                    | Description         |
| :----- | :---------------------- | :------------------ |
| GET    | `/api/upload/files`     | Get a list of files |
| GET    | `/api/upload/files/:id` | Get a specific file |
| POST   | `/api/upload`           | Upload files        |
| POST   | `/api/upload?id=x`      | Update fileInfo     |
| DELETE | `/api/upload/files/:id` | Delete a file       |

:::note Notes
- [Folders](/cms/features/media-library#organizing-assets-with-folders) are an admin panel-only feature and are not part of the Content API (REST or GraphQL). Files uploaded through REST are located in the automatically created "API Uploads" folder.
- The GraphQL API does not support uploading media files. To upload files, use the REST API or directly add files from the [Media Library](/cms/features/media-library) in the admin panel. Some GraphQL mutations to update or delete uploaded media files are still possible (see [GraphQL API documentation](/cms/api/graphql#mutations-on-media-files) for details).
:::

## Upload files

Upload one or more files to your application.

`files` is the only accepted parameter, and describes the file(s) to upload. The value(s) can be a Buffer or Stream:

</Tabs>

:::caution
You have to send FormData in your request body.
:::

## Upload entry files

Upload one or more files that will be linked to a specific entry.

The following parameters are accepted:

| Parameter | Description |
| --------- | ----------- |
|`files`    | The file(s) to upload. The value(s) can be a Buffer or Stream. |
|`path` (optional) | The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3). |
| `refId` | The ID of the entry which the file(s) will be linked to. |
| `ref` | The unique ID (uid) of the model which the file(s) will be linked to (see more below). |
| `source` (optional) | The name of the plugin where the model is located. |
| `field` | The field of the entry which the file(s) will be precisely linked to. |

For example, given the `Restaurant` model attributes:

```json title="/src/api/restaurant/content-types/restaurant/schema.json"
{
  // ...
  "attributes": {
    "name": {
      "type": "string"
    },
    "cover": {
      "type": "media",
      "multiple": false,
    }
  }
// ...
}
```

The following is an example of a corresponding front-end code:

```html
<form>
  <!-- Can be multiple files if you setup "collection" instead of "model" -->
  <input type="file" name="files" />
  <input type="text" name="ref" value="api::restaurant.restaurant" />
  <input type="text" name="refId" value="5c126648c7415f0c0ef1bccd" />
  <input type="text" name="field" value="cover" />
  <input type="submit" value="Submit" />
</form>

<script type="text/javascript">
  const form = document.querySelector('form');

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    await fetch('/api/upload', {
      method: 'post',
      body: new FormData(e.target)
    });
  });
</script>
```

:::caution
You have to send FormData in your request body.
:::

## Update fileInfo

Update a file in your application.

`fileInfo` is the only accepted parameter, and describes the fileInfo to update:

```js

const fileId = 50;
const newFileData = {
  alternativeText: 'My new alternative text for this image!',
};

const form = new FormData();

form.append('fileInfo', JSON.stringify(newFileData));

const response = await fetch(`http://localhost:1337/api/upload?id=${fileId}`, {
  method: 'post',
  body: form,
});

```

## Models definition

Adding a file attribute to a [model](/cms/backend-customization/models) (or the model of another plugin) is like adding a new association.

The following example lets you upload and attach one file to the `avatar` attribute:

```json title="/src/api/restaurant/content-types/restaurant/schema.json"

{
  // ...
  {
    "attributes": {
      "pseudo": {
        "type": "string",
        "required": true
      },
      "email": {
        "type": "email",
        "required": true,
        "unique": true
      },
      "avatar": {
        "type": "media",
        "multiple": false,
      }
    }
  }
  // ...
}

```

The following example lets you upload and attach multiple pictures to the `restaurant` content-type:

```json title="/src/api/restaurant/content-types/restaurant/schema.json"
{
  // ...
  {
    "attributes": {
      "name": {
        "type": "string",
        "required": true
      },
      "covers": {
        "type": "media",
        "multiple": true,
      }
    }
  }
  // ...
}
```



# 백엔드 커스터마이징
Source: https://docs.strapi.io/cms/backend-customization

<div className="custom-mermaid-layout">

:::strapi 용어 구분: Strapi 백엔드
Strapi는 헤드리스 CMS로, 전체 소프트웨어가 웹사이트/애플리케이션의 "백엔드" 역할을 합니다.
하지만 Strapi 자체는 2가지 부분으로 나뉩니다:

- **백엔드**: Strapi가 실행하는 HTTP 서버입니다. 일반적인 HTTP 서버처럼 요청을 받고 응답을 반환합니다. 콘텐츠는 데이터베이스에 저장되며, Strapi 백엔드는 데이터베이스와 상호작용하여 콘텐츠를 생성, 조회, 수정, 삭제합니다.
- **프론트엔드**: 관리자 패널로, 콘텐츠 구조화 및 관리를 위한 그래픽 UI를 제공합니다.

이 개발자 문서에서 '백엔드'란 _오직_ Strapi의 백엔드 부분만을 의미합니다.

[시작하기 > 관리자 패널](/cms/features/admin-panel)에서 관리자 패널 개요를, [관리자 패널 커스터마이징](/cms/admin-panel-customization)에서 다양한 커스터마이징 방법을 확인할 수 있습니다.
:::

Strapi 백엔드는  기반의 HTTP 서버로 동작합니다.

일반적인 HTTP 서버처럼, Strapi 백엔드는 요청을 받고 응답을 반환합니다. [REST](/cms/api/rest) 또는 [GraphQL](/cms/api/graphql) API를 통해 데이터를 생성, 조회, 수정, 삭제할 수 있습니다.

요청이 Strapi 백엔드를 통과하는 흐름은 다음과 같습니다:

1. Strapi 서버가 [요청](/cms/backend-customization/requests-responses)을 받음
2. [글로벌 미들웨어](/cms/backend-customization/middlewares)가 순차적으로 실행됨
3. [라우트](/cms/backend-customization/routes)에 도달<br/>Strapi는 생성한 모든 콘텐츠 타입에 대해 기본 라우트 파일을 생성하며([REST API 문서](/cms/api/rest) 참고), 추가 라우트도 설정 가능
4. [라우트 정책](/cms/backend-customization/policies)은 읽기 전용 검증 단계로, 접근을 차단할 수 있음. [라우트 미들웨어](/cms/backend-customization/routes#middlewares)는 요청 흐름을 제어하거나 요청 자체를 변형할 수 있음
5. [컨트롤러](/cms/backend-customization/controllers)가 라우트에 도달하면 코드 실행. [서비스](/cms/backend-customization/services)는 컨트롤러에서 재사용 가능한 커스텀 로직을 추가로 구현할 때 사용
6. 컨트롤러/서비스에서 실행되는 코드는 데이터베이스에 저장된 콘텐츠 구조를 나타내는 [모델](/cms/backend-customization/models)과 상호작용<br />모델과의 데이터 상호작용은 [Document Service](/cms/api/document-service)와 [Query Engine](/cms/api/query-engine)이 담당
7. [Document Service 미들웨어](/cms/api/document-service/middlewares)로 쿼리 엔진에 전달되기 전 데이터를 제어할 수 있음. 쿼리 엔진은 라이프사이클 훅도 지원하지만, 데이터베이스 직접 접근이 필요한 경우가 아니라면 Document Service 미들웨어 사용 권장
7. 서버가 [응답](/cms/backend-customization/requests-responses)을 반환. 응답도 라우트 미들웨어와 글로벌 미들웨어를 거쳐 전송됨

글로벌/라우트 미들웨어 모두 비동기 콜백 함수(`await next()`)를 포함합니다. 미들웨어의 반환값에 따라 요청이 백엔드를 통과하는 경로가 달라집니다:

* 미들웨어가 아무것도 반환하지 않으면, 요청은 컨트롤러, 서비스, 데이터베이스 등 백엔드의 다양한 핵심 요소를 계속 통과합니다.
* 미들웨어가 `await next()` 호출 전 반환되면, 즉시 응답이 전송되어 나머지 요소를 건너뜁니다. 이후 응답도 동일한 체인을 따라 역방향으로 이동합니다.

:::info
이 섹션에서 설명하는 모든 커스터마이징은 REST API 전용입니다. [GraphQL 커스터마이징](/cms/plugins/graphql#customization)은 GraphQL 플러그인 문서를 참고하세요.
:::

<!-- TODO: v5용 백엔드 예제집이 준비되면 아래 주석 해제 -->
<!-- :::tip 예제로 배우기
실제 예시를 통해 학습하고 싶다면, [예제집](/cms/backend-customization/examples) 섹션에서 다양한 백엔드 커스터마이징 사례를 확인할 수 있습니다.
::: -->

## 인터랙티브 다이어그램

아래 다이어그램은 요청이 Strapi 백엔드를 통과하는 과정을 시각화한 것입니다. 각 도형을 클릭하면 관련 문서로 이동합니다.

</div>



# Controllers
Source: https://docs.strapi.io/cms/backend-customization/controllers

# Controllers

Controllers are JavaScript files that contain a set of methods, called actions, reached by the client according to the requested [route](/cms/backend-customization/routes). Whenever a client requests the route, the action performs the business logic code and sends back the [response](/cms/backend-customization/requests-responses). Controllers represent the C in the model-view-controller (MVC) pattern.

In most cases, the controllers will contain the bulk of a project's business logic. But as a controller's logic becomes more and more complicated, it's a good practice to use [services](/cms/backend-customization/services) to organize the code into re-usable parts.

<figure style={{width: '100%', margin: '0'}}>
  <img src="/img/assets/backend-customization/diagram-controllers-services.png" alt="Simplified Strapi backend diagram with controllers highlighted" />
  <em><figcaption style={{fontSize: '12px'}}>The diagram represents a simplified version of how a request travels through the Strapi back end, with controllers highlighted. The backend customization introduction page includes a complete, <a href="/cms/backend-customization#interactive-diagram">interactive diagram</a>.</figcaption></em>
</figure>

## Implementation 

Controllers can be [generated or added manually](#adding-a-new-controller). Strapi provides a `createCoreController` factory function that automatically generates core controllers and allows building custom ones or [extend or replace the generated controllers](#extending-core-controllers).

### Adding a new controller

A new controller can be implemented:

- with the [interactive CLI command `strapi generate`](/cms/cli)
- or manually by creating a JavaScript file:
  - in `./src/api/[api-name]/controllers/` for API controllers (this location matters as controllers are auto-loaded by Strapi from there)
  - or in a folder like `./src/plugins/[plugin-name]/server/controllers/` for plugin controllers, though they can be created elsewhere as long as the plugin interface is properly exported in the `strapi-server.js` file (see [Server API for Plugins documentation](/cms/plugins-development/server-api))

</Tabs>

Each controller action can be an `async` or `sync` function.
Every action receives a context object (`ctx`) as a parameter. `ctx` contains the [request context](/cms/backend-customization/requests-responses#ctxrequest) and the [response context](/cms/backend-customization/requests-responses#ctxresponse).

<details>

</Tabs>

</details>

:::note 
When a new [content-type](/cms/backend-customization/models#content-types) is created, Strapi builds a generic controller with placeholder code, ready to be customized.
:::

:::tip 
To see a possible advanced usage for custom controllers, read the [services and controllers](/cms/backend-customization/examples/services-and-controllers) page of the backend customization examples cookbook.
:::

### Sanitization and Validation in controllers  {#sanitization-and-validation-in-controllers}

:::warning 
It's strongly recommended you sanitize (v4.8.0+) and/or validate (v4.13.0+) your incoming request query utilizing the new `sanitizeQuery` and `validateQuery` functions to prevent the leaking of private data.
:::

Sanitization means that the object is “cleaned” and returned.

Validation means an assertion is made that the data is already clean and throws an error if something is found that shouldn't be there.

In Strapi 5, both query parameters and input data (i.e., create and update body data) are validated. Any create and update data requests with the following invalid input will throw a `400 Bad Request` error:

- relations the user do not have permission to create
- unrecognized values that are not present on a schema
- non-writable fields and internal timestamps like `createdAt` and `createdBy` fields
- setting or updating an `id` field (except for connecting relations)

#### Sanitization when utilizing controller factories

Within the Strapi factories the following functions are exposed that can be used for sanitization and validation:

| Function Name    | Parameters                 | Description                                                                          |
|------------------|----------------------------|--------------------------------------------------------------------------------------|
| `sanitizeQuery`  | `ctx`                      | Sanitizes the request query                                                          |
| `sanitizeOutput` | `entity`/`entities`, `ctx` | Sanitizes the output data where entity/entities should be an object or array of data |
| `sanitizeInput`  | `data`, `ctx`              | Sanitizes the input data                                                             |
| `validateQuery`  | `ctx`                      | Validates the request query (throws an error on invalid params)                      |
| `validateInput`  | `data`, `ctx`              | (EXPERIMENTAL) Validates the input data (throws an error on invalid data)                           |

These functions automatically inherit the sanitization settings from the model and sanitize the data accordingly based on the content-type schema and any of the content API authentication strategies, such as the Users & Permissions plugin or API tokens.

:::warning
Because these methods use the model associated with the current controller, if you query data that is from another model (i.e., doing a find for "menus" within a "restaurant" controller method), you must instead use the `@strapi/utils` tools, such as `sanitize.contentAPI.query` described in [Sanitizing Custom Controllers](#sanitize-validate-custom-controllers), or else the result of your query will be sanitized against the wrong model.
:::

</Tabs>

#### Sanitization and validation when building custom controllers  {#sanitize-validate-custom-controllers}

Within custom controllers, there are 5 primary functions exposed via the `@strapi/utils` package that can be used for sanitization and validation:

| Function Name                | Parameters         | Description                                             |
|------------------------------|--------------------|---------------------------------------------------------|
| `sanitize.contentAPI.input`  | `data`, `schema`, `auth`      | Sanitizes the request input including non-writable fields, removing restricted relations, and other nested "visitors" added by plugins |
| `sanitize.contentAPI.output` | `data`, `schema`, `auth`      | Sanitizes the response output including restricted relations, private fields, passwords, and other nested "visitors" added by plugins  |
| `sanitize.contentAPI.query`  | `ctx.query`, `schema`, `auth` | Sanitizes the request query including filters, sort, fields, and populate  |
| `validate.contentAPI.query`  | `ctx.query`, `schema`, `auth` | Validates the request query including filters, sort, fields (currently not populate) |
| `validate.contentAPI.input`  | `data`, `schema`, `auth` | (EXPERIMENTAL) Validates the request input including non-writable fields, removing restricted relations, and other nested "visitors" added by plugins |

:::note 
Depending on the complexity of your custom controllers, you may need additional sanitization that Strapi cannot currently account for, especially when combining the data from multiple sources.
:::

</Tabs>

### Extending core controllers  {#extending-core-controllers}

Default controllers and actions are created for each content-type. These default controllers are used to return responses to API requests (e.g. when `GET /api/articles/3` is accessed, the `findOne` action of the default controller for the "Article" content-type is called). Default controllers can be customized to implement your own logic. The following code examples should help you get started.

:::tip 
An action from a core controller can be replaced entirely by [creating a custom action](#adding-a-new-controller) and naming the action the same as the original action (e.g. `find`, `findOne`, `create`, `update`, or `delete`).
:::

:::tip 
When extending a core controller, you do not need to re-implement any sanitization as it will already be handled by the core controller you are extending. Where possible it's strongly recommended to extend the core controller instead of creating a custom controller.
:::

<details>
<summary>Collection type examples</summary>

:::tip
The [backend customization examples cookbook](/cms/backend-customization/examples) shows how you can overwrite a default controller action, for instance for the [`create` action](/cms/backend-customization/examples/services-and-controllers#custom-controller).
:::

</Tabs>
</details>

<details>
<summary>Single type examples</summary>

</Tabs>
</details>

## Usage 

Controllers are declared and attached to a route. Controllers are automatically called when the route is called, so controllers usually do not need to be called explicitly. However, [services](/cms/backend-customization/services) can call controllers, and in this case the following syntax should be used:

```js
// access an API controller
strapi.controller('api::api-name.controller-name');
// access a plugin controller
strapi.controller('plugin::plugin-name.controller-name');
```

:::tip  
To list all the available controllers, run `yarn strapi controllers:list`.
:::



# Middlewares
Source: https://docs.strapi.io/cms/backend-customization/middlewares

# Middlewares customization

</Tabs>

Globally scoped custom middlewares should be added to the [middlewares configuration file](/cms/configurations/middlewares#loading-order) or Strapi won't load them.

API level and plugin middlewares can be added into the specific router that they are relevant to like the following:

```js title="./src/api/[api-name]/routes/[collection-name].js or ./src/plugins/[plugin-name]/server/routes/index.js"
module.exports = {
  routes: [
    {
      method: "GET",
      path: "/[collection-name]",
      handler: "[controller].find",
      config: {
        middlewares: ["[middleware-name]"],
        // See the usage section below for middleware naming conventions
      },
    },
  ],
};
```

<details>
<summary>Example of a custom timer middleware</summary>

</Tabs>

</details>

The GraphQL plugin also allows [implementing custom middlewares](/cms/plugins/graphql#middlewares), with a different syntax.

## Usage

Middlewares are called different ways depending on their scope:

- use `global::middleware-name` for application-level middlewares
- use `api::api-name.middleware-name` for API-level middlewares
- use `plugin::plugin-name.middleware-name` for plugin middlewares

:::tip
To list all the registered middlewares, run `yarn strapi middlewares:list`.
:::

### Restricting content access with an "is-owner policy"

It is often required that the author of an entry is the only user allowed to edit or delete the entry. In previous versions of Strapi, this was known as an "is-owner policy". With Strapi v4, the recommended way to achieve this behavior is to use a middleware.

Proper implementation largely depends on your project's needs and custom code, but the most basic implementation could be achieved with the following procedure: 

1. From your project's folder, create a middleware with the Strapi CLI generator, by running the `yarn strapi generate` (or `npm run strapi generate`) command in the terminal.
2. Select `middleware` from the list, using keyboard arrows, and press Enter.
3. Give the middleware a name, for instance `isOwner`.
4. Choose `Add middleware to an existing API` from the list.
5. Select which API you want the middleware to apply.
6. Replace the code in the `/src/api/[your-api-name]/middlewares/isOwner.js` file with the following, replacing `api::restaurant.restaurant` in line 22 with the identifier corresponding to the API you choose at step 5 (e.g., `api::blog-post.blog-post` if your API name is `blog-post`):

  ```js showLineNumbers title="src/api/blog-post/middlewares/isOwner.js"
    "use strict";

    /**
     * `isOwner` middleware
     */

    module.exports = (config, { strapi }) => {
      // Add your own logic here.
      return async (ctx, next) => {
        const user = ctx.state.user;
        const entryId = ctx.params.id ? ctx.params.id : undefined;
        let entry = {};

        /** 
         * Gets all information about a given entry,
         * populating every relations to ensure 
         * the response includes author-related information
         */
        if (entryId) {
          entry = await strapi.documents('api::restaurant.restaurant').findOne(
            entryId,
            { populate: "*" }
          );
        }

        /**
         * Compares user id and entry author id
         * to decide whether the request can be fulfilled
         * by going forward in the Strapi backend server
         */
        if (user.id !== entry.author.id) {
          return ctx.unauthorized("This action is unauthorized.");
        } else {
          return next();
        }
      };
    };
  ```

7. Ensure the middleware is configured to apply on some routes. In the `config` object found in the `src/api/[your-api–name]/routes/[your-content-type-name].js` file, define the methods (`create`, `read`, `update`, `delete`) for which you would like the middleware to apply, and declare the `isOwner` middleware for these routes.<br /><br />For instance, if you wish to allow GET (i.e., `read` method) and POST (i.e., `create` method) requests to any user for the `restaurant` content-type in the `restaurant` API, but would like to restrict PUT (i.e., `update` method) and DELETE requests only to the user who created the entry, you could use the following code in the `src/api/restaurant/routes/restaurant.js` file:

    ```js title="src/api/restaurant/routes/restaurant.js"

    /**
     * restaurant router
     */
      
    const { createCoreRouter } = require("@strapi/strapi").factories;

    module.exports = createCoreRouter("api::restaurant.restaurant", {
      config: {
        update: {
          middlewares: ["api::restaurant.is-owner"],
        },
        delete: {
          middlewares: ["api::restaurant.is-owner"],
        },
      },
    });
    ```

:::info
You can find more information about route middlewares in the [routes documentation](/cms/backend-customization/routes).
:::



# Models
Source: https://docs.strapi.io/cms/backend-customization/models

# Models

As Strapi is a headless Content Management System (CMS), creating a content structure for the content is one of the most important aspects of using the software. Models define a representation of the content structure.

There are 2 different types of models in Strapi:

- content-types, which can be collection types or single types, depending on how many entries they manage,
- and components that are content structures re-usable in multiple content-types.

If you are just starting out, it is convenient to generate some models with the [Content-type Builder](/cms/features/content-type-builder) directly in the admin panel. The user interface takes over a lot of validation tasks and showcases all the options available to create the content's content structure. The generated model mappings can then be reviewed at the code level using this documentation.

## Model creation

Content-types and components models are created and stored differently.

### Content-types

Content-types in Strapi can be created:

- with the [Content-type Builder in the admin panel](/cms/features/content-type-builder),
- or with [Strapi's interactive CLI `strapi generate`](/cms/cli#strapi-generate) command.

The content-types use the following files:

- `schema.json` for the model's [schema](#model-schema) definition. (generated automatically, when creating content-type with either method)
- `lifecycles.js` for [lifecycle hooks](#lifecycle-hooks). This file must be created manually.

These models files are stored in `./src/api/[api-name]/content-types/[content-type-name]/`, and any JavaScript or JSON file found in these folders will be loaded as a content-type's model (see [project structure](/cms/project-structure)).

:::note
In [TypeScript](/cms/typescript.md)-enabled projects, schema typings can be generated using the `ts:generate-types` command.
:::

### Components {#components-creation}

Component models can't be created with CLI tools. Use the [Content-type Builder](/cms/features/content-type-builder) or create them manually.

Components models are stored in the `./src/components` folder. Every component has to be inside a subfolder, named after the category the component belongs to (see [project structure](/cms/project-structure)).

## Model schema

The `schema.json` file of a model consists of:

- [settings](#model-settings), such as the kind of content-type the model represents or the table name in which the data should be stored,
- [information](#model-information), mostly used to display the model in the admin panel and access it through the REST and GraphQL APIs,
- [attributes](#model-attributes), which describe the content structure of the model,
- and [options](#model-options) used to defined specific behaviors on the model.

### Model settings

General settings for the model can be configured with the following parameters:

| Parameter                                          | Type   | Description                                                                                                            |
| -------------------------------------------- | ------ | ---------------------------------------------------------------------------------------------------------------------- |
| `collectionName`                                  | String | Database table name in which the data should be stored                                                    |
| `kind`<br /><br />_Optional,<br/>only for content-types_ | String | Defines if the content-type is:<ul><li>a collection type (`collectionType`)</li><li>or a single type (`singleType`)</li></ul> |

```json
// ./src/api/[api-name]/content-types/restaurant/schema.json

{
  "kind": "collectionType",
  "collectionName": "Restaurants_v1",
}
```

### Model information

The `info` key in the model's schema describes information used to display the model in the admin panel and access it through the Content API. It includes the following parameters:

<!-- ? with the new design system, do we still use FontAwesome?  -->

| Parameter            | Type   | Description                                                                                                                                 |
| -------------- | ------ | ------------------------------------------------------------------------------------------------------------------------------------------- |
| `displayName`  | String | Default name to use in the admin panel                                                                                                      |
| `singularName` | String | Singular form of the content-type name.<br />Used to generate the API routes and databases/tables collection.<br /><br />Should be kebab-case. |
| `pluralName`   | String | Plural form of the content-type name.<br />Used to generate the API routes and databases/tables collection.<br /><br />Should be kebab-case.    |
| `description`  | String | Description of the model                                                                                                                   |

```json title="./src/api/[api-name]/content-types/restaurant/schema.json"

  "info": {
    "displayName": "Restaurant",
    "singularName": "restaurant",
    "pluralName": "restaurants",
    "description": ""
  },
```

### Model attributes

The content structure of a model consists of a list of attributes. Each attribute has a `type` parameter, which describes its nature and defines the attribute as a simple piece of data or a more complex structure used by Strapi.

Many types of attributes are available:

- scalar types (e.g. strings, dates, numbers, booleans, etc.),
- Strapi-specific types, such as:
  - `media` for files uploaded through the [Media library](/cms/features/content-type-builder#media)
  - `relation` to describe a [relation](#relations) between content-types
  - `customField` to describe [custom fields](#custom-fields) and their specific keys
  - `component` to define a [component](#components-json) (i.e. a content structure usable in multiple content-types)
  - `dynamiczone` to define a [dynamic zone](#dynamic-zones) (i.e. a flexible space based on a list of components)
  - and the `locale` and `localizations` types, only used by the [Internationalization (i18n) plugin](/cms/features/internationalization)

The `type` parameter of an attribute should be one of the following values:

| Type categories | Available types |
|------|-------|
| String types | <ul><li>`string`</li> <li>`text`</li> <li>`richtext`</li><li>`enumeration`</li> <li>`email`</li><li>`password`</li><li>[`uid`](#uid-type)</li></ul> |
| Date types | <ul><li>`date`</li> <li>`time`</li> <li>`datetime`</li> <li>`timestamp`</li></ul> |
| Number types | <ul><li>`integer`</li><li>`biginteger`</li><li>`float`</li> <li>`decimal`</li></ul> |
| Other generic types |<ul><li>`boolean`</li><li>`json`</li></ul> |
| Special types unique to Strapi |<ul><li>`media`</li><li>[`relation`](#relations)</li><li>[`customField`](#custom-fields)</li><li>[`component`](#components-json)</li><li>[`dynamiczone`](#dynamic-zones)</li></ul> |
| Internationalization (i18n)-related types<br /><br />_Can only be used if the [i18n](/cms/features/internationalization) is enabled on the content-type_|<ul><li>`locale`</li><li>`localizations`</li></ul> |

#### Validations

Basic validations can be applied to attributes using the following parameters:

| Parameter | Type    | Description                                                                                               | Default |
| -------------- | ------- | --------------------------------------------------------------------------------------------------------- | ------- |
| `required`     | Boolean | If `true`, adds a required validator for this property                                                     | `false` |
| `max`          | Integer | Checks if the value is greater than or equal to the given maximum                                        | -       |
| `min`          | Integer | Checks if the value is less than or equal to the given minimum                                           | -       |
| `minLength`    | Integer | Minimum number of characters for a field input value                                                      | -       |
| `maxLength`    | Integer | Maximum number of characters for a field input value                                                      | -       |
| `private`      | Boolean | If `true`, the attribute will be removed from the server response.<br/><br/>💡 This is useful to hide sensitive data. | `false` |
| `configurable` | Boolean | If `false`, the attribute isn't configurable from the Content-type Builder plugin.                         | `true`  |

```json title="./src/api/[api-name]/content-types/restaurant/schema.json"

{
  // ...
  "attributes": {
    "title": {
      "type": "string",
      "minLength": 3,
      "maxLength": 99,
      "unique": true
    },
    "description": {
      "default": "My description",
      "type": "text",
      "required": true
    },
    "slug": {
      "type": "uid",
      "targetField": "title"
    }
    // ...
  }
}
```

#### Database validations and settings

:::caution 🚧 This API is considered experimental.
These settings should be reserved to an advanced usage, as they might break some features. There are no plans to make these settings stable.
:::

Database validations and settings are custom options passed directly onto the `tableBuilder` Knex.js function during schema migrations. Database validations allow for an advanced degree of control for setting custom column settings. The following options are set in a `column: {}` object per attribute:

| Parameter     | Type    | Description                                                                                   | Default |
| ------------- | ------- | --------------------------------------------------------------------------------------------- | ------- |
| `name`        | string  | Changes the name of the column in the database                                                | -       |
| `defaultTo`   | string  | Sets the database `defaultTo`, typically used with `notNullable`                              | -       |
| `notNullable` | boolean | Sets the database `notNullable`, ensures that columns cannot be null                          | `false` |
| `unsigned`    | boolean | Only applies to number columns, removes the ability to go negative but doubles maximum length | `false` |
| `unique`      | boolean | Enforces database level unique, caution when using with draft & publish feature               | `false` |
| `type`        | string  | Changes the database type, if `type` has arguments, you should pass them in `args`            | -       |
| `args`        | array   | Arguments passed into the Knex.js function that changes things like `type`                    | `[]`    |

```json title="./src/api/[api-name]/content-types/restaurant/schema.json"

{
  // ...
  "attributes": {
    "title": {
      "type": "string",
      "minLength": 3,
      "maxLength": 99,
      "unique": true,
      "column": {
        "unique": true // enforce database unique also
      }
    },
    "description": {
      "default": "My description",
      "type": "text",
      "required": true,
      "column": {
        "defaultTo": "My description", // set database level default
        "notNullable": true // enforce required at database level, even for drafts
      }
    },
    "rating": {
      "type": "decimal",
      "default": 0,
      "column": {
        "defaultTo": 0,
        "type": "decimal", // using the native decimal type but allowing for custom precision
        "args": [
          6,1 // using custom precision and scale
        ]
      }
    }
    // ...
  }
}
```

#### `uid` type

The `uid` type is used to automatically prefill the field value in the admin panel with a unique identifier (UID) (e.g. slugs for articles) based on 2 optional parameters:

- `targetField` (string): If used, the value of the field defined as a target is used to auto-generate the UID.
- `options` (string): If used, the UID is generated based on a set of options passed to 

</Tabs>

#### Custom fields

[Custom fields](/cms/features/custom-fields) extend Strapi’s capabilities by adding new types of fields to content-types. Custom fields are explicitly defined in the [attributes](#model-attributes) of a model with `type: customField`.

Custom fields' attributes also show the following specificities:

- a `customField` attribute whose value acts as a unique identifier to indicate which registered custom field should be used. Its value follows:
   - either the `plugin::plugin-name.field-name` format if a plugin created the custom field 
   - or the `global::field-name` format for a custom field specific to the current Strapi application
- and additional parameters depending on what has been defined when registering the custom field (see [custom fields documentation](/cms/features/custom-fields)).

```json title="./src/api/[apiName]/[content-type-name]/content-types/schema.json"

{
  // …
  "attributes": {
    "attributeName": { // attributeName would be replaced by the actual attribute name
      "type": "customField",
      "customField": "plugin::color-picker.color",
      "options": {
        "format": "hex"
      }
    }
  }
  // …
}
```

#### Components {#components-json}

Component fields create a relation between a content-type and a component structure. Components are explicitly defined in the [attributes](#model-attributes) of a model with `type: 'component'` and accept the following additional parameters:

| Parameter    | Type    | Description                                                                              |
| ------------ | ------- | ---------------------------------------------------------------------------------------- |
| `repeatable` | Boolean | Could be `true` or `false` depending on whether the component is repeatable or not       |
| `component`  | String  | Define the corresponding component, following this format:<br/>`<category>.<componentName>`  |

```json title="./src/api/[apiName]/restaurant/content-types/schema.json"

{
  "attributes": {
    "openinghours": {
      "type": "component",
      "repeatable": true,
      "component": "restaurant.openinghours"
    }
  }
}
```

#### Dynamic zones

Dynamic zones create a flexible space in which to compose content, based on a mixed list of [components](#components-json).

Dynamic zones are explicitly defined in the [attributes](#model-attributes)  of a model with `type: 'dynamiczone'`. They also accept a `components` array, where each component should be named following this format: `<category>.<componentName>`.

```json title="./src/api/[api-name]/content-types/article/schema.json"

{
  "attributes": {
    "body": {
      "type": "dynamiczone",
      "components": ["article.slider", "article.content"]
    }
  }
}
```

### Model options

The `options` key is used to define specific behaviors and accepts the following parameter:

| Parameter           | Type             | Description                                                                                                                                                                                                                                                                                                        |
|---------------------|------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `privateAttributes` | Array of strings | Allows treating a set of attributes as private, even if they're not actually defined as attributes in the model. It could be used to remove them from API responses timestamps. <br /><br /> The `privateAttributes` defined in the model are merged with the `privateAttributes` defined in the global Strapi configuration. |
| `draftAndPublish`   | Boolean          | Enables the draft and publish feature. <br /><br /> Default value: `true` (`false` if the content-type is created from the interactive CLI).                                                                                                                                                                                    |
| `populateCreatorFields` | Boolean | Populates `createdBy` and `updatedBy` fields in responses returned by the REST API (see [guide](/cms/api/rest/guides/populate-creator-fields) for more details).<br/><br/>Default value: `false`. |

```json title="./src/api/[api-name]/content-types/restaurant/schema.json"

{
  "options": {
    "privateAttributes": ["id", "createdAt"],
    "draftAndPublish": true
  }
}
```

## Lifecycle hooks

Lifecycle hooks are functions that get triggered when Strapi queries are called. They are triggered automatically when managing content through the administration panel or when developing custom code using `queries`·

Lifecycle hooks can be customized declaratively or programmatically.

:::caution
Lifecycles hooks are not triggered when using directly the 

</Tabs>

Using the database layer API, it's also possible to register a subscriber and listen to events programmatically:

```js title="./src/index.js"
module.exports = {
  async bootstrap({ strapi }) {
// registering a subscriber
    strapi.db.lifecycles.subscribe({
      models: [], // optional;

      beforeCreate(event) {
        const { data, where, select, populate } = event.params;

        event.state = 'doStuffAfterWards';
      },

      afterCreate(event) {
        if (event.state === 'doStuffAfterWards') {
        }

        const { result, params } = event;

        // do something to the result
      },
    });

    // generic subscribe for generic handling
    strapi.db.lifecycles.subscribe((event) => {
      if (event.action === 'beforeCreate') {
        // do something
      }
    });
  }
}
```



# Policies
Source: https://docs.strapi.io/cms/backend-customization/policies

# Policies

Policies are functions that execute specific logic on each request before it reaches the [controller](/cms/backend-customization/controllers). They are mostly used for securing business logic.

Each [route](/cms/backend-customization/routes) of a Strapi project can be associated to an array of policies. For example, a policy named `is-admin` could check that the request is sent by an admin user, and restrict access to critical routes.

Policies can be global or scoped. [Global policies](#global-policies) can be associated to any route in the project. Scoped policies only apply to a specific [API](#api-policies) or [plugin](#plugin-policies).

<figure style={{width: '100%', margin: '0'}}>
  <img src="/img/assets/backend-customization/diagram-routes.png" alt="Simplified Strapi backend diagram with routes and policies highlighted" />
  <em><figcaption style={{fontSize: '12px'}}>The diagram represents a simplified version of how a request travels through the Strapi back end, with policies and routes highlighted. The backend customization introduction page includes a complete, <a href="/cms/backend-customization#interactive-diagram">interactive diagram</a>.</figcaption></em>
</figure>

## Implementation

A new policy can be implemented:

- with the [interactive CLI command `strapi generate`](/cms/cli#strapi-generate) 
- or manually by creating a JavaScript file in the appropriate folder (see [project structure](/cms/project-structure)):
  - `./src/policies/` for global policies
  - `./src/api/[api-name]/policies/` for API policies
  - `./src/plugins/[plugin-name]/policies/` for plugin policies

<br/>

Global policy implementation example:

</Tabs>

`policyContext` is a wrapper around the [controller](/cms/backend-customization/controllers) context. It adds some logic that can be useful to implement a policy for both REST and GraphQL.

<br/>

Policies can be configured using a `config` object:

</Tabs>

## Usage

To apply policies to a route, add them to its configuration object (see [routes documentation](/cms/backend-customization/routes#policies)).

Policies are called different ways depending on their scope:

- use `global::policy-name` for [global policies](#global-policies)
- use `api::api-name.policy-name` for [API policies](#api-policies)
- use `plugin::plugin-name.policy-name` for [plugin policies](#plugin-policies)

:::tip
To list all the available policies, run `yarn strapi policies:list`.
:::

### Global policies

Global policies can be associated to any route in a project.

</Tabs>

### Plugin policies

Plugins can add and expose policies to an application. For example, the [Users & Permissions feature](/cms/features/users-permissions) comes with policies to ensure that the user is authenticated or has the rights to perform an action:

</Tabs>

### API policies

API policies are associated to the routes defined in the API where they have been declared.

</Tabs>

To use a policy in another API, reference it with the following syntax: `api::[apiName].[policyName]`:

</Tabs>



# Requests and Responses
Source: https://docs.strapi.io/cms/backend-customization/requests-responses

# Requests and Responses

The Strapi back end server is based on . When you send requests through the [REST API](/cms/api/rest), a context object (`ctx`) is passed to every element of the Strapi back end (e.g., [policies](/cms/backend-customization/policies), [controllers](/cms/backend-customization/controllers), [services](/cms/backend-customization/services)).

`ctx` includes 3 main objects:

- [`ctx.request`](#ctxrequest) for information about the request sent by the client making an API request,
- [`ctx.state`](#ctxstate) for information about the state of the request within the Strapi back end,
- and [`ctx.response`](#ctxresponse) for information about the response that the server will return.

:::tip
The request's context can also be accessed from anywhere in the code with the [`strapi.requestContext` function](#accessing-the-request-context-anywhere).
:::

:::info
In addition to the concepts and parameters described in the following documentation, you might find additional information in the ,  and .
:::

<figure style={{width: '100%', margin: '0'}}>
  <img src="/img/assets/backend-customization/diagram-requests-responses.png" alt="Simplified Strapi backend diagram with requests and responses highlighted" />
  <em><figcaption style={{fontSize: '12px'}}>The diagram represents a simplified version of how a request travels through the Strapi back end, with requests and responses highlighted. The backend customization introduction page includes a complete, <a href="/cms/backend-customization#interactive-diagram">interactive diagram</a>.</figcaption></em>
</figure>

## `ctx.request`

The `ctx.request` object contains the following parameters:

| Parameter             | Description                                                                                  | Type     |
| --------------------- | -------------------------------------------------------------------------------------------- | -------- |
| `ctx.request.body`    | Parsed version of the body. | `Object` |
| `ctx.request.files`   | Files sent with the request. | `Array` |
| `ctx.request.headers` | Headers sent with the request. | `Object` |
| `ctx.request.host`    | Host part of the URL, including the port. | `String` |
| `ctx.request.hostname`| Host part of the URL, excluding the port. | `String` |
| `ctx.request.href`    | Complete URL of the requested resource, including the protocol, domain, port (if specified), path, and query parameters. | `String` |
| `ctx.request.ip`      | IP of the person sending the request.| `String` |
| `ctx.request.ips`     | When `X-Forwarded-For` is present and `app.proxy` is enabled, an array of IPs is returned, ordered from upstream to downstream. <br /><br />For example if the value were "client, proxy1, proxy2", you would receive the `["client", "proxy1", "proxy2"]` array. | `Array` |
| `ctx.request.method`  | Request method (e.g., `GET`, `POST`). | `String` |
| `ctx.request.origin`  | URL part before the first `/`. | `String` |
| `ctx.request.params`  | Parameters sent in the URL.<br /><br/>For example, if the internal URL is `/restaurants/:id`, whatever you replace `:id` in the real request becomes accessible through `ctx.request.params.id`. | `Object` |
| `ctx.request.path`    | Path of the requested resource, excluding the query parameters. | `String` |
| `ctx.request.protocol`| Protocol being used (e.g., `https` or `http`). | `String` |
| `ctx.request.query`   | Strapi-specific [query parameters](#ctxrequestquery). | `Object` |
| `ctx.request.subdomains`| Subdomains included in the URL.<br /><br />For example, if the domain is `tobi.ferrets.example.com`, the value is the following array: `["ferrets", "tobi"]`. | `Array` |
| `ctx.request.url`     | Path and query parameters of the requested resource, excluding the protocol, domain, and port. | `String` |

<details>
<summary>Differences between protocol, origin, url, href, path, host, and hostname :</summary>

Given an API request sent to the `https://example.com:1337/api/restaurants?id=123` URL, here is what different parameters of the `ctx.request` object return:

| Parameter  | Returned value                                    |
| ---------- | ------------------------------------------------- |
| `ctx.request.href`     | `https://example.com:1337/api/restaurants?id=123` |
| `ctx.request.protocol` | `https`                                           |
| `ctx.request.host`     | `localhost:1337`                                  |
| `ctx.request.hostname` | `localhost`                                       |
| `ctx.request.origin`   | `https://example.com:1337`                          |
| `ctx.request.url`      | `/api/restaurants?id=123`                         |
| `ctx.request.path`     | `/api/restaurants`                                |

</details>

### `ctx.request.query`

`ctx.request` provides a `query` object that gives access to Strapi query parameters. The following table lists available parameters with a short description and a link to the relevant REST API documentation section (see [REST API parameters](/cms/api/rest/parameters) for more information):

| Parameter | Description                                                                                                                                            | Type                 |
| -------------------------------------| --------------------------------------------------------------------------------------------------------------------------- | -------------------- |
| `ctx.request.query`<br />`ctx.query` | The whole query object.                                                                                                    | `Object`             |
| `ctx.request.query.sort`             | Parameters to [sort the response](/cms/api/rest/sort-pagination.md#sorting)                                            | `String` or `Array`  |
| `ctx.request.query.filters`          | Parameters to [filter the response](/cms/api/rest/filters)                                | `Object`             |
| `ctx.request.query.populate`         | Parameters to [populate relations, components, or dynamic zones](/cms/api/rest/populate-select#population)             | `String` or `Object` |
| `ctx.request.query.fields`           | Parameters to [select only specific fields to return with the response](/cms/api/rest/populate-select#field-selection) | `Array`              |
| `ctx.request.query.pagination`       | Parameter to [page through entries](/cms/api/rest/sort-pagination.md#pagination)                                       | `Object`             |
| `ctx.request.query.publicationState` | Parameter to [select the Draft & Publish state](/cms/api/rest/status)            | `String`             |
| `ctx.request.query.locale`           | Parameter to [select one or multiple locales](/cms/api/rest/locale)                         | `String` or `Array`  |

## `ctx.state`

The `ctx.state` object gives access to the state of the request within the Strapi back end, including specific values about the [user](#ctxstateuser), [authentication](#ctxstateauth), [route](#ctxstateroute):

| Parameter                  | Description                                                                 | Type     |
| ---------------------------|---------------------------------------------------------------------------- | -------- |
| `ctx.state.isAuthenticated`| Returns whether the current user is authenticated in any way.               | `Boolean` |

### `ctx.state.user`

The `ctx.state.user` object gives access to information about the user performing the request and includes the following parameters:

| Parameter | Description                                                                                  | Type     |
| ----------| -------------------------------------------------------------------------------------------- | -------- |
| `ctx.state.user`| User's information. Only one relation is populated.                   | `Object` |
| `ctx.state.user.role`| The user's role | `Object` |
<!-- which type of "user" are we talking about here? a "U&P"-related user? -->

### `ctx.state.auth`

The `ctx.state.auth` object gives access to information related to the authentication and includes the following parameters:

| Parameter                     | Description                                                                                  | Type     |
| ------------------------------| -------------------------------------------------------------------------------------------- | -------- |
| `ctx.state.auth.strategy`     | Information about the currently used authentication strategy ([Users & Permissions plugin](/cms/features/users-permissions) or [API tokens](/cms/features/api-tokens)) | `Object` |
| `ctx.state.auth.strategy.name`| Name of the currently used strategy                                                          | `String` |
| `ctx.state.auth.credentials`  | The user's credentials                                                                      | `String` |
<!-- ? ctx.state.auth.strategy seems to include the authenticate and verify functions. should we document them somewhere? -->
<!-- ? not sure what credentials are used for ? -->

### `ctx.state.route`

The `ctx.state.route` object gives access to information related to the current route and includes the following parameters:

| Parameter | Description                                                                                  | Type     |
| ----------| -------------------------------------------------------------------------------------------- | -------- |
| `ctx.state.route.method`| Method used to access the current route. | `String` |
| `ctx.state.route.path`| Path of the current route. | `String` |
| `ctx.state.route.config`| Configuration information about the current route. | `Object` |
| `ctx.state.route.handler`| Handler (controller) of the current route. | `Object` |
| `ctx.state.route.info`| Additional information about the current route, such as the apiName and the API request type. | `Object` |
| `ctx.state.route.info.apiName`| Name of the used API.  | `String` |
| `ctx.state.route.info.type`| Type of the used API. | `String` |

## `ctx.response`

The `ctx.response` object gives access to information related to the response that the server will return and includes the following parameters:

| Parameter | Description                                                                                  | Type     |
| ----------| -------------------------------------------------------------------------------------------- | -------- |
| `ctx.response.body`| Body of the response. | `Any` |
| `ctx.response.status` | Status code of the response. | `Integer` |
| `ctx.response.message`| Status message of the response.<br/><br />By default, `response.message` is associated with `response.status`. | `String` |
| `ctx.response.header`<br />`ctx.response.headers`| Header(s) sent with the response. | `Object` |
| `ctx.response.length`|  header value as a number when present, or deduces it from `ctx.body` when possible; otherwise, returns `undefined`. | `Integer` |
| `ctx.response.redirect`<br />`ctx.response.redirect(url, [alt])` | Performs a `302` redirect to the URL. The string "back" is special-cased to provide Referrer support; when Referrer is not present, alt or "/" is used.<br /><br />Example: `ctx.response.redirect('back', '/index.html');` | `Function` |
| `ctx.response.attachment`<br /><br />`ctx.response.attachment([filename], [options])` | Sets  header to "attachment" to signal the client to prompt for download. Optionally specify the filename of the download and some . | `Function` |
| `ctx.response.type`|  header, void of parameters such as "charset". | `String` |
| `ctx.response.lastModified`|  header as a Date, if it exists. | `DateTime` |
| `ctx.response.etag`| Sets the  of a response including the wrapped "s.<br/>There is no corresponding `response.etag` getter. | `String` |
<!-- I don't understand what these 5 last lines above mean, just copied and pasted them from the user's PR 🤷 — piwi -->

## Accessing the request context anywhere

Strapi exposes a way to access the current request context from anywhere in the code (e.g. lifecycle functions).

You can access the request as follows:

```js
const ctx = strapi.requestContext.get();
```

You should only use this inside of functions that will be called in the context of an HTTP request.

```js
// correct

const service = {
  myFunction() {
    const ctx = strapi.requestContext.get();
    console.log(ctx.state.user);
  },
};

// incorrect
const ctx = strapi.requestContext.get();

const service = {
  myFunction() {
    console.log(ctx.state.user);
  },
};
```

**Example:**

```js title="./api/test/content-types/article/lifecycles.js"

module.exports = {
  beforeUpdate() {
    const ctx = strapi.requestContext.get();

    console.log('User info in service: ', ctx.state.user);
  },
};
```

:::note
Strapi uses a Node.js feature called  to make the context available anywhere.
:::



# Routes
Source: https://docs.strapi.io/cms/backend-customization/routes

# Routes

Requests sent to Strapi on any URL are handled by routes. By default, Strapi generates routes for all the content-types (see [REST API documentation](/cms/api/rest)). Routes can be [added](#implementation) and configured:

- with [policies](#policies), which are a way to block access to a route,
- and with [middlewares](#middlewares), which are a way to control and change the request flow and the request itself.

Once a route exists, reaching it executes some code handled by a controller (see [controllers documentation](/cms/backend-customization/controllers)). To view all existing routes and their hierarchal order, you can run `yarn strapi routes:list` (see [CLI reference](/cms/cli)).

<figure style={{width: '100%', margin: '0'}}>
  <img src="/img/assets/backend-customization/diagram-routes.png" alt="Simplified Strapi backend diagram with routes highlighted" />
  <em><figcaption style={{fontSize: '12px'}}>The diagram represents a simplified version of how a request travels through the Strapi back end, with routes highlighted. The backend customization introduction page includes a complete, <a href="/cms/backend-customization#interactive-diagram">interactive diagram</a>.</figcaption></em>
</figure>

## Implementation

Implementing a new route consists in defining it in a router file within the `./src/api/[apiName]/routes` folder (see [project structure](/cms/project-structure)).

There are 2 different router file structures, depending on the use case:

- configuring [core routers](#configuring-core-routers)
- or creating [custom routers](#creating-custom-routers).

### Configuring core routers

Core routers (i.e. `find`, `findOne`, `create`, `update`, and `delete`) correspond to [default routes](/cms/api/rest#endpoints) automatically created by Strapi when a new [content-type](/cms/backend-customization/models#model-creation) is created.

Strapi provides a `createCoreRouter` factory function that automatically generates the core routers and allows:

- passing in configuration options to each router
- and disabling some core routers to [create custom ones](#creating-custom-routers).

A core router file is a JavaScript file exporting the result of a call to `createCoreRouter` with the following parameters:

| Parameter | Description                                                                                  | Type     |
| ----------| -------------------------------------------------------------------------------------------- | -------- |
| `prefix`  | Allows passing in a custom prefix to add to all routers for this model (e.g. `/test`)        | `String` |
| `only`    | Core routes that will only be loaded<br /><br/>Anything not in this array is ignored.        | `Array` | -->
| `except`  | Core routes that should not be loaded<br/><br />This is functionally the opposite of the `only` parameter. | `Array` |
| `config`  | Configuration to handle [policies](#policies), [middlewares](#middlewares) and [public availability](#public-routes) for the route | `Object` |

<br/>

</Tabs>

<br />

Generic implementation example:

</Tabs>

This only allows a `GET` request on the `/restaurants` path from the core `find` [controller](/cms/backend-customization/controllers) without authentication.

### Creating custom routers

Creating custom routers consists in creating a file that exports an array of objects, each object being a route with the following parameters:

| Parameter                  | Description                                                                      | Type     |
| -------------------------- | -------------------------------------------------------------------------------- | -------- |
| `method`                   | Method associated to the route (i.e. `GET`, `POST`, `PUT`, `DELETE` or `PATCH`)  | `String` |
| `path`                     | Path to reach, starting with a forward-leading slash (e.g. `/articles`)| `String` |
| `handler`                  | Function to execute when the route is reached.<br/>Should follow this syntax: `<controllerName>.<actionName>` | `String` |
| `config`<br /><br />_Optional_ | Configuration to handle [policies](#policies), [middlewares](#middlewares) and [public availability](#public-routes) for the route<br/><br/>           | `Object` |

<br/>

Dynamic routes can be created using parameters and regular expressions. These parameters will be exposed in the `ctx.params` object. For more details, please refer to the 

</Tabs>

</details>

## Configuration

Both [core routers](#configuring-core-routers) and [custom routers](#creating-custom-routers) have the same configuration options. The routes configuration is defined in a `config` object that can be used to handle [policies](#policies) and [middlewares](#middlewares) or to [make the route public](#public-routes).

### Policies

[Policies](/cms/backend-customization/policies) can be added to a route configuration:

- by pointing to a policy registered in `./src/policies`, with or without passing a custom configuration
- or by declaring the policy implementation directly, as a function that takes `policyContext` to extend 

</Tabs>

</TabItem>

</Tabs>

</TabItem>

</Tabs>

### Middlewares

[Middlewares](/cms/backend-customization/middlewares) can be added to a route configuration:

- by pointing to a middleware registered in `./src/middlewares`, with or without passing a custom configuration
- or by declaring the middleware implementation directly, as a function that takes 

</Tabs>

</TabItem>

</Tabs>

</TabItem>

</Tabs>

### Public routes

By default, routes are protected by Strapi's authentication system, which is based on [API tokens](/cms/features/api-tokens) or on the use of the [Users & Permissions plugin](/cms/features/users-permissions).

In some scenarios, it can be useful to have a route publicly available and control the access outside of the normal Strapi authentication system. This can be achieved by setting the `auth` configuration parameter of a route to `false`:

</Tabs>

</TabItem>

</Tabs>

</TabItem>

</Tabs>



# Services
Source: https://docs.strapi.io/cms/backend-customization/services

# Services

Services are a set of reusable functions. They are particularly useful to respect the "don’t repeat yourself" (DRY) programming concept and to simplify [controllers](/cms/backend-customization/controllers.md) logic.

<figure style={{width: '100%', margin: '0'}}>
  <img src="/img/assets/backend-customization/diagram-controllers-services.png" alt="Simplified Strapi backend diagram with services highlighted" />
  <em><figcaption style={{fontSize: '12px'}}>The diagram represents a simplified version of how a request travels through the Strapi back end, with services highlighted. The backend customization introduction page includes a complete, <a href="/cms/backend-customization#interactive-diagram">interactive diagram</a>.</figcaption></em>
</figure>

## Implementation

Services can be [generated or added manually](#adding-a-new-service). Strapi provides a `createCoreService` factory function that automatically generates core services and allows building custom ones or [extend or replace the generated services](#extending-core-services).

### Adding a new service

A new service can be implemented:

- with the [interactive CLI command `strapi generate`](/cms/cli#strapi-generate)
- or manually by creating a JavaScript file in the appropriate folder (see [project structure](/cms/project-structure.md)):
  - `./src/api/[api-name]/services/` for API services
  - or `./src/plugins/[plugin-name]/services/` for [plugin services](/cms/plugins-development/server-api#services).

To manually create a service, export a factory function that returns the service implementation (i.e. an object with methods). This factory function receives the `strapi` instance:

</Tabs>

:::strapi Document Service API
To get started creating your own services, see Strapi's built-in functions in the [Document Service API](/cms/api/document-service) documentation.
:::

<details>

<summary>Example of a custom email service (using Nodemailer)</summary>

The goal of a service is to store reusable functions. A `sendNewsletter` service could be useful to send emails from different functions in our codebase that have a specific purpose:

</Tabs>

The service is now available through the `strapi.service('api::restaurant.restaurant').sendNewsletter(...args)` global variable. It can be used in another part of the codebase, like in the following controller:

</Tabs>

</details>

:::note
When a new [content-type](/cms/backend-customization/models.md#content-types) is created, Strapi builds a generic service with placeholder code, ready to be customized.
:::

### Extending core services

Core services are created for each content-type and could be used by [controllers](/cms/backend-customization/controllers.md) to execute reusable logic through a Strapi project. Core services can be customized to implement your own logic. The following code examples should help you get started.

:::tip
A core service can be replaced entirely by [creating a custom service](#adding-a-new-service) and naming it the same as the core service (e.g. `find`, `findOne`, `create`, `update`, or `delete`).
:::

<details>
<summary>Collection type examples</summary>

</Tabs>

</details>

<details>

<summary>Single type examples</summary>

</Tabs>

</details>

## Usage

Once a service is created, it's accessible from [controllers](/cms/backend-customization/controllers.md) or from other services:

```js
// access an API service
strapi.service('api::apiName.serviceName').FunctionName();
// access a plugin service
strapi.service('plugin::pluginName.serviceName').FunctionName();
```

In the syntax examples above, `serviceName` is the name of the service file for API services or the name used to export the service file to `services/index.js` for plugin services.

:::tip
To list all the available services, run `yarn strapi services:list`.
:::



# Webhooks
Source: https://docs.strapi.io/cms/backend-customization/webhooks

# Webhooks

Webhook is a construct used by an application to notify other applications that an event occurred. More precisely, webhook is a user-defined HTTP callback. Using a webhook is a good way to tell third-party providers to start some processing (CI, build, deployment ...).

The way a webhook works is by delivering information to a receiving application through HTTP requests (typically POST requests).

## User content-type webhooks

To prevent from unintentionally sending any user's information to other applications, Webhooks will not work for the User content-type.
If you need to notify other applications about changes in the Users collection, you can do so by creating [Lifecycle hooks](/cms/backend-customization/models#lifecycle-hooks) using the `./src/index.js` example.

## Available configurations

You can set webhook configurations inside the file `./config/server`.

- `webhooks`
  - `defaultHeaders`: You can set default headers to use for your webhook requests. This option is overwritten by the headers set in the webhook itself.

**Example configuration**

</Tabs>

## Securing your webhooks

Most of the time, webhooks make requests to public URLs, therefore it is possible that someone may find that URL and send it wrong information.

To prevent this from happening you can send a header with an authentication token. Using the Admin panel you would have to do it for every webhook.
Another way is to define `defaultHeaders` to add to every webhook request.

You can configure these global headers by updating the file at `./config/server`:

</Tabs>

</TabItem>

</Tabs>

</TabItem>

</Tabs>

If you are developing the webhook handler yourself you can now verify the token by reading the headers.

<!--- ### Usage

To access the webhook configuration panel, go to `Settings` > `Webhooks`.

![Webhooks home](/img/assets/concepts/webhooks/home.png)

#### Create a webhook

Click on `Add new webhook` and fill in the form.

![create](/img/assets/concepts/webhooks/create.png)

#### Trigger a webhook

You can test out a webhook with a test event: `trigger-test`. Open the webhook you want to trigger.

![Trigger ](/img/assets/concepts/webhooks/trigger_start.png)

Click on the `Trigger` button.

![Trigger pending](/img/assets/concepts/webhooks/trigger.png)

You will see the trigger request appear and get the result.

![Trigger result](/img/assets/concepts/webhooks/trigger_result.png)

#### Enable or disable a webhook

You can enable or disable a webhook from the list view directly.

![Disable webhook](/img/assets/concepts/webhooks/disable.png)

#### Update a webhook

You can edit any webhook by clicking on the `pen` icon in the webhook list view.

![Update webhook](/img/assets/concepts/webhooks/list.png)

#### Delete a webhook

You can delete a webhook by clicking on the `trash` icon.

![Delete webhook](/img/assets/concepts/webhooks/disable.png) --->

## Available events

By default Strapi webhooks can be triggered by the following events:

| Name              | Description                                           |
| ----------------- | ----------------------------------------------------- |
| [`entry.create`](#entrycreate)   | Triggered when a Content Type entry is created.       |
| [`entry.update`](#entryupdate)    | Triggered when a Content Type entry is updated.       |
| [`entry.delete`](#entrydelete)    | Triggered when a Content Type entry is deleted.       |
| [`entry.publish`](#entrypublish)   | Triggered when a Content Type entry is published.\*   |
| [`entry.unpublish`](#entryunpublish) | Triggered when a Content Type entry is unpublished.\* |
| [`media.create`](#mediacreate)    | Triggered when a media is created.                    |
| [`media.update`](#mediaupdate)    | Triggered when a media is updated.                    |
| [`media.delete`](#mediadelete)    | Triggered when a media is deleted.                    |
| [`review-workflows.updateEntryStage`](#review-workflowsupdateentrystage) | Triggered when content is moved between review stages (see [review workflows](/cms/features/review-workflows#configuration)).<br />This event is only available with the  edition of Strapi. |
| [`releases.publish`](#releases-publish) | Triggered when a Release is published (see [Releases](/cms/features/releases)).<br />This event is only available with the  or  plan of Strapi CMS. |

\*only when `draftAndPublish` is enabled on this Content Type.

## Payloads

:::tip NOTE
Private fields and s are not sent in the payload.
:::

### Headers

When a payload is delivered to your webhook's URL, it will contain specific headers:

| Header           | Description                                |
| ---------------- | ------------------------------------------ |
| `X-Strapi-Event` | Name of the event type that was triggered. |

### `entry.create`

This event is triggered when a new entry is created.

**Example payload**

```json
{
  "event": "entry.create",
  "createdAt": "2020-01-10T08:47:36.649Z",
  "model": "address",
  "entry": {
    "id": 1,
    "geolocation": {},
    "city": "Paris",
    "postal_code": null,
    "category": null,
    "full_name": "Paris",
    "createdAt": "2020-01-10T08:47:36.264Z",
    "updatedAt": "2020-01-10T08:47:36.264Z",
    "cover": null,
    "images": []
  }
}
```

### `entry.update`

This event is triggered when an entry is updated.

**Example payload**

```json
{
  "event": "entry.update",
  "createdAt": "2020-01-10T08:58:26.563Z",
  "model": "address",
  "entry": {
    "id": 1,
    "geolocation": {},
    "city": "Paris",
    "postal_code": null,
    "category": null,
    "full_name": "Paris",
    "createdAt": "2020-01-10T08:47:36.264Z",
    "updatedAt": "2020-01-10T08:58:26.210Z",
    "cover": null,
    "images": []
  }
}
```

### `entry.delete`

This event is triggered when an entry is deleted.

**Example payload**

```json
{
  "event": "entry.delete",
  "createdAt": "2020-01-10T08:59:35.796Z",
  "model": "address",
  "entry": {
    "id": 1,
    "geolocation": {},
    "city": "Paris",
    "postal_code": null,
    "category": null,
    "full_name": "Paris",
    "createdAt": "2020-01-10T08:47:36.264Z",
    "updatedAt": "2020-01-10T08:58:26.210Z",
    "cover": null,
    "images": []
  }
}
```

### `entry.publish`

This event is triggered when an entry is published.

**Example payload**

```json
{
  "event": "entry.publish",
  "createdAt": "2020-01-10T08:59:35.796Z",
  "model": "address",
  "entry": {
    "id": 1,
    "geolocation": {},
    "city": "Paris",
    "postal_code": null,
    "category": null,
    "full_name": "Paris",
    "createdAt": "2020-01-10T08:47:36.264Z",
    "updatedAt": "2020-01-10T08:58:26.210Z",
    "publishedAt": "2020-08-29T14:20:12.134Z",
    "cover": null,
    "images": []
  }
}
```

### `entry.unpublish`

This event is triggered when an entry is unpublished.

**Example payload**

```json
{
  "event": "entry.unpublish",
  "createdAt": "2020-01-10T08:59:35.796Z",
  "model": "address",
  "entry": {
    "id": 1,
    "geolocation": {},
    "city": "Paris",
    "postal_code": null,
    "category": null,
    "full_name": "Paris",
    "createdAt": "2020-01-10T08:47:36.264Z",
    "updatedAt": "2020-01-10T08:58:26.210Z",
    "publishedAt": null,
    "cover": null,
    "images": []
  }
}
```

### `media.create`

This event is triggered when you upload a file on entry creation or through the media interface.

**Example payload**

```json
{
  "event": "media.create",
  "createdAt": "2020-01-10T10:58:41.115Z",
  "media": {
    "id": 1,
    "name": "image.png",
    "hash": "353fc98a19e44da9acf61d71b11895f9",
    "sha256": "huGUaFJhmcZRHLcxeQNKblh53vtSUXYaB16WSOe0Bdc",
    "ext": ".png",
    "mime": "image/png",
    "size": 228.19,
    "url": "/uploads/353fc98a19e44da9acf61d71b11895f9.png",
    "provider": "local",
    "provider_metadata": null,
    "createdAt": "2020-01-10T10:58:41.095Z",
    "updatedAt": "2020-01-10T10:58:41.095Z",
    "related": []
  }
}
```

### `media.update`

This event is triggered when you replace a media or update the metadata of a media through the media interface.

**Example payload**

```json
{
  "event": "media.update",
  "createdAt": "2020-01-10T10:58:41.115Z",
  "media": {
    "id": 1,
    "name": "image.png",
    "hash": "353fc98a19e44da9acf61d71b11895f9",
    "sha256": "huGUaFJhmcZRHLcxeQNKblh53vtSUXYaB16WSOe0Bdc",
    "ext": ".png",
    "mime": "image/png",
    "size": 228.19,
    "url": "/uploads/353fc98a19e44da9acf61d71b11895f9.png",
    "provider": "local",
    "provider_metadata": null,
    "createdAt": "2020-01-10T10:58:41.095Z",
    "updatedAt": "2020-01-10T10:58:41.095Z",
    "related": []
  }
}
```

### `media.delete`

This event is triggered only when you delete a media through the media interface.

**Example payload**

```json
{
  "event": "media.delete",
  "createdAt": "2020-01-10T11:02:46.232Z",
  "media": {
    "id": 11,
    "name": "photo.png",
    "hash": "43761478513a4c47a5fd4a03178cfccb",
    "sha256": "HrpDOKLFoSocilA6B0_icA9XXTSPR9heekt2SsHTZZE",
    "ext": ".png",
    "mime": "image/png",
    "size": 4947.76,
    "url": "/uploads/43761478513a4c47a5fd4a03178cfccb.png",
    "provider": "local",
    "provider_metadata": null,
    "createdAt": "2020-01-07T19:34:32.168Z",
    "updatedAt": "2020-01-07T19:34:32.168Z",
    "related": []
  }
}
```

### `review-workflows.updateEntryStage`

This event is only available with the  plan of Strapi.<br />The event is triggered when content is moved to a new review stage (see [Review Workflows](/cms/features/review-workflows#configuration)).

**Example payload**

```json
{
  "event": "review-workflows.updateEntryStage",
  "createdAt": "2023-06-26T15:46:35.664Z",
  "model": "model",
  "uid": "uid",
  "entity": {
    "id": 2
  },
  "workflow": {
    "id": 1,
    "stages": {
      "from": {
        "id": 1,
        "name": "Stage 1"
      },
      "to": {
        "id": 2,
        "name": "Stage 2"
      }
    }
  }
}
```

### `releases.publish`  {#releases-publish}

The event is triggered when a [release](/cms/features/releases) is published.

**Example payload**

```json

{
  "event": "releases.publish",
  "createdAt": "2024-02-21T16:45:36.877Z",
  "isPublished": true,
  "release": {
    "id": 2,
    "name": "Fall Winter highlights",
    "releasedAt": "2024-02-21T16:45:36.873Z",
    "scheduledAt": null,
    "timezone": null,
    "createdAt": "2024-02-21T15:16:22.555Z",
    "updatedAt": "2024-02-21T16:45:36.875Z",
    "actions": {
      "count": 1
    }
  }
}
```

## Best practices for webhook handling

- Validate incoming requests by checking headers and payload signatures.
- Implement retries for failed webhook requests to handle transient errors.
- Log webhook events for debugging and monitoring.
- Use secure, HTTPS endpoints for receiving webhooks.
- Set up rate limiting to avoid being overwhelmed by multiple webhook requests.



# 커맨드 라인 인터페이스
Source: https://docs.strapi.io/cms/cli

# 커맨드 라인 인터페이스 (CLI)

Strapi는 몇 초 만에 프로젝트를 스캐폴드하고 관리할 수 있는 모든 기능을 갖춘 커맨드 라인 인터페이스(CLI)를 제공합니다. CLI는 `yarn`과 `npm` 패키지 관리자 모두와 작동합니다.

:::caution
`strapi admin:create-user`와 같은 대화형 명령어는 `npm`에서 프롬프트를 표시하지 않습니다. `npm` 패키지 관리자에 대한 수정은 2023년 3월까지 예상됩니다. 그 동안은 `yarn` 패키지 관리자 사용을 고려하세요.
:::

:::note
Strapi를 로컬에서만 설치하는 것을 권장하며, 이는 다음의 모든 `strapi` 명령어 앞에 프로젝트 설정에 사용된 패키지 관리자를 접두사로 붙여야 함을 의미합니다 (예: `npm run strapi help` 또는 `yarn strapi help`) 또는 전용 노드 패키지 실행기를 사용합니다 (예: `npx strapi help`).

`npm`으로 옵션을 전달하려면 다음 구문을 사용하세요: `npm run strapi <command> -- --<option>`.

`yarn`으로 옵션을 전달하려면 다음 구문을 사용하세요: `yarn strapi <command> --<option>`
:::

<details>
<summary>ℹ️ Strapi 5에서 제거된 Strapi v4 CLI 명령어:</summary>

Strapi v4의 `strapi install`, `strapi uninstall`, `strapi new`, `strapi watch-admin` 명령어는 Strapi 5에서 제거되었습니다:

| Strapi v4 명령어          | Strapi 5 동등한 명령어                                                                                                                                                                                |
| ------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `strapi install [plugin]` | 플러그인에 해당하는 npx 명령어를 사용하세요 (마켓플레이스에서 찾을 수 있습니다. [마켓플레이스](/cms/plugins/installing-plugins-via-marketplace) 참조)                                                |
| `strapi new`              | 새로운 Strapi 프로젝트를 생성하기 위해 동등한 yarn 또는 npx 명령어를 사용하세요 ([CLI 설치 가이드](/cms/installation/cli) 참조)                                                                   |
| `strapi watch-admin`      | `yarn develop` 또는 `npm run develop`는 항상 "watch-admin" 모드로 Strapi 서버를 시작합니다. Strapi 5에서 이를 비활성화하려면 `yarn develop --no-watch-admin` 또는 `npm run develop --no-watch-admin`을 실행하세요. |

</details>

## strapi develop

**별칭**: `dev`

자동 재로딩이 활성화된 상태로 Strapi 애플리케이션을 시작합니다.

Strapi는 런타임에 파일을 수정/생성하며 새 파일이 생성될 때 재시작해야 합니다. 이를 위해 `strapi develop`는 파일 감시자를 추가하고 필요할 때 애플리케이션을 재시작합니다.

Strapi는 또한 관리자 패널을 위한 HMR(핫 모듈 교체)을 지원하는 미들웨어를 추가합니다. 이를 통해 애플리케이션을 재시작하거나 별도의 서버를 실행할 필요 없이 관리자 패널을 커스터마이징할 수 있습니다.

```shell
strapi develop
options: [--no-build |--no-watch-admin |--browser |--debug |--silent]
```

- **strapi develop --open**<br/>
  자동 재로딩이 활성화된 상태로 애플리케이션을 시작하고 관리자 패널이 실행 중인 기본 브라우저를 엽니다.
- **strapi develop --no-watch-admin**<br/>
  관리자 패널 코드에 변경사항이 있을 때 서버가 자동 재로드되는 것을 방지합니다.
- [사용 중단] **strapi develop --no-build**<br/>
  자동 재로딩이 활성화된 상태로 애플리케이션을 시작하고 관리자 패널 빌드 프로세스를 건너뜁니다.
- [사용 중단] **strapi develop --watch-admin**<br/>
  자동 재로딩이 활성화된 상태로 애플리케이션을 시작하고 프론트엔드 개발 서버를 함께 시작합니다. 관리자 패널을 커스터마이징할 수 있습니다.
- [사용 중단] **strapi develop --watch-admin --browser 'google chrome'**<br/>
  자동 재로딩이 활성화된 상태로 애플리케이션을 시작하고 프론트엔드 개발 서버를 함께 시작합니다. 관리자 패널을 커스터마이징할 수 있습니다. 기본 브라우저 대신 사용할 브라우저 이름을 제공하고, `false`는 브라우저 열기를 중단함을 의미합니다.

:::warning
프로덕션에서 Strapi 애플리케이션을 실행할 때는 이 명령어를 절대 사용하지 마세요.
:::

## strapi start

자동 재로딩이 비활성화된 상태로 Strapi 애플리케이션을 시작합니다.

이 명령어는 주로 프로덕션에서 사용하기 위해 재시작과 파일 쓰기 없이 Strapi 애플리케이션을 실행하는 데 사용됩니다.
콘텐츠 타입 빌더와 같은 특정 기능은 애플리케이션 재시작이 필요하기 때문에 `strapi start` 모드에서는 비활성화됩니다. `start` 명령어는 애플리케이션 시작을 커스터마이징하기 위해 [환경 변수](/cms/configurations/environment#strapi)를 앞에 붙일 수 있습니다.

## strapi build

관리자 패널을 빌드합니다.

```bash
strapi build
```

| 옵션                | 타입 | 설명                                                  |
| ------------------- | :--: | -------------------------------------------------------- |
| `-d, --debug`       |  -   | 상세 로그와 함께 디버깅 모드 활성화 (기본값: false) |
| `--minify`          |  -   | 출력 최소화 (기본값: true)                        |
| `--no-optimization` |  -   | [사용 중단]: 대신 minify를 사용하세요                         |
| `--silent`          |  -   | 아무것도 로그하지 않음 (기본값: false)                      |
| `--sourcemaps`      |  -   | 소스맵 생성 (기본값: false)                      |
| `--stats`           |  -   | 빌드 통계를 콘솔에 출력 (기본값: false)   |

## strapi login

Strapi Cloud에 로그인합니다 ([Cloud CLI](/cloud/cli/cloud-cli#strapi-login) 문서 참조).

## strapi logout

Strapi Cloud에서 로그아웃합니다 ([Cloud CLI](/cloud/cli/cloud-cli#strapi-logout) 문서 참조).

## strapi deploy

Strapi Cloud에 배포합니다 ([Cloud CLI](/cloud/cli/cloud-cli#strapi-deploy) 문서 참조).

## strapi export

[프로젝트 데이터를 내보냅니다](/cms/features/data-management). 기본 설정은 `gzip`으로 압축되고 `aes-128-ecb`로 암호화된 `.tar` 파일을 생성합니다.

```bash
strapi export
```

내보낸 파일은 현재 날짜와 타임스탬프를 사용하여 `export_YYYYMMDDHHMMSS` 형식으로 자동 명명됩니다. 또는 `-f` 또는 `--file` 플래그를 사용하여 파일명을 지정할 수 있습니다. 다음 표는 명령줄 플래그로 사용 가능한 모든 옵션을 제공합니다:

| 옵션              |  타입  | 설명                                                                                                                |
| ------------------- | :----: | -------------------------------------------------------------------------------------------------------------------------- |
| `--no-encrypt`      |   -    | 파일 암호화를 비활성화하고 `key` 옵션을 비활성화합니다.   |
| `--no-compress`     |   -    | 파일 압축을 비활성화합니다.      |
| `-k`, <br/>`--key`  | string | `export` 명령의 일부로 암호화 키를 전달합니다. <br/> `--key` 옵션은 `--no-encrypt`와 결합할 수 없습니다. |
| `-f`, <br/>`--file` | string | 내보내기 파일명을 지정합니다. 파일 확장자는 포함하지 마세요.                                                            |
| `--exclude`         | string | 쉼표로 구분된 데이터 타입을 사용하여 데이터를 제외합니다. 사용 가능한 타입: `content`, `files`, `config`.                  |
| `--only`            | string | 이러한 데이터만 포함합니다. 사용 가능한 타입: `content`, `files`, `config`.                                        |
| `-h`, <br/>`--help` |   -    | `strapi export` 명령에 대한 도움말을 표시합니다.                                                                             |

**예제**

```bash title="strapi export 예제:"
# 기본 옵션과 myData 파일명으로 데이터를 내보내며, myData.tar.gz.enc 파일이 생성됩니다.
strapi export -f myData

# 암호화 없이 데이터를 내보냅니다.
strapi export --no-encrypt
```

## strapi import

[Imports data](/cms/features/data-management) into your project. The imported data must originate from another Strapi application. You must pass the `--file` option to specify the filename and location for the import action.

```bash
strapi import
```

| Option         | Type   | Description                                                               |
| -------------- | ------ | ------------------------------------------------------------------------- |
| `-k,` `--key`  | string | Provide the encryption key in the command instead of a subsequent prompt. |
| `-f`, `--file` | string | Path and filename with extension for the data to be imported.             |
| `-h`, `--help` | -      | Display the `strapi import` help commands.                                |

**Examples**

```bash title="Example of strapi import:"

# import your data with the default parameters and pass an encryption key:
strapi import -f your-filepath-and-filename --key my-key
```

## strapi transfer

[Transfers data](/cms/data-management/transfer) between 2 Strapi instances. This command is primarily intended for use between a local instance and a remote instance or 2 remote instances. The `transfer` command requires a Transfer token, which is generated in the destination instance Admin panel. See the [User Guide](/cms/features/data-management#admin-panel-settings) for detailed documentation on creating Transfer tokens.

:::caution
The destination Strapi instance should be running with the `start` command and not the `develop` command.
:::

| Option                       | Description                                                                                                                                       |
| ---------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |
| `--to [destinationURL]`      | Full URL of the `/admin` endpoint on the destination Strapi instance<br />(e.g. `--to https://my-beautiful-strapi-website/admin`)                 |
| `--to-token [transferToken]` | Transfer token for the remote Strapi destination                                                                                                  |
| `--from [sourceURL]`         | Full URL of the `/admin` endpoint of the remote Strapi instance to pull data from<br />(e.g., `--from https://my-beautiful-strapi-website/admin`) |
| `‑‑from‑token`               | Transfer token from the Strapi source instance.                                                                                                   |
| `--force`                    | Automatically answer "yes" to all prompts, including potentially destructive requests, and run non-interactively.                                 |
| `--exclude`                  | Exclude data using comma-separated data types. The available types are: `content`, `files`, and `config`.                                         |
| `--only`                     | Include only these data. The available types are: `content`, `files`, and `config`.                                                               |
| `-h`, `--help`               | Displays the commands for `strapi transfer`.                                                                                                      |

:::caution
Either `--to` or `--from` is required, but it's not currently allowed to enter both or neither.
:::

**Example**

```bash
strapi transfer --to http://example.com/admin --to-token my-transfer-token
```

## strapi report

Prints out debug information useful for debugging and required when reporting an issue.

| Option                 | Description                   |
| ---------------------- | ----------------------------- |
| `-u`, `--uuid`         | Includes the project UUID     |
| `-d`, `--dependencies` | Includes project dependencies |
| `--all`                | Logs all the data             |

**Examples**

To include the project UUID and dependencies in the output:

```bash
strapi report --uuid --dependencies
```

To log everything, use the `--all` option:

```bash
strapi report --all
```

## strapi configuration:dump

**Alias**: `config:dump`

Dumps configurations to a file or stdout to help you migrate to production.

The dump format will be a JSON array.

```bash title="strapi configuration:dump"

Options:
  -f, --file <file>  Output file, default output is stdout
  -p, --pretty       Format the output JSON with indentation and line breaks (default: false)
```

**Examples**

- `strapi configuration:dump -f dump.json`
- `strapi config:dump --file dump.json`
- `strapi config:dump > dump.json`

All these examples are equivalent.

:::caution
When configuring your application you often enter credentials for third party services (e.g authentication providers). Be aware that those credentials will also be dumped into the output of this command.
In case of doubt, you should avoid committing the dump file into a versioning system. Here are some methods you can explore:

- Copy the file directly to the environment you want and run the restore command there.
- Put the file in a secure location and download it at deploy time with the right credentials.
- Encrypt the file before committing and decrypt it when running the restore command.

:::

## strapi configuration:restore

**Alias**: `config:restore`

Restores a configuration dump into your application.

The input format must be a JSON array.

```bash
strapi configuration:restore

Options:
  -f, --file <file>          Input file, default input is stdin
  -s, --strategy <strategy>  Strategy name, one of: "replace", "merge", "keep". Defaults to: "replace"
```

**Examples**

- `strapi configuration:restore -f dump.json`
- `strapi config:restore --file dump.json -s replace`
- `cat dump.json | strapi config:restore`
- `strapi config:restore < dump.json`

All these examples are equivalent.

**Strategies**

When running the restore command, you can choose from three different strategies:

- **replace**: Will create missing keys and replace existing ones.
- **merge**: Will create missing keys and merge existing keys with their new value.
- **keep**: Will create missing keys and keep existing keys as is.

## strapi admin:create-user

**Alias** `admin:create`

Creates an administrator.
Administrator's first name, last name, email, and password can be:

- passed as options
- or set interactively if you call the command without passing any option.

**Example**

```bash

strapi admin:create-user --firstname=Kai --lastname=Doe --email=chef@strapi.io --password=Gourmet1234
```

**Options**

| Option          | Type   | Description                        | Required |
| --------------- | ------ | ---------------------------------- | -------- |
| -f, --firstname | string | The administrator's first name     | Yes      |
| -l, --lastname  | string | The administrator's last name      | No       |
| -e, --email     | string | The administrator's email          | Yes      |
| -p, --password  | string | New password for the administrator | No       |
| -h, --help      |        | display help for command           |          |

## strapi admin:reset-user-password

**Alias** `admin:reset-password`

Reset an admin user's password.
You can pass the email and new password as options or set them interactively if you call the command without passing the options.

**Example**

```bash

strapi admin:reset-user-password --email=chef@strapi.io --password=Gourmet1234
```

**Options**

| Option         | Type   | Description               |
| -------------- | ------ | ------------------------- |
| -e, --email    | string | The user email            |
| -p, --password | string | New password for the user |
| -h, --help     |        | display help for command  |

## strapi generate

Run a fully interactive CLI to generate APIs, [controllers](/cms/backend-customization/controllers), [content-types](/cms/backend-customization/models), [plugins](/cms/plugins-development/create-a-plugin), [policies](/cms/backend-customization/policies), [middlewares](/cms/backend-customization/middlewares) and [services](/cms/backend-customization/services), and [migrations](/cms/database-migrations).

```bash
strapi generate
```

## strapi templates:generate

Create a template from the current Strapi project.

```bash
strapi templates:generate <path>
```

- **strapi templates:generate &#60;path&#62;**<br/>
  Generates a Strapi template at `<path>`

  Example: `strapi templates:generate ../strapi-template-name` will copy the required files and folders to a `template` directory inside `../strapi-template-name`

## strapi ts:generate-types

Generate [TypeScript](/cms/typescript) typings for the project schemas.

```bash
strapi ts:generate-types
```

- **strapi ts:generate-types --debug**<br />
  Generate typings with the debug mode enabled, displaying a detailed table of the generated schemas.
- **strapi ts:generate-types --silent** or **strapi ts:generate-types -s**<br/>
  Generate typings with the silent mode enabled, completely removing all the logs in the terminal. Cannot be combined with `debug`
- **strapi ts:generate-types --out-dir &#60;path&#62;** or **strapi ts:generate-types -o &#60;path&#62;**<br/>
  Generate typings specifying the output directory in which the file will be created.

:::caution
Strapi requires the project types to be generated in the `types` directory for them to work. The `--out-dir` option should not be used for most cases. However, it can be useful for cases such as generating a second copy to compare the difference between your existing and updated types after changing your content structure.
:::

## strapi routes:list

Display a list of all the available [routes](/cms/backend-customization/routes).

```bash
strapi routes:list
```

## strapi policies:list

Display a list of all the registered [policies](/cms/backend-customization/policies).

```bash
strapi policies:list
```

## strapi middlewares:list

Display a list of all the registered [middlewares](/cms/backend-customization/middlewares).

```bash
strapi middlewares:list
```

## strapi content-types:list

Display a list of all the existing [content-types](/cms/backend-customization/models).

```bash
strapi content-types:list
```

## strapi hooks:list

Display a list of all the available hooks.

```bash
strapi hooks:list
```

## strapi controllers:list

Display a list of all the registered [controllers](/cms/backend-customization/controllers).

```bash
strapi controllers:list
```

## strapi services:list

Display a list of all the registered [services](/cms/backend-customization/services).

```bash
strapi services:list
```

## strapi telemetry:disable

Disable data collection for the project (see [Usage Information](/cms/usage-information)).

```bash
strapi telemetry:disable
```

## strapi telemetry:enable

Re-enable data collection for the project after it was disabled (see [Usage Information](/cms/usage-information)).

```bash
strapi telemetry:enable
```

## strapi console

Start the server and eval commands in your application in real time.

```bash
strapi console
```

## strapi version

Print the currently installed Strapi version.
It will output the current globally installed version if this command is strapi is installed globally, or the current version of Strapi within a Strapi project if the command is run from a given folder containing a Strapi project.

```bash
strapi version
```

## strapi help

List CLI commands.

```bash
strapi help
```



# Configurations
Source: https://docs.strapi.io/cms/configurations

# Configuration

The configuration of a Strapi project lives in the `/config` folder:

<em style={{fontSize: '12px'}}>The block above is an excerpt from the project structure. You can click on any file name in purple to read the corresponding documentation. Visit the <a href="/cms/project-structure">project structure page</a> for the full version.</em>

## Base configurations

From the `/config` folder, you can find and define the following base configurations:

| Configuration topic | File path | Required or optional |
|-----|----|----|
| [Database](/cms/configurations/database) | `config/database` | Required |
| [Server](/cms/configurations/server) | `config/server` | Required
| [Admin panel](/cms/configurations/admin-panel) | `config/admin` | Required |
| [Middlewares](/cms/configurations/middlewares) | `config/middlewares` | Required |
| [API calls](/cms/configurations/api) | `config/api` | Optional, used to define some general settings for responses and other REST-related parameters. |

## Additional configuration for specific features

Some specific features require additional configuration:

| Feature | Location | Required or optional |
|---------|------|------|
| [Plugins](/cms/configurations/plugins) | In the `config/plugins` file | <ul><li>Optional if using only built-in plugins with default presets.</li><li>Required to enable, configure, or disable plugins.</li></ul>Can also be used to configure the Upload plugin (which handles the Media Library feature) and GraphQL. |
| [TypeScript](/cms/configurations/typescript) | <ul><li>In `tsconfig.json` for general [TypeScript-related configuration](/cms/configurations/typescript#project-structure-and-typescript-specific-configuration-files)</li><li>In the `config/typescript` file for [dedicated TypeScript features](/cms/configurations/typescript#strapi-specific-configuration-for-typescript) specific to Strapi</li></ul> | Required to use TypeScript efficiently |
| [API tokens](/cms/features/api-tokens) | In the `config/admin` file | Required if using API tokens for authentication instead of the [Users & Permissions plugin](/cms/features/users-permissions) |
| [Lifecycle functions](/cms/configurations/functions) | In the `/src/index` file | Optionally used to perform various actions that happen during the server lifecycle. Includes the `register`, `bootstrap`, and `destroy` functions. |
| [Cron jobs](/cms/configurations/cron) | <ul><li>In the `/config/server` file to enable the feature</li><li>In a dedicated, optional `cron-tasks` file that can be used to declare the jobs</li></ul> | Required to setup CRON jobs for the server. |
| [Environment variables](/cms/configurations/environment) | In dedicated files and folders for the environment (e.g., `config/env/production/server`) | Optionally used to define different environments and their variables. |
| [Single Sign-On (SSO)](/cms/configurations/guides/configure-sso)   | In the `config/admin` file | Required to use the SSO feature if enabled on your project. |
| [Feature flags](/cms/configurations/features) | In the `config/features` file | Optional for a typical, stable Strapi application.<br/>Only required to enable [future flags](/cms/configurations/features).|

## Guides

The following guides will help you address specific use cases related to the Strapi configuration:



# API calls configuration
Source: https://docs.strapi.io/cms/configurations/api

# API configuration

General settings for API calls can be set in the `./config/api.js` file:

| Property                      | Description                                                                                                                                                                                                                                          | Type         | Default |
| ----------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------ | ------- |
| `responses`                   | Global API response configuration                                                                                                                                                                                                                    | Object       | -       |
| `responses.privateAttributes` | Set of globally defined attributes to be treated as private.                                                                                                                                                                                         | String array | `[]`    |
| `rest`                        | REST API configuration                                                                                                                                                                                                                               | Object       | -       |
| `rest.prefix`                 | The API prefix                       | String      | `/api`   |
| `rest.defaultLimit`           | Default `limit` parameter used in API calls (see [REST API documentation](/cms/api/rest/sort-pagination#pagination-by-offset))                                                                      | Integer      | `25`    |
| `rest.maxLimit`               | Maximum allowed number that can be requested as `limit` (see [REST API documentation](/cms/api/rest/sort-pagination#pagination-by-offset)). | Integer      | `100`   |

:::note 
If the `rest.maxLimit` value is less than the `rest.defaultLimit` value, `maxLimit` will be the limit used.
:::

**Example:**

</Tabs>



# CRON jobs
Source: https://docs.strapi.io/cms/configurations/cron

# Cron jobs

:::prerequisites
The `cron.enabled` configuration option should be set to `true` in the `./config/server.js` (or `./config/server.ts` for TypeScript projects) [file](/cms/configurations/server).
:::

`cron` allows scheduling arbitrary functions for execution at specific dates, with optional recurrence rules. These functions are named cron jobs. `cron` only uses a single timer at any given time, rather than reevaluating upcoming jobs every second/minute.

This feature is powered by the 

</Tabs>

<details>
<summary>Advanced example #1: Timezones</summary>

The following cron job runs on a specific timezone:

</Tabs>

</details>

<details>
<summary>Advanced example #2: One-off cron jobs</summary>
The following cron job is run only once at a given time:

</Tabs>

</details>

<details>
<summary>Advanced example #3: Start and end times</summary>

The following cron job uses start and end times:

</Tabs>

</details>

### Using the key format

:::warning
Using the key format creates an anonymous cron job which may cause issues when trying to disable the cron job or with some plugins. It is recommended to use the object format.
:::

To define a cron job with the key format, create a file with the following structure:

</Tabs>

## Enabling cron jobs

To enable cron jobs, set `cron.enabled` to `true` in the [server configuration file](/cms/configurations/server) and declare the jobs:

</Tabs>

## Adding or removing cron jobs

Use `strapi.cron.add` anywhere in your custom code add CRON jobs to the Strapi instance:

```js title="./src/plugins/my-plugin/strapi-server.js"
module.exports = () => ({
  bootstrap({ strapi }) {
    strapi.cron.add({
      // runs every second
      myJob: {
        task: ({ strapi }) => {
          console.log("hello from plugin");
        },
        options: {
          rule: "* * * * * *",
        },
      },
    });
  },
});
```

Use `strapi.cron.remove` anywhere in your custom code to remove CRON jobs from the Strapi instance, passing in the key corresponding to the CRON job you want to remove:

```js
strapi.cron.remove("myJob");
```

:::note
Cron jobs that are using the [key as the rule](/cms/configurations/cron#using-the-key-format) can not be removed.
:::

## Listing cron jobs

Use `strapi.cron.jobs` anywhere in your custom code to list all the cron jobs that are currently running:

```js
strapi.cron.jobs
```



# Database configuration
Source: https://docs.strapi.io/cms/configurations/database

# Database configuration

The `/config/database.js|ts` file is used to define database connections that will be used to store the application content.

:::strapi Supported databases
The following databases are supported by Strapi:

</Tabs>

</TabItem>
</Tabs>

## Configuration in database

Configuration files are not multi-server friendly. To update configurations in production you can use a data store to get and set settings.

### Get settings

- `environment` (string): Sets the environment you want to store the data in. By default it's current environment (can be an empty string if your configuration is environment agnostic).
- `type` (string): Sets if your configuration is for an `api`, `plugin` or `core`. By default it's `core`.
- `name` (string): You have to set the plugin or api name if `type` is `api` or `plugin`.
- `key` (string, required): The name of the key you want to store.

```js
// strapi.store(object).get(object);
// create reusable plugin store variable
const pluginStore = strapi.store({
  environment: strapi.config.environment,
  type: 'plugin',
  name: 'users-permissions',
});
await pluginStore.get({ key: 'grant' });
```

### Set settings

- `value` (any, required): The value you want to store.

```js
// strapi.store(object).set(object);
// create reusable plugin store variable
const pluginStore = strapi.store({
  environment: strapi.config.environment,
  type: 'plugin',
  name: 'users-permissions'
});
await pluginStore.set({
  key: 'grant',
  value: {
    ...
  }
});
```

## Environment variables in database configurations

Strapi version `v4.6.2` and higher includes the database configuration options in the `./config/database.js` or `./config/database.ts` file. When a new project is created the environment variable `DATABASE_CLIENT` with the value `mysql`, `postgres`, or `sqlite` is automatically added to the `.env` file depending on which database you choose during project creation. Additionally, all of the environment variables necessary to connect to your local development database are also added to the `.env` file.  The following is an example of the generated configuration file:

</Tabs>

The following are examples of the corresponding `.env` file database-related keys for each of the possible databases:

</Tabs>

### Environment variables for Strapi applications before `v4.6.2`

If you started your project with a version prior to `v4.6.2` you can convert your `database.js|database.ts` configuration file following this procedure:

1. Update your application to `v4.6.2` or a later version. See the [upgrades](/cms/upgrades) documentation.
2. Replace the contents of your `./config/database.js` or `./config/database.ts` file with the preceding JavaScript or TypeScript code.
3. Add the environment variables from the preceding code example to your `.env` file.
4. (_optional_) Add additional environment variables such as `DATABASE_URL` and the properties of the `ssl` object.
5. Save the changes and restart your application.
:::caution
Do not overwrite the environment variables: `HOST`, `PORT`, `APP_KEYS`, `API_TOKEN_SALT`, and `ADMIN_JWT_SECRET`.
:::

### Database connections using `connectionString`

Many managed database solutions use the property `connectionString` to connect a database to an application. Strapi `v4.6.2` and later versions include the `connectionString` property. The `connectionString` is a concatenation of all the database properties in the `connection.connection` object. The `connectionString`:

- overrides the other `connection.connection` properties such as `host` and `port`,
- can be disabled by setting the property to an empty string: `''`.

### Database management by environment

Development of a Strapi application commonly includes customization in the local development environment with a local development database, such as `SQLite`. When the application is ready for another environment such as production or staging the application is deployed with a different database instance, usually `MySQL`, `MariaDB`, or `PostgreSQL`. Database environment variables allow you to switch the attached database. To switch the database connection:

* set a minimum of the `DATABASE_CLIENT` and `DATABASE_URL` for `MySQL`, `MariaDB`, and `PostgreSQL`,
* or set a minimum of `DATABASE_CLIENT` and `DATABASE_FILENAME` for `SQLite`.

For deployed versions of your application the database environment variables should be stored wherever your other secrets are stored. The following table gives examples of where the database environment variables should be stored:

| Hosting option                                        | environment variable storage    |
|-------------------------------------------------------|---------------------------------|
| Virtual private server/virtual machine (e.g. AWS EC2) | `ecosystem.config.js` or `.env` |
| DigitalOcean App Platform                             | `Environment Variables` table   |
| Heroku                                                | `Config vars` table                   |

## Databases installation

Strapi gives you the option to choose the most appropriate database for your project. Strapi supports PostgreSQL, SQLite, or MySQL.

### SQLite

SQLite is the default (see [Quick Start Guide](/cms/quick-start)) and recommended database to quickly create an application locally.

#### Install SQLite during application creation

Use one of the following commands:

</Tabs>

This will create a new project and launch it in the browser.

#### Install SQLite manually

In a terminal, run the following command:

</Tabs>

Add the following code to your `/config/database.ts|js` file:

</Tabs>

### PostgreSQL

When connecting Strapi to a PostgreSQL database, the database user requires SCHEMA permissions. While the database admin has this permission by default, a new database user explicitly created for the Strapi application will not. This would result in a 500 error when trying to load the admin console.

To create a new PostgreSQL user with the SCHEMA permission, use the following steps:

```shell
# Create a new database user with a secure password
$ CREATE USER my_strapi_db_user WITH PASSWORD 'password';
# Connect to the database as the PostgreSQL admin
$ \c my_strapi_db_name admin_user
# Grant schema privileges to the user
$ GRANT ALL ON SCHEMA public TO my_strapi_db_user;
```



# Environment variables configuration
Source: https://docs.strapi.io/cms/configurations/environment

# Environment configuration and variables

Strapi provides specific environment variable names. Defining them in an environment file (e.g., `.env`) will make these variables and their values available in your code.

:::tip
An `env()` utility can be used to [retrieve the value of environment variables](/cms/configurations/guides/access-cast-environment-variables#accessing-environment-variables) and [cast variables to different types](/cms/configurations/guides/access-cast-environment-variables).
:::

Additionally, specific [configurations for different environments](#environment-configurations) can be created.

## Strapi's environment variables {#strapi}

Strapi provides the following environment variables:

 Setting                                                    | Description                                                                                                                                                                                                                                                                   | Type      | Default value   |
|------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|-----------------|
| `STRAPI_TELEMETRY_DISABLED`                                | Don't send telemetry usage data to Strapi                                                                                                                                                                                                                                     | `Boolean` | `false`         |
| `STRAPI_LICENSE`                                           | The license key to activate the Enterprise Edition                                                                                                                                                                                                                            | `String`  | `undefined`     |
| `NODE_ENV` | Type of environment where the application is running.<br/><br/>`production` enables specific behaviors (see 

</Tabs>

With these configuration files the server will start on various ports depending on the environment variables passed:

```bash
yarn start                                   # uses host 127.0.0.1
NODE_ENV=production yarn start               # uses host defined in .env. If not defined, uses 0.0.0.0
HOST=10.0.0.1 NODE_ENV=production yarn start # uses host 10.0.0.1
```

<br/>

To learn deeper about how to use environment variables in your code, please refer to the following guide:



# Features configuration
Source: https://docs.strapi.io/cms/configurations/features

# Features configuration

The `config/features.js|ts` file is used to enable feature flags. Currently this file only includes a `future` object used to enable experimental features through **future flags**.

Some incoming Strapi features are not yet ready to be shipped to all users, but Strapi still offers community users the opportunity to provide early feedback on these new features or changes. With these experimental features, developers have the flexibility to choose and integrate new features and changes into their Strapi applications as they become available in the current major version as well as assist us in shaping these new features.

Such experimental features are indicated by a 

  </Tabs>

4. Rebuild the admin panel and restart the server:

  </Tabs>

## Future flags API

Developers can use the following APIs to interact with future flags:

- Features configuration is part of the `config` object and can be read with `strapi.config.get('features')` or with `strapi.features.config`.

- `strapi.features.future` returns the `isEnabled()` that can be used to determine if a future flag is enabled, using the following method: `strapi.features.future.isEnabled('featureName')`.

## Available future flags

There are currently no available future flags. This section will be updated once new experimental features are available for testing.

<!-- The following future flags are currently available and can be used in the `future` object of the `config/features` configuration file:

| Property name     | Related feature                              | Suggested environment variable name       |
| ----------------- | -------------------------------------------- | ----------------------------------------- |
| `contentReleasesScheduling` | [Releases Scheduling](/cms/features/releases#usage) | `STRAPI_FUTURE_CONTENT_RELEASES_SCHEDULING` | -->



# Lifecycle functions
Source: https://docs.strapi.io/cms/configurations/functions

# Functions

<div className="dont_hide_secondary_bar">

The `./src/index.js` file (or `./src/index.ts` file in a [TypeScript-based](/cms/typescript) project) includes global [register](#register), [bootstrap](#bootstrap) and [destroy](#destroy) functions that can be used to add dynamic and logic-based configurations.

The functions can be synchronous, asynchronous, or return a promise.

</Tabs>

## Asynchronous function

</Tabs>

## Function returning a promise

</Tabs>

## Register

The `register` lifecycle function, found in `./src/index.js` (or in `./src/index.ts`), is an asynchronous function that runs before the application is initialized.
It can be used to:

- [extend plugins](/cms/plugins-development/plugins-extension#extending-a-plugins-interface)
- extend [content-types](/cms/backend-customization/models) programmatically
- load some [environment variables](/cms/configurations/environment)
- register a [custom field](/cms/features/custom-fields) that would be used only by the current Strapi application,
- register a [custom provider for the Users & Permissions plugin](/cms/configurations/users-and-permissions-providers/new-provider-guide).

`register()` is the very first thing that happens when a Strapi application is starting. This happens _before_ any setup process and you don't have any access to database, routes, policies, or any other backend server elements within the `register()` function.

## Bootstrap

The `bootstrap` lifecycle function, found in `./src/index.js` (or in `./src/index.ts`), is called at every server start.

It can be used to:

- create an admin user if there isn't one
- fill the database with some necessary data
- declare custom conditions for the [Role-Based Access Control (RBAC)](/cms/configurations/guides/rbac) feature

The `bootstrapi()` function is run _before_ the back-end server starts but _after_ the Strapi application has setup, so you have access to anything from the `strapi` object.

:::tip
You can run `yarn strapi console` (or `npm run strapi console`) in the terminal and interact with the `strapi` object.
:::

## Destroy

The `destroy` function, found in `./src/index.js` (or in `./src/index.ts`), is an asynchronous function that runs before the application gets shut down.

It can be used to gracefully:

- stop [services](/cms/backend-customization/services) that are running
- [clean up plugin actions](/cms/plugins-development/server-api#destroy) (e.g. close connections, remove listeners, etc.)

:::strapi Additional information
You might find additional information in  about registering lifecycle functions.
:::



# Middlewares configuration
Source: https://docs.strapi.io/cms/configurations/middlewares

# Middlewares configuration

</Tabs>

:::tip
If you aren't sure where to place a middleware in the stack, add it to the end of the list.
:::

## Naming conventions

Global middlewares can be classified into different types depending on their origin, which defines the following naming conventions:

| Middleware type   | Origin                                                                                                                                                                                                                                  | Naming convention                                                                                                    |
|-------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------|
| Internal          | Built-in middlewares (i.e. included with Strapi), automatically loaded                                                                                                                                                                  | `strapi::middleware-name`                                                                                            |
| Application-level | Loaded from the `./src/middlewares` folder                                                                                                                                                                                              | `global::middleware-name`                                                                                            |
| API-level         | Loaded from the `./src/api/[api-name]/middlewares` folder                                                                                                                                                                               | `api::api-name.middleware-name`                                                                                      |
| Plugin            | Exported from `strapi-server.js` in the [`middlewares` property of the plugin interface](/cms/plugins-development/server-api#middlewares)                                                                                               | `plugin::plugin-name.middleware-name`                                                                                |
| External          | Can be:<ul><li>either node modules installed with 

</Tabs>

</details>

### `compression`

The `compression` middleware is based on 

</Tabs>

</details>

### `cors`

This security middleware is about cross-origin resource sharing (CORS) and is based on 

</Tabs>

</details>

<details>
<summary> Example: Custom configuration for the cors middleware within a function as parameter</summary>

`origin` can take a Function as parameter following this signature 

```ts title="./config/middlewares.ts"

  // ...
  {
    name: 'strapi::cors',
    config: {
      origin: (ctx): string | string[] => {
        const origin = ctx.request.header.origin;
        if (origin === 'http://localhost:3000') {
          return origin; // The returns will be part of the Access-Control-Allow-Origin header
        }
        
        return ''; // Fail cors check
      }
    },
  },
  // ...
]
```

</details>

### `errors`

The errors middleware handles [errors](/cms/error-handling.md) thrown by the code. Based on the type of error it sets the appropriate HTTP status to the response. By default, any error not supposed to be exposed to the end user will result in a 500 HTTP response.

The middleware doesn't have any configuration options.

### `favicon`

The `favicon` middleware serves the favicon and is based on 

</Tabs>

</details>

#### `ip`

The `ip` middleware is an IP filter middleware based on 

</Tabs>

</details>

### `logger`

The `logger` middleware is used to log requests.

To define a custom configuration for the `logger` middleware, create a dedicated configuration file (`./config/logger.js`). It should export an object that must be a complete or partial 

</Tabs>

</details>

### `poweredBy`

The `poweredBy` middleware adds a `X-Powered-By` parameter to the response header. It accepts the following options:

| Option      | Description                        | Type     | Default value          |
|-------------|------------------------------------|----------|------------------------|
| `poweredBy` | Value of the `X-Powered-By` header | `String` | `'Strapi <strapi.io>'` |

<details>
<summary> details Example: Custom configuration for the poweredBy middleware</summary>

</Tabs>

</details>

### `query`

The `query` middleware is a query parser based on 

</Tabs>

</details>

### `response-time`

The `response-time` middleware enables the `X-Response-Time` (in milliseconds) for the response header.

The middleware doesn't have any configuration options.

### `public`

The `public` middleware is a static file serving middleware, based on 

</Tabs>

</details>

### `security`

The security middleware is based on 

</Tabs>

</details>

### `session`

The `session` middleware allows the use of cookie-based sessions, based on 

</Tabs>

</details>



# Plugins configuration
Source: https://docs.strapi.io/cms/configurations/plugins

# Plugins configuration

Plugin configurations are stored in `/config/plugins.js|ts` (see [project structure](/cms/project-structure)). Each plugin can be configured with the following available parameters:

| Parameter                  | Description                                                                                                                                                            | Type    |
| -------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- |
| `enabled`                  | Enable (`true`) or disable (`false`) an installed plugin                                                                                                               | Boolean |
| `config`<br/><br/>_Optional_ | Used to override default plugin configuration ([defined in strapi-server.js](/cms/plugins-development/server-api#configuration)) | Object  |
| `resolve`<br/> _Optional, only required for local plugins_             | Path to the plugin's folder                                                                                                                                            | String  |

:::note
Some features of Strapi are provided by plugins and the following plugins can also have specific configuration options: the [GraphQL](/cms/plugins/graphql#code-based-configuration) plugin and the [Upload](/cms/features/media-library#available-options) package which powers the Media Library.
:::

**Basic example custom configuration for plugins:**

</Tabs>

:::tip
If no specific configuration is required, a plugin can also be declared with the shorthand syntax `'plugin-name': true`.
:::



# Server configuration
Source: https://docs.strapi.io/cms/configurations/server

# Server configuration

The `/config/server.js` file is used to define the server configuration for a Strapi application.

:::caution
Changes to the `server.js` file require rebuilding the admin panel. After saving the modified file run either `yarn build` or `npm run build` in the terminal to implement the changes.
:::

## Available options

The `./config/server.js` file can include the following parameters:

<!-- TODO: add admin jwt config option -->
<!-- TODO: sort options alphabetically in the table below  -->

| Parameter                           | Description                                                                                                                                                                                                                                                                                                                                                                 | Type                                                                                              | Default             |
| ----------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- | ------------------- |
| `host`<br/><br/>❗️ _Mandatory_     | Host name                                                                                                                                                                                                                                                                                                                                                                   | string                                                                                            | `localhost`         |
| `port`<br/><br/>❗️ _Mandatory_     | Port on which the server should be running.                                                                                                                                                                                                                                                                                                                                 | integer                                                                                           | `1337`              |
| `app.keys`<br/><br/>❗️ _Mandatory_ | Declare session keys (based on 

</Tabs>

</TabItem>

</Tabs>

</TabItem>
</Tabs>



# TypeScript configuration
Source: https://docs.strapi.io/cms/configurations/typescript

# TypeScript configuration

[TypeScript](/cms/typescript)-enabled Strapi projects have a specific project structure and handle TypeScript project configuration through [`tsconfig.json` files](#project-structure-and-typescript-specific-configuration-files).

Strapi also has dedicated TypeScript features that are configured [in the `config/typescript.js|ts` file](#strapi-specific-configuration-for-typescript).

## Project structure and TypeScript-specific configuration files

TypeScript-enabled Strapi applications have a specific [project structure](/cms/project-structure) with the following dedicated folders and configuration files:

| TypeScript-specific directories and files | Location         | Purpose                                                                                                                                          |
| ----------------------------------------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------ |
| `./dist` directory                        | application root | Adds the location for compiling the project JavaScript source code.                                                                              |
| `build` directory                         | `./dist`         | Contains the compiled administration panel JavaScript source code. The directory is created on the first `yarn build` or `npm run build` command |
| `tsconfig.json` file                      | application root | Manages TypeScript compilation for the server.                                                                                                   |
| `tsconfig.json` file                      | `./src/admin/`   | Manages TypeScript compilation for the admin panel.                                                                                              |

## Strapi-specific configuration for TypeScript

:::caution 🚧 This feature is considered experimental.
These settings are considered experimental and might have issues or break some features.
:::

Types generated by Strapi are based on the user project structure. Once the type definitions are emitted into their dedicated files, Strapi reads the type definitions to adapt the autocompletion results accordingly.

To avoid having to [manually generate types](/cms/typescript/development#generate-typings-for-content-types-schemas) every time the server restarts, an optional `config/typescript.js|ts` configuration file can be added, which currently accepts only one parameter:

| Parameter      | Description                                                    | Type      | Default |
| -------------- | -------------------------------------------------------------- | --------- | ------- |
| `autogenerate` | Enable or disable automatic types generation on server restart | `Boolean` | `false` |

**Example:**

</Tabs>



# 커스터마이징
Source: https://docs.strapi.io/cms/customization

# 커스터마이징

Strapi는 2가지 주요 컴포넌트로 구성되어 있습니다:

- Strapi의 백엔드 부분은 **서버**로, 요청을 받아 응답을 반환하며, Content-Type Builder와 Content Manager를 통해 구축하고 저장한 데이터를 노출합니다. 백엔드 서버에 대한 자세한 설명은 [백엔드 커스터마이징 소개](/cms/backend-customization)에서 확인할 수 있습니다. 백엔드 서버의 대부분은 커스터마이징이 가능합니다.

- Strapi의 프론트엔드, 즉 사용자 인터페이스 부분은 **관리자 패널**이라고 부릅니다. 관리자 패널은 콘텐츠 구조를 만들고, 콘텐츠를 관리하며, 내장 또는 서드파티 플러그인을 통해 다양한 작업을 수행할 수 있는 그래픽 사용자 인터페이스(GUI)입니다. 관리자 패널의 일부도 커스터마이징할 수 있습니다.

전체적인 관점에서 Strapi는 일반적인 환경에서 다음과 같이 통합됩니다: Strapi는 백엔드 서버와 관리자 패널 두 부분으로 구성되며, 데이터베이스(데이터 저장) 및 외부 프론트엔드 애플리케이션(데이터 표시)과 상호작용합니다. Strapi의 두 부분 모두 어느 정도까지 커스터마이징이 가능합니다.

:::info
데이터베이스 또는 외부 프론트엔드 애플리케이션 커스터마이징은 본 문서 범위에 포함되지 않습니다.
- Strapi에서 지원하는 데이터베이스에 대한 자세한 내용은 설치 문서([지원 데이터베이스](/cms/installation/cli#preparing-the-installation))와 [데이터베이스 구성](/cms/configurations/database) 문서를 참고하세요.
- 외부 프론트엔드 애플리케이션이 Strapi와 상호작용하는 방법은 Strapi의 에서 확인할 수 있습니다.
:::



# Database migrations
Source: https://docs.strapi.io/cms/database-migrations

# Database migrations

Database migrations exist to run one-time queries against the database, typically to modify the tables structure or the data when upgrading the Strapi application. These migrations are run automatically when the application starts and are executed before the automated schema migrations that Strapi also performs on boot.

:::callout 🚧  Experimental feature
Database migrations are experimental. This feature is still a work in progress and will continue to be updated and improved. In the meantime, feel free to ask for help on the 

</Tabs>

Additionally, if you want to continue using existing JavaScript migrations alongside TypeScript migrations, you can set `allowJs: true` in your `tsconfig.json` file's compiler options, as mentioned in the [database configuration documentation](/cms/configurations/database#settings-configuration-object).



# Database transactions
Source: https://docs.strapi.io/cms/database-transactions

# Database transactions

:::caution
This is an experimental feature and is subject to change in future versions.
:::

Strapi 5 provide an API to wrap a set of operations in a transaction that ensures the integrity of data.

Transactions are a set of operations that are executed together as a single unit. If any of the operations fail, the entire transaction fails and the data is rolled back to its previous state. If all operations succeed, the transaction is committed and the data is permanently saved to the database.

## Usage

Transactions are handled by passing a handler function into `strapi.db.transaction`:

```js
await strapi.db.transaction(async ({ trx, rollback, commit, onCommit, onRollback }) => {
  // It will implicitly use the transaction
  await strapi.entityService.create();
  await strapi.entityService.create();
});
```

After the transaction handler is executed, the transaction is committed if all operations succeed. If any of the operations throws, the transaction is rolled back and the data is restored to its previous state.

:::note
Every `strapi.entityService` or `strapi.db.query` operation performed in a transaction block will implicitly use the transaction.
:::

### Transaction handler properties

The handler function receives an object with the following properties:

| Property     | Description                                                                                 |
| ------------ | ------------------------------------------------------------------------------------------- |
| `trx`        | The transaction object. It can be used to perform knex queries within the transaction.      |
| `commit`     | Function to commit the transaction.                                                         |
| `rollback`   | Function to rollback the transaction.                                                       |
| `onCommit`   | Function to register a callback that will be executed after the transaction is committed.   |
| `onRollback` | Function to register a callback that will be executed after the transaction is rolled back. |

### Nested transactions

Transactions can be nested. When a transaction is nested, the inner transaction is committed or rolled back when the outer transaction is committed or rolled back.

```js
await strapi.db.transaction(async () => {
  // It will implicitly use the transaction
  await strapi.entityService.create();

  // Nested transactions will implicitly use the outer transaction
  await strapi.db.transaction(async ({}) => {
    await strapi.entityService.create();
  });
});
```

### onCommit and onRollback

The `onCommit` and `onRollback` hooks can be used to execute code after the transaction is committed or rolled back.

```js
await strapi.db.transaction(async ({ onCommit, onRollback }) => {
  // It will implicitly use the transaction
  await strapi.entityService.create();
  await strapi.entityService.create();

  onCommit(() => {
    // This will be executed after the transaction is committed
  });

  onRollback(() => {
    // This will be executed after the transaction is rolled back
  });
});
```

### Using knex queries

Transactions can also be used with knex queries, but in those cases `.transacting(trx)` must be explicitly called.

```js
await strapi.db.transaction(async ({ trx, rollback, commit }) => {
  await knex('users').where('id', 1).update({ name: 'foo' }).transacting(trx);
});
```

## When to use transactions

Transactions should be used in cases where multiple operations should be executed together and their execution is dependent on each other. For example, when creating a new user, the user should be created in the database and a welcome email should be sent to the user. If the email fails to send, the user should not be created in the database.

## When not to use transactions

Transactions should not be used for operations that are not dependent on each other since it can result in performance penalties.

## Potential problems of transactions

Performing multiple operations within a transaction can lead to locking, which can block the execution of transactions from other processes until the original transaction is complete.

Furthermore, transactions can stall if they are not committed or rolled back appropriately.

For example, if a transaction is opened but there is a path in your code that does not close it, the transaction will be left open indefinitely and could cause instability until your server is restarted and the connection is forced to close. These issues can be difficult to debug, so use transactions with care in the cases they are necessary.



# 배포
Source: https://docs.strapi.io/cms/deployment

# 배포

Strapi는 프로젝트나 애플리케이션을 위한 많은 배포 옵션을 제공합니다. Strapi 애플리케이션은 기존 호스팅 서버나 선호하는 호스팅 제공업체에 배포할 수 있습니다.

다음 문서는 여러 일반적인 호스팅 옵션으로 배포하기 위해 Strapi를 준비하는 방법의 기본 사항을 다룹니다.

:::strapi Strapi Cloud
[Strapi Cloud](/cloud/intro)를 사용하여 프로젝트를 빠르게 배포하고 호스팅할 수 있습니다.
:::

:::tip
콘텐츠 타입 빌더로 콘텐츠 구조를 이미 생성하고 콘텐츠 관리자를 통해 로컬(개발) Strapi 인스턴스에 일부 데이터를 추가했다면, [데이터 관리 시스템](/cms/features/data-management)을 활용하여 한 Strapi 인스턴스에서 다른 인스턴스로 데이터를 전송할 수 있습니다.

또 다른 가능한 워크플로는 먼저 로컬에서 콘텐츠 구조를 생성하고, 프로젝트를 git 기반 저장소에 푸시하고, 변경사항을 프로덕션에 배포한 후, 그 다음에 프로덕션 인스턴스에 콘텐츠를 추가하는 것입니다.
:::

## 일반 가이드라인

### 하드웨어 및 소프트웨어 요구사항

Strapi에 최적의 환경을 제공하기 위해 다음 요구사항이 개발(로컬), 준비 및 프로덕션 워크플로에 적용됩니다.

</Tabs>

`production` 설정으로 서버를 실행합니다:

</Tabs>

:::caution
프로세스 관리를 위해 를 사용하는 것을 강력히 권장합니다.
:::

`npm run start` 대신 `node server.js`를 실행할 수 있는 server.js 파일이 필요하다면 다음과 같이 `./server.js` 파일을 생성하세요:

```js title="path: ./server.js"

const strapi = require('@strapi/strapi');
strapi.createStrapi(/* {...} */).start();
```

:::caution

`TypeScript` 기반 프로젝트를 개발하고 있다면 서버를 시작하기 위해 `distDir` 옵션을 제공해야 합니다.
자세한 정보는 [TypeScript 문서](/cms/typescript/development#use-the-createstrapi-factory)를 참고하세요.
:::

### 고급 구성

API와 다른 서버에서 관리자를 호스팅하려면 [이 전용 섹션](/cms/configurations/admin-panel#deploy-on-different-servers)을 살펴보세요.

## 추가 리소스

:::prerequisites
* Strapi 프로젝트가 [생성](/cms/installation)되어 있고 코드가 GitHub에 호스팅되어 있습니다.
* [일반 배포 가이드라인](/cms/deployment#general-guidelines)을 읽었습니다.
:::

Strapi 웹사이트의 에는 다음 3rd 파티 플랫폼에서 Strapi를 배포하는 방법을 포함하여 Strapi를 많은 리소스와 통합하는 방법에 대한 정보가 포함되어 있습니다:

<br/>

In addition, community-maintained guides for additional providers are available in the . This includes the following guides:

<br/>

The following external guide(s), not officially maintained by Strapi, might also help deploy Strapi on various environments:

:::strapi Multi-tenancy
If you're looking for multi-tenancy options, the Strapi Blog has a .
:::



# 에러 처리
Source: https://docs.strapi.io/cms/error-handling

# 에러 처리

Strapi는 표준 포맷으로 에러를 기본적으로 처리합니다.

에러 처리는 두 가지 주요 상황에서 사용됩니다:

- [REST](/cms/api/rest) 또는 [GraphQL](/cms/api/graphql) API를 통해 콘텐츠를 쿼리하는 개발자는 요청에 대한 [에러 응답](#receiving-errors)을 받을 수 있습니다.
- Strapi 애플리케이션의 백엔드를 커스터마이징하는 개발자는 컨트롤러나 서비스에서 [에러를 발생](#throwing-errors)시킬 수 있습니다.

## 에러 응답 받기

에러는 응답 객체의 `error` 키에 포함되며, HTTP 상태 코드, 에러 이름, 추가 정보 등이 포함됩니다.

### REST 에러

REST API에서 발생한 에러는 다음과 같은 [응답](/cms/api/rest#requests) 포맷으로 반환됩니다:

```json
{
  "data": null,
  "error": {
    "status": "", // HTTP 상태
    "name": "", // Strapi 에러 이름('ApplicationError' 또는 'ValidationError')
    "message": "", // 사람이 읽을 수 있는 에러 메시지
    "details": {
      // 에러 타입별 상세 정보
    }
  }
}
```

### GraphQL 에러

GraphQL API에서 발생한 에러는 다음과 같은 포맷으로 반환됩니다:

```json
{ "errors": [
    {
      "message": "", // 사람이 읽을 수 있는 에러 메시지
      "extensions": {
        "error": {
          "name": "", // Strapi 에러 이름('ApplicationError' 또는 'ValidationError')
          "message": "", // 사람이 읽을 수 있는 에러 메시지(동일)
          "details": {}, // 에러 타입별 상세 정보
        },
        "code": "" // GraphQL 에러 코드(예: BAD_USER_INPUT)
      }
    }
  ],
  "data": {
    "graphQLQueryName": null
  }
}
```

## 에러 발생시키기

<br/>

### 컨트롤러 및 미들웨어

Strapi에서 커스텀 로직을 개발할 때 에러를 발생시키는 권장 방법은 [컨트롤러](/cms/backend-customization/controllers)나 [미들웨어](/cms/backend-customization/middlewares)에서 적절한 상태와 본문으로 응답하는 것입니다.

이는 컨텍스트(예: `ctx`)에서 에러 함수를 호출하여 처리할 수 있습니다. 사용 가능한 에러 함수는 

</Tabs>

### 서비스 및 모델 라이프사이클

컨트롤러나 미들웨어보다 더 깊은 레이어에서 작업할 때는, 에러를 발생시키기 위한 전용 에러 클래스가 있습니다. 이 클래스들은 

</Tabs>

#### 예시: 모델 라이프사이클에서 에러 발생시키기

아래는 [커스텀 모델 라이프사이클](/cms/backend-customization/models#lifecycle-hooks)에서 에러를 발생시켜 요청을 중단하고, 관리자 패널에 올바른 에러 메시지를 반환하는 예시입니다. 일반적으로 `beforeX` 라이프사이클에서만 에러를 발생시키는 것이 좋습니다.

</Tabs>

### 정책(Policy)

[정책(Policy)](/cms/backend-customization/policies)은 컨트롤러 실행 전 동작하는 특수한 미들웨어입니다. 사용자의 액션 허용 여부를 검사하며, 허용되지 않을 경우 `return false`로 일반 에러를 발생시킬 수 있습니다. 또는 Strapi의 `ForbiddenError`, `ApplicationError` 클래스(둘 다 [기본 에러 클래스](#default-error-classes) 참고), 그리고 

</Tabs>

### 기본 에러 클래스

기본 에러 클래스는 `@strapi/utils` 패키지에서 import하여 사용할 수 있습니다. 모든 기본 에러 클래스는 확장하여 커스텀 에러 클래스를 만들 수 있습니다. 커스텀 에러 클래스는 코드 내에서 에러를 발생시키는 데 사용할 수 있습니다.

</Tabs>



# 관리자 패널
Source: https://docs.strapi.io/cms/features/admin-panel

# 관리자 패널

관리자 패널은 Strapi 애플리케이션의 백오피스입니다. 관리자 패널에서 콘텐츠 타입을 관리하고 실제 콘텐츠를 작성할 수 있을 뿐만 아니라, 관리자 및 최종 사용자 모두를 관리할 수 있습니다.

### 프로필 정보(이름, 이메일, 사용자명) 수정

1. *프로필* 섹션으로 이동합니다.
2. 다음 옵션을 입력합니다:

| 프로필 & 경험 | 안내 |
| -------------------- | ------------------------------------------------- |
| 이름 | 텍스트박스에 이름을 입력하세요. |
| 성 | 텍스트박스에 성을 입력하세요. |
| 이메일 | 텍스트박스에 전체 이메일 주소를 입력하세요. |
| 사용자명 | (선택) 텍스트박스에 사용자명을 입력하세요. |

3. **저장** 버튼을 클릭합니다.

### 계정 비밀번호 변경

1. *비밀번호 변경* 섹션으로 이동합니다.
2. 다음 옵션을 입력합니다:

| 비밀번호 변경 | 안내 |
| --------------------- | ------------------------------------------- |
| 현재 비밀번호 | 텍스트박스에 현재 비밀번호를 입력하세요. |
| 새 비밀번호 | 텍스트박스에 새 비밀번호를 입력하세요. |
| 비밀번호 확인 | 텍스트박스에 동일한 새 비밀번호를 입력하세요. |

3. **저장** 버튼을 클릭합니다.

:::tip
비밀번호 입력란 옆의  아이콘을 클릭하면 비밀번호가 표시됩니다.
:::

### 인터페이스 언어 선택

*경험* 섹션에서 *인터페이스 언어* 드롭다운을 사용해 원하는 언어를 선택하세요.

:::note
인터페이스 언어 선택은 본인 계정에만 적용됩니다. 동일 애플리케이션의 다른 사용자는 각자 다른 언어를 사용할 수 있습니다.
:::

### 인터페이스 모드(라이트, 다크) 선택

기본적으로 브라우저의 모드에 따라 인터페이스 모드가 결정됩니다. 하지만 *경험* 섹션에서 *인터페이스 모드* 드롭다운을 통해 라이트 모드 또는 다크 모드를 직접 선택할 수 있습니다.

:::note
인터페이스 모드 선택 역시 본인 계정에만 적용됩니다.
:::

### 로고 커스터마이징

**관리자 패널 설정 경로:**  *설정 > 글로벌 설정 > 개요*

Strapi의 기본 로고는 애플리케이션의 메인 네비게이션과 인증 페이지에 표시됩니다. 이 이미지는 원하는 로고로 변경할 수 있습니다.

1. *메뉴 로고* 또는 *Auth 로고*의 업로드 영역을 클릭합니다.
2. 파일 탐색, 드래그&드롭, URL 입력 등으로 원하는 로고를 업로드합니다. 로고는 750x750px 이하를 권장합니다.
3. 업로드 창에서 **로고 업로드** 버튼을 클릭합니다.
4. 우측 상단의 **저장** 버튼을 클릭합니다.

업로드 후에는  아이콘으로 새 로고로 교체하거나,  아이콘으로 기본 Strapi 로고 또는 설정 파일에 지정한 로고로 초기화할 수 있습니다.

:::note
두 로고 모두 [관리자 패널 커스터마이징](/cms/admin-panel-customization/logos) 문서에서 설명한 대로 설정 파일을 통해 프로그래밍 방식으로도 변경할 수 있습니다. 단, 관리자 패널에서 직접 업로드한 로고가 설정 파일의 로고보다 우선 적용됩니다.
:::

## Usage

:::caution
In order to access the admin panel, your Strapi application must be launched, and you must be aware of the URL to its admin panel (e.g. `api.example.com/admin`).
:::

To access the admin panel:

1. Go to the URL of your Strapi application's admin panel.
2. Enter your credentials to log in.
3. Click on the **Login** button. You should be redirected to the homepage of the admin panel.

:::note
If you prefer or are required to log in via an SSO provider, please refer to the [Single Sign-On documentation](/cms/features/sso).
:::



# API 토큰
Source: https://docs.strapi.io/cms/features/api-tokens

# API 토큰

API 토큰을 사용하면 사용자가 REST 및 GraphQL API 쿼리를 인증할 수 있습니다([API 소개](/cms/api/content-api) 참고).

</IdentityCard>

</Tabs>

이 키는 토큰 값을 암호화/복호화하는 데 사용됩니다. 이 키가 없으면 토큰은 계속 사용할 수 있지만, 최초 표시 이후에는 볼 수 없습니다. 새 Strapi 프로젝트는 이 키가 자동으로 생성됩니다.

## 사용법

API 토큰을 사용하면 [REST API](/cms/api/rest) 또는 [GraphQL API](/cms/api/graphql) 엔드포인트에서 인증된 사용자로 요청을 실행할 수 있습니다.

API 토큰은 사용자 계정을 별도로 관리하거나 Users & Permissions 플러그인 설정을 변경하지 않고도, 사람이나 애플리케이션에 접근 권한을 부여할 때 유용합니다.

Strapi의 REST API에 요청할 때는, API 토큰을 요청의 `Authorization` 헤더에 다음과 같은 형식으로 추가해야 합니다: `bearer your-api-token`.

:::note
읽기 전용 API 토큰은 `find` 및 `findOne` 기능만 접근할 수 있습니다.
:::



# 감사 로그
Source: https://docs.strapi.io/cms/features/audit-logs

# 감사 로그

</IdentityCard>

## 사용법

**기능 사용 경로:**  설정 > 관리자 패널 - 감사 로그

감사 로그 기능은 다음 이벤트를 기록합니다:

| 이벤트 | 동작 |
| --- | --- |
| 콘텐츠 타입 | `create`, `update`, `delete` |
| 항목(초안/발행) | `create`, `update`, `delete`, `publish`, `unpublish` |
| 미디어 | `create`, `update`, `delete` |
| 로그인 / 로그아웃 | `success`, `fail` |
| 역할 / 권한 | `create`, `update`, `delete` |
| 사용자 | `create`, `update`, `delete` |

각 로그 항목에는 다음 정보가 표시됩니다:

- 동작: 사용자가 수행한 동작의 유형(예: `create` 또는 `update`)
- 날짜: 동작이 수행된 날짜 및 시간
- 사용자: 동작을 수행한 사용자
- 세부 정보: 동작에 대한 더 많은 정보를 보여주는 모달(예: 사용자 IP 주소, 요청 본문, 응답 본문 등)

### 로그 필터링

기본적으로 모든 로그는 최신순(내림차순)으로 표시됩니다. 다음 기준으로 로그를 필터링할 수 있습니다:

- 동작: 필터링할 동작 유형 선택(예: `create` 또는 `update`)
- 사용자: 필터링할 사용자 선택
- 날짜: 필터링할 날짜(범위) 및 시간 선택

### 로그 세부 정보 접근 {#log-details}

어떤 로그 항목이든  아이콘을 클릭하면 해당 동작에 대한 더 많은 정보를 볼 수 있는 모달이 열립니다. 모달의 *Payload* 섹션에서는 세부 정보를 인터랙티브한 JSON 컴포넌트로 표시하여, JSON 객체를 펼치거나 접을 수 있습니다.



# 콘텐츠 이력
Source: https://docs.strapi.io/cms/features/content-history

# 콘텐츠 이력

</IdentityCard>

## 사용법

**기능 사용 경로:**  콘텐츠 매니저 <br/> 콘텐츠 타입의 편집 화면에서: 오른쪽 상단의  클릭 후  **콘텐츠 이력** 선택

### 콘텐츠 이력 탐색

콘텐츠 이력을 통해 다음과 같이 콘텐츠를 탐색할 수 있습니다:

- 왼쪽의 메인 뷰: 선택한 버전의 필드와 내용을 나열합니다.
- 오른쪽의 사이드바: 사용 가능한 전체 버전 수와 각 버전에 대해
  - 버전이 생성된 날짜 및 시간
  - 버전을 생성한 사용자
  - 상태(초안, 수정됨, 발행됨) 표시([초안 & 발행](/cms/features/draft-and-publish) 참고)

:::note
콘텐츠 이력의 메인 뷰에서는 필드가 다른 버전에서 존재하지 않거나, 삭제되었거나, 이름이 변경된 경우를 명확하게 표시합니다. 선택한 버전에서 알 수 없는 필드는 _알 수 없는 필드(Unknown fields)_ 항목 아래에 표시됩니다.
:::

### 이전 버전 복원

문서의 이전 버전을 복원할 수 있습니다. 버전을 복원하면 해당 버전의 내용이 현재 초안 버전의 내용으로 덮어써집니다. 문서는 "수정됨(Modified)" 상태로 전환되며, 이후 언제든지 발행할 수 있습니다([초안 발행](/cms/features/draft-and-publish#publishing-a-draft) 참고).

1. 콘텐츠 이력에서 오른쪽 사이드바를 통해 복원할 버전을 선택합니다.
2. **복원** 버튼을 클릭합니다.
3. _확인_ 창에서 **복원**을 클릭합니다.

:::note
콘텐츠 타입에 [국제화(i18n)](/cms/features/internationalization) 기능이 활성화되어 있고, 복원하려는 버전에 고유 필드(모든 로케일에서 동일한 값)가 있다면, 해당 필드는 모든 로케일에 대해 복원됩니다.
:::



# 콘텐츠 매니저
Source: https://docs.strapi.io/cms/features/content-manager

# 콘텐츠 매니저

</IdentityCard>

## 개요

<!--

</Tabs>

### Configuring the edit view {#edit-view-settings}

</Tabs>

## Usage

<br/>

### Creating & Writing content

In Strapi, writing content consists in filling up fields, which are meant to contain specific content (e.g. text, numbers, media, etc.). These fields were configured for the collection or single type beforehand, through the [Content-type Builder](/cms/features/content-type-builder).

</Tabs>

#### Dynamic zones

Dynamic zones are a combination of components, which themselves are composed of several fields. Writing the content of a dynamic zone requires additional steps in order to access the fields.

</Tabs>

:::tip
- Not all entries are listed by default: more can be displayed by clicking on the **Load more** button. Also, instead of choosing an entry by scrolling the list, you can click any relational field drop-down list and type to search a specific entry.

- Click on the name of an entry to display a modal from where you will be able to edit the relational field's content-type. For now, you can only edit a relation on-the-fly and not create a new one.
:::

:::note
- If the [Draft & Publish feature](/cms/features/draft-and-publish) is activated for the content-type the relational field belongs to, you will notice blue or green dots next to the entries names in the drop-down list. They indicate the status of the entry, respectively draft or published content.
- If the [Internationalization (i18n) feature](/cms/features/internationalization) is enabled for the content-type, the list of entries may be limited or differ from one locale to another. Only relevant entries that can possibly be chosen for a relational field will be listed.
:::

<!-- Add a section "Managing entries" here with the explanations of the list view interface? Or before "Creating & Writing content"? Or maybe have 1. "Creating & managing entries" 2. "Writing content"? Or just use a Guideflow? -->

### Deleting content

You can delete content by deleting any entry of a collection type, or the default entry of a single type.

1. In the edit view of the entry, click on  at the top right of the interface, and click the **Delete document** button.<br/>If Internationalization is enabled for the content-type, you can also choose to delete only the currently selected locale by clicking on the **Delete locale** button.
2. In the window that pops up, click on the **Confirm** button to confirm the deletion.

:::tip
You can delete entries from the list view of a collection type, by clicking on   on the right side of the entry's record in the table, then choosing the  **Delete document** button.<br/>If [Internationalization](/cms/features/internationalization) is enabled for the content-type, **Delete document** deletes all locales while **Delete locale** only deletes the currently listed locale.



# Content-type Builder
Source: https://docs.strapi.io/cms/features/content-type-builder

# Content-type Builder

From the 
  
</IdentityCard>

## Overview

  </Tabs>
3. Click the **Finish** button in the dialog.
4. Click the **Save** button in the Content-Type Builder navigation.

#### Fields

From the table that lists the fields of your content-type, you can:
- Click on the 

</Tabs>

#### <img width="28" src="/img/assets/icons/v5/ctb_richtextblocks.svg" /> Rich Text (Blocks) {#rich-text-blocks}

The Rich Text (Blocks) field displays an editor with live rendering and various options to manage rich text. This field can be used for long written content, even including images and code.

</Tabs>

:::strapi React renderer
If using the Blocks editor, we recommend that you also use the 

</Tabs>

#### <img width="28" src="/img/assets/icons/v5/ctb_date.svg" /> Date {#date}

The Date field can display a date (year, month, day), time (hour, minute, second) or datetime (year, month, day, hour, minute, and second) picker.

</Tabs>
 
#### <img width="28" src="/img/assets/icons/v5/ctb_password.svg" /> Password

The Password field displays a password field that is encrypted.

</Tabs>

#### <img width="28" src="/img/assets/icons/v5/ctb_media.svg" /> Media {#media}

The Media field allows to choose one or more media files (e.g. image, video) from those uploaded in the Media Library of the application.

</Tabs>

#### <img width="28" src="/img/assets/icons/v5/ctb_relation.svg" /> Relation {#relation}

The Relation field allows to establish a relation with another content-type, that must be a collection type.

There are 6 different types of relations:

- <img width="25" src="/img/assets/icons/v5/ctb_relation_oneway.svg" /> One way: Content-type A *has one* Content-type B
- <img width="25" src="/img/assets/icons/v5/ctb_relation_1to1.svg" /> One-to-one: Content-type A *has and belong to one* Content-type B
- <img width="25" src="/img/assets/icons/v5/ctb_relation_1tomany.svg" /> One-to-many: Content-type A *belongs to many* Content-type B
- <img width="25" src="/img/assets/icons/v5/ctb_relation_manyto1.svg" /> Many-to-one: Content-type B *has many* Content-type A
- <img width="25" src="/img/assets/icons/v5/ctb_relation_manytomany.svg" /> Many-to-many: Content-type A *has and belongs to many* Content-type B
- <img width="25" src="/img/assets/icons/v5/ctb_relation_manyway.svg" /> Many way: Content-type A *has many* Content-type B

</Tabs>

#### <img width="28" src="/img/assets/icons/v5/ctb_boolean.svg" /> Boolean {#boolean}

The Boolean field displays a toggle button to manage boolean values (e.g. Yes or No, 1 or 0, True or False).

</Tabs>

#### <img width="28" src="/img/assets/icons/v5/ctb_json.svg" /> JSON {#json}

The JSON field allows to configure data in a JSON format, to store JSON objects or arrays.

</Tabs>

#### <img width="28" src="/img/assets/icons/v5/ctb_email.svg" /> Email {#email}

The Email field displays an email address field with format validation to ensure the email address is valid.

</Tabs>

#### <img width="28" src="/img/assets/icons/v5/ctb_password.svg" /> Password {#password}

The Password field displays a password field that is encrypted.

</Tabs>

#### <img width="28" src="/img/assets/icons/v5/ctb_enum.svg" /> Enumeration {#enum}

The Enumeration field allows to configure a list of values displayed in a drop-down list.

</Tabs>

:::caution
Enumeration values should always have an alphabetical character preceding any number as it could otherwise cause the server to crash without notice when the GraphQL plugin is installed.
:::

#### <img width="28" src="/img/assets/icons/v5/ctb_uid.svg" /> UID {#uid}

The UID field displays a field that sets a unique identifier, optionally based on an existing other field from the same content-type.

</Tabs>

:::tip
The UID field can be used to create a slug based on the Attached field.
:::

#### <img width="28" src="/img/assets/icons/v5/ctb_richtext.svg" /> Rich Text (Markdown) {#rich-text-markdown}

The Rich Text (Markdown) field displays an editor with basic formatting options to manage rich text written in Markdown. This field can be used for long written content.

</Tabs>

#### <img width="28" src="/img/assets/icons/v5/ctb_component.svg" /> Components {#components}

Components are a combination of several fields. Components allow to create reusable sets of fields, that can be quickly added to content-types, dynamic zones but also nested into other components.

When configuring a component through the Content-type Builder, it is possible to either:

- create a new component by clicking on *Create a new component* (see [Creating a new component](#new-component)),
- or use an existing one by clicking on *Use an existing component*.

</Tabs>

#### <img width="28" src="/img/assets/icons/v5/ctb_dz.svg" /> Dynamic zones {#dynamiczones}

Dynamic zones are a combination of components that can be added to content-types. They allow a flexible content structure as once in the Content Manager, administrators have the choice of composing and rearranging the components of the dynamic zone how they want.

</Tabs>

After configuring the settings of the dynamic zone, its components must be configured as well. It is possible to either choose an existing component or create a new one.

:::caution
When using dynamic zones, different components cannot have the same field name with different types (or with enumeration fields, different values).
:::

#### Custom fields

[Custom fields](/cms/features/custom-fields) are a way to extend Strapi's capabilities by adding new types of fields to content-types or components. Once installed (see [Marketplace](/cms/plugins/installing-plugins-via-marketplace) documentation), custom fields are listed in the _Custom_ tab when selecting a field for a content-type.

Each custom field type can have basic and advanced settings. The  lists available custom fields, and hosts dedicated documentation for each custom field, including specific settings.

### Deleting content-types

Content types and components can be deleted through the Content-type Builder. Deleting a content-type automatically deletes all entries from the Content Manager that were based on that content-type. The same goes for the deletion of a component, which is automatically deleted from every content-type or entry where it was used.

1. In the  Content-type Builder sub navigation, click on the name of the content-type or component to delete.
2. In the edition interface of the chosen content-type or component, click on the  **Edit** button on the right side of the content-type's or component's name.
3. In the edition window, click on the **Delete** button.
4. In the confirmation window, confirm the deletion.
5. Click on the **Save** button in the Content-type Builder sub navigation.

:::caution
Deleting a content-type only deletes what was created and available from the Content-type Builder, and by extent from the admin panel of your Strapi application. All the data that was created based on that content-type is however kept in the database. For more information, please refer to the related .
:::



# Custom Fields
Source: https://docs.strapi.io/cms/features/custom-fields

# Custom Fields

Custom fields extend Strapi's capabilities by adding new types of fields to content-types and components. Once created or added to Strapi via plugins, custom fields can be used in the Content-Type Builder and Content Manager just like built-in fields.

</IdentityCard>

## Configuration

Ready-made custom fields can be found on the [Marketplace](https://market.strapi.io/plugins?categories=Custom+fields). Once installed these, no other configuration is required, and you can start using them (see [usage](#usage)).

You can also develop your own custom field.

### Developing your own custom field

Though the recommended way to add a custom field is through creating a plugin, app-specific custom fields can also be registered within the global `register` [function](/cms/configurations/functions) found in `src/index` and `src/admin/app` files.

:::note Current limitations
* Custom fields can only be shared and distributed on the Marketplace using plugins.
* Custom fields cannot add new data types to Strapi and must use existing, built-in Strapi data types described in the [models' attributes](/cms/backend-customization/models#model-attributes) documentation. 
* You also cannot modify an existing data type.
* Special data types unique to Strapi, such as relation, media, component, or dynamic zone data types, cannot be used in custom fields.
:::

:::prerequisites

</Tabs>

The custom field could also be declared directly within the `strapi-server.js` file if you didn't have the plugin code scaffolded by the CLI generator:

</Tabs>

#### Registering a custom field in the admin panel

:::prerequisites

</Tabs>

##### Components

`app.customFields.register()` must pass a `components` object with an `Input` React component to use in the Content Manager's edit view.

**Example: Registering an Input component:**

In the following example, the `color-picker` plugin was created using the CLI generator (see [plugins development](/cms/plugins-development/developing-plugins.md)):

</Tabs>

<details>
<summary>Props passed to the custom field <code>Input</code> component:</summary>

| Prop             | Description                                                                                                                                                                                                                               | Type                                                                 |
| ---------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------- |
| `attribute`      | The attribute object with custom field's underlying Strapi type and options                                                                                                                                                               | `{ type: String, customField: String }`                              |
| `description`    | The field description set in [configure the view](/cms/features/content-manager#edit-view-settings)                                                                                                  | 

</Tabs>

:::tip
For a more detailed view of the props provided to the customFields and how they can be used check out the 

</Tabs>

<!-- TODO: replace these tip and links by proper documentation of all the possible shapes and parameters for `options` -->

:::tip
The Strapi codebase gives an example of how settings objects can be described: check the  file for the `base` settings and the  file for the `advanced` settings. The base form lists the settings items inline but the advanced form gets the items from an  file.
:::

## Usage

<br/>

### In the admin panel

Custom fields can be added to Strapi either by installing them from the [Marketplace](/cms/plugins/installing-plugins-via-marketplace) or by creating your own.

Once added to Strapi, custom fields can be added to any content type. Custom fields are listed in the _Custom_ tab when selecting a field for a content-type.

<!-- TODO: add screenshot of content-type builder with custom fields tab here -->

Each custom field type can have basic and advanced settings. The  lists available custom fields, and hosts dedicated documentation for each custom field, including specific settings.

### In the code

Once created and used, custom fields are defined like any other attribute in the model's schema. 

Custom fields are explicitly defined in the [attributes](/cms/backend-customization/models#model-attributes) of a model with `type: customField`.

As compared to how other types of models are defined, custom fields' attributes also show the following specificities:

- Custom field have a `customField` attribute. Its value acts as a unique identifier to indicate which registered custom field should be used, and follows one of these 2 formats:

    | Format               |  Origin |
    |----------------------|------------------|
    | `plugin::plugin-name.field-name` | The custom field was created through a plugin |
    | `global::field-name` | The custom field is specific to the current Strapi application and was created directly within the `register` [function](/cms/configurations/functions) |

- Custom fields can have additional parameters depending on what has been defined when registering the custom field (see [server registration](#registering-a-custom-field-on-the-server) and [admin panel registration](#registering-a-custom-field-in-the-admin-panel)).

**Example: A simple `color` custom field model definition:**

```json title="/src/api/[apiName]/[content-type-name]/content-types/schema.json"

{
  // …
  "attributes": {
    "color": { // name of the custom field defined in the Content-Type Builder
      "type": "customField",
      "customField": "plugin::color-picker.color",
      "options": {
        "format": "hex"
      }
    }
  }
  // …
}
```



# 데이터 관리
Source: https://docs.strapi.io/cms/features/data-management

# 데이터 관리

데이터 관리 기능은 데이터를 가져오거나 내보내거나, 서로 다른 Strapi 인스턴스 간에 전송할 때 사용할 수 있습니다. 데이터 관리는 CLI 기반으로 동작하지만, 일부 설정은 관리자 패널에서 진행합니다.

</IdentityCard>

## 설정

데이터 관리 기능의 일부 설정은 관리자 패널에서, 일부는 프로젝트 코드에서 관리할 수 있습니다.

### 관리자 패널 설정

:::prerequisites
`config/admin` 설정 파일에 `transfer.token.salt`가 정의되어 있어야 합니다([코드 기반 설정](#code-based-configuration) 참고).
:::

**기능 설정 경로:** 

</Tabs>

## Usage

The Data Management system is CLI-based only, meaning any import, export, or transfer command must be executed from the terminal. Exhaustive documentation for each command is accessible from the following pages:



# 드래프트 & 발행
Source: https://docs.strapi.io/cms/features/draft-and-publish

# 드래프트 & 발행

드래프트 & 발행 기능을 사용하면 콘텐츠의 초안을 관리할 수 있습니다.

</IdentityCard>

On the back-end server of Strapi, the Document Service API can also be used to interact with localized content:



# 이메일
Source: https://docs.strapi.io/cms/features/email

# 이메일

이메일 기능을 사용하면 Strapi 애플리케이션에서 서버 또는 외부 제공업체를 통해 이메일을 발송할 수 있습니다.

</IdentityCard>

## 설정

이메일 기능의 대부분의 설정 옵션은 Strapi 프로젝트의 코드에서 처리됩니다. 이메일 기능은 관리자 패널에서 별도의 설정이 불가능하지만, 관리자가 이메일 발송이 정상적으로 동작하는지 테스트할 수 있습니다.

### 관리자 패널 설정

**기능 설정 경로:** 

</Tabs>

##### 제공업체 설정

설치한 제공업체는 [ `/config/plugins` 파일](/cms/configurations/plugins)에서 활성화 및 설정합니다. 파일이 없다면 새로 생성해야 합니다.

각 제공업체별로 설정 항목이 다르니, 마켓플레이스 또는 

</Tabs>

:::note

* 환경별로 다른 제공업체를 사용하려면 `/config/env/${yourEnvironment}/plugins.js|ts`에 올바른 설정을 지정하세요([환경](/cms/configurations/environment) 참고).
* 한 번에 하나의 이메일 제공업체만 활성화됩니다. 이메일 제공업체 설정이 적용되지 않는다면 plugins.js|ts 파일의 위치를 확인하세요.
* Strapi 설치 시 생성되는 두 개의 이메일 템플릿으로 새 제공업체를 테스트할 때, 템플릿의 _발신자 이메일_이 기본값(`no-reply@strapi.io`)으로 되어 있으니, 제공업체에 맞게 수정해야 테스트가 정상 동작합니다([템플릿 로컬 설정](/cms/features/users-permissions#templating-emails) 참고).

:::

###### 환경별 설정

제공업체 설정 시 `NODE_ENV` 환경 변수에 따라 설정을 변경하거나, 환경별 자격증명을 사용할 수 있습니다.

`/config/env/{env}/plugins.js|ts` 파일에 환경별 설정을 추가하면, 기본 설정을 덮어씁니다.

##### 제공업체 직접 구현

직접 제공업체를 구현하려면 

</Tabs>

send 함수에서는 다음에 접근할 수 있습니다:

* `providerOptions`: plugins.js|ts에 작성한 제공업체 설정
* `settings`: plugins.js|ts에 작성한 이메일 설정
* `options`: 이메일 서비스에서 send 함수 호출 시 전달하는 옵션

</Tabs>



# 국제화(i18n)
Source: https://docs.strapi.io/cms/features/internationalization

# 국제화(i18n)

국제화(i18n) 기능을 사용하면 다양한 언어(로케일)로 콘텐츠를 관리할 수 있습니다.

</IdentityCard>

Strapi 백엔드 서버에서는 Document Service API를 통해서도 로케일별 콘텐츠를 다룰 수 있습니다:



# 미디어 라이브러리
Source: https://docs.strapi.io/cms/features/media-library

# 미디어 라이브러리

</IdentityCard>

:::info
Code-based configuration instructions on the present page detail options for the default upload provider. If using another provider, please refer to the available configuration parameters in that provider's documentation.
:::

#### Available options

When using the default upload provider, the following specific configuration options can be declared in an `upload.config` object within [the `config/plugins` file](/cms/configurations/plugins). All parameters are optional:

| Parameter                                   | Description                                                                                                         | Type    | Default |
| ------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ------- | ------- |
| `providerOptions.localServer`        | Options that will be passed to 

</Tabs>

#### Local server

By default Strapi accepts `localServer` configurations for locally uploaded files. These will be passed as the options for 

</Tabs>

#### Max file size

The Strapi middleware in charge of parsing requests needs to be configured to support file sizes larger than the default of 200MB. This must be done in addition to provider options passed to the Upload package for `sizeLimit`.

:::caution
You may also need to adjust any upstream proxies, load balancers, or firewalls to allow for larger file sizes. For instance, 

</Tabs>

In addition to the middleware configuration, you can pass the `sizeLimit`, which is an integer in bytes, in the [/config/plugins file](/cms/configurations/plugins):

</Tabs>

#### Upload request timeout

By default, the value of `strapi.server.httpServer.requestTimeout` is set to 330 seconds. This includes uploads.

To make it possible for users with slow internet connection to upload large files, it might be required to increase this timeout limit. The recommended way to do it is by setting the `http.serverOptions.requestTimeout` parameter in [the `config/servers` file](/cms/configurations/server).

An alternate method is to set the `requestTimeout` value in [the `bootstrap` function](/cms/configurations/functions#bootstrap) that runs before Strapi gets started. This is useful in cases where it needs to change programmatically—for example, to temporarily disable and re-enable it:

</Tabs>

#### Responsive Images

When the [`Responsive friendly upload` admin panel setting](#admin-panel-configuration) is enabled, the plugin will generate the following responsive image sizes:

| Name    | Largest dimension |
| :------ | :--------- |
| large   | 1000px     |
| medium  | 750px      |
| small   | 500px      |

These sizes can be overridden in `/config/plugins`:

</Tabs>

:::caution
Breakpoint changes will only apply to new images, existing images will not be resized or have new sizes generated.
:::

## Usage

**Path to use the feature:** 

### Use public assets in your code {#public-assets}

Public assets are static files (e.g., images, video, CSS files, etc.) that you want to make accessible to the outside world.

Because an API may need to serve static assets, every new Strapi project includes by default a folder named `/public`. Any file located in this directory is accessible if the request's path doesn't match any other defined route and if it matches a public file name (e.g. an image named `company-logo.png` in `./public/` is accessible through `/company-logo.png` URL).

:::tip
`index.html` files are served if the request corresponds to a folder name (`/pictures` url will try to serve `public/pictures/index.html` file).
:::

:::caution
The dotfiles are not exposed. It means that every file name that starts with `.`, such as `.htaccess` or `.gitignore`, are not served.
:::



# 미리보기
Source: https://docs.strapi.io/cms/features/preview

# 미리보기

미리보기 기능을 사용하면 Strapi 관리자 패널에서 프론트엔드 애플리케이션을 직접 미리 볼 수 있습니다. 이 기능은 Content Manager의 편집 뷰에서 콘텐츠를 수정할 때, 실제 결과가 어떻게 보일지 바로 확인하는 데 유용합니다.

</IdentityCard>

</Tabs>

<details>
<summary>Caching in Next.js:</summary>

In Next.js, [cache persistence](https://nextjs.org/docs/app/building-your-application/caching) may require additional steps. You might need to invalidate the cache by making an API call from the client side to the server, where the revalidation logic will be handled. Please refer to Next.js documentation for details, for instance with the [revalidatePath() method](https://nextjs.org/docs/app/building-your-application/caching#revalidatepath).
<br/>

</details>

#### [Front end] Next steps

Once the preview system is set up, you need to adapt your data fetching logic to handle draft content appropriately. This involves the following steps:

1. Create or adapt your data fetching utility to check if draft mode is enabled
2. Update your API calls to include the draft status parameter when appropriate

The following, taken from the  Strapi demo application, is an example of how to implement draft-aware data fetching in your Next.js front-end application:

```typescript {8-18}

  contentType: string,
  params: Record = {}
): Promise {
  // Check if Next.js draft mode is enabled
  const { isEnabled: isDraftMode } = draftMode();
  
  try {
    const queryParams = { ...params };
    // Add status=draft parameter when draft mode is enabled
    if (isDraftMode) {
      queryParams.status = "draft";
    }
    
    const url = `${baseURL}/${contentType}?${qs.stringify(queryParams)}`;
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(
        `Failed to fetch data from Strapi (url=${url}, status=${response.status})`
      );
    }
    return await response.json();
  } catch (error) {
    console.error("Error fetching content:", error);
    throw error;
  }
}
```

This utility method can then be used in your page components to fetch either draft or published content based on the preview state:

```typescript
// In your page component:
const pageData = await fetchContentType('api::page.page', {
  // Your other query parameters
});
```

## Usage

**Path to use the feature:**  Content Manager, edit view of your content type

:::strapi Preview vs. Live Preview
Based on your CMS plan, your experience with Preview will be different:
- With the Free plan, Preview will be full screen only.
- With the  and  plans, you get access to Live Preview. With Live Preview, you can see the Preview alongside the Edit view of the Content Manager, allowing you to edit your content and previewing it simultaneously.
:::

Once the Preview feature is properly set up, an **Open preview** button is visible on the right side of the [Content Manager's edit view](/cms/features/content-manager#overview). Clicking it will display the preview of your content as it will appear in your front-end application, but directly within Strapi's the admin panel.

<!-- TODO: add a dark mode GIF -->

Once the Preview is open, you can:

- click the close button  in the upper left corner to go back to the Edit View of the Content Manager,
- switch between previewing the draft and the published version (if [Draft & Publish](/cms/features/draft-and-publish) is enabled for the content-type),
- and click the link icon  in the upper right corner to copy the preview link. Depending on the preview tab you are currently viewing, this will either copy the link to the preview of the draft or the published version.

Additionally, with Live Preview, you can:
- with  and  plans, expand the side panel by clicking on the  button to make the Preview full screen,
- and, with the  plan, use buttons at the top right of the editor to define the assignee and stage for the [Review Workflows feature](/cms/features/review-workflows) if enabled.

:::note
In the Edit view of the Content Manager, the Open preview button will be disabled if you have unsaved changes. Save your latest changes and you should be able to preview content again.
:::



# Role-Based Access Control (RBAC)
Source: https://docs.strapi.io/cms/features/rbac

# Role-Based Access Control (RBAC)

The Role-Based Access Control (RBAC) feature allows the management of the administrators, who are the users of the admin panel. More specifically, RBAC manages the administrators' accounts and roles.

</IdentityCard>

</Tabs>

4. Click on the **Save** button on the top right corner.

#### Setting custom conditions for permissions

For each permission of each category, a 

## Usage

**Path to use the feature:**  *Settings > Administration panel > Users*

The *Users* interface displays a table listing all the administrators of your Strapi application. More specifically, for each administrator listed in the table, their main account information are displayed, including name, email and attributed role. The status of their account is also indicated: active or inactive, depending on whether the administrator has already logged in to activate the account or not.

From this interface, it is possible to:

- make a textual search  to find specific administrators,
- set filters  to find specific administrators,
- create a new administrator account (see [Creating a new account](#creating-a-new-account)) ,
- delete an administrator account  (see [Deleting an account](#deleting-an-account)),
- or access information regarding an administrator account, and edit it  (see [Editing an account](#editing-an-account)).

:::tip
Sorting can be enabled for most fields displayed in the table. Click on a field name, in the header of the table, to sort on that field.
:::

### Creating a new account

1. Click on the  **Invite new user** button.
2. In the *Invite new user* window, fill in the Details information about the new administrator:

  | User information | Instructions                                                                 |
  | ---------------- | ---------------------------------------------------------------------------- |
  | First name       | (mandatory) Write the administrator's first name in the textbox.             |
  | Last name        | (mandatory) Write the administrator's last name in the textbox.              |
  | Email            | (mandatory) Write the administrator's complete email address in the textbox. |

3. Fill in the Login settings about the new administrator:

  | Setting          | Instructions                                                                                                    |
  | ---------------- | --------------------------------------------------------------------------------------------------------------- |
  | User's roles     | (mandatory) Choose from the drop-down list the role to attribute to the new administrator.                      |
  | Connect with SSO | (optional) Click **TRUE** or **FALSE** to connect the new administrator account with SSO.                       |

4. Click on the **Invite user** button in the bottom right corner of the *Add new user* window.
5. A URL appears at the top of the window: it is the URL to send the new administrator for them to log in for the first time to your Strapi application. Click the copy button  to copy the URL.
6. Click on the **Finish** button in the bottom right corner to finish the new administrator account creation. The new administrator should now be listed in the table.

:::note
The administrator invitation URL is accessible from the administrator's account until it has been activated.
:::

### Deleting an account

It is possible to delete one or several administrator accounts at the same time.

1. Click on the delete button  on the right side of the account's record, or select one or more accounts by ticking the boxes on the left side of the accounts' records then click on the  **Delete** button above the table.
2. In the deletion window, click on the **Confirm** button to confirm the deletion.

### Editing an account

1. Click on the name of the administrator whose account you want to edit.
2. In the *Details* area, edit your chosen account details:

| User information      | Instructions  |
| --------------------- | ----------------------- |
| First name            | Write the administrator's first name in the textbox.                                        |
| Last name             | Write the administrator's last name in the textbox.                                         |
| Email                 | Write the administrator's complete email address in the textbox.                            |
| Username              | Write the administrator's username in the textbox.                                          |
| Password              | Write the new administrator account's password in the textbox.                              |
| Confirm password      | Write the new password in the textbox for confirmation.                                     |
| Active                | Click on **TRUE** to activate the administrator's account.                                  |

3. (optional) In the *Roles* area, edit the role of the administrator:
  - Click on the drop-down list to choose a new role, and/or add it to the already attributed one.
  - Click on the delete button  to delete an already attributed role.
4. Click on the **Save** button in the top right corner.



# Releases
Source: https://docs.strapi.io/cms/features/releases

# Releases

</IdentityCard>

## Configuration

To be able to include your content in releases, and to schedule and publish those releases, you must first create them. You can also modify the releases' default timezone to use when scheduling a publication, as well as deleting releases that are obsolete or irrelevant.

### Choosing default timezone

**Path to configure the feature:**  Settings

1. Click on the _Default timezone_ dropdown list and choose the default timezone to use.
2. Click **Save**.

### Creating a release

**Path to configure the feature:**  Releases

1. Click the  **New Release** button in the upper right corner.  
2. Give the release a name.
3. (_optional_) If you want to schedule the release publication instead of publishing the release manually, check the **Schedule release** checkbox and define the date, time, and timezone for publication.
4. Click the **Continue** button.

:::tip
Your releases can be renamed afterwards, by editing the release using the  then  **Edit** buttons.
:::

<!-- TO INTEGRATE IF THE CALLOUT ISN'T ENOUGH

### Renaming a release

You can rename a release. To do so, while on a release page:

1. Click on the  button in the top right corner of the admin panel.
2. Select  **Edit**.
3. In the modal, change the name of the release in the _Name_ field.
4. Click **Continue** to save the change.-->

### Deleting a release

**Path:**  Releases

Deleting a release will only delete the release itself, but not the content-type entries included in the release.

1. Click on the  button in the top right corner of the admin panel.
2. Select  **Delete**.
3. In the confirmation dialog, click  **Confirm**.

## Usage

**Path to use the feature:**  Releases and  Content Manager

:::caution
Since publishing an entry with a release means turning a draft entry into a published entry, Releases will not work if [Draft & Publish](/cms/features/draft-and-publish) is disabled for the content-type.
:::

### Including content in a release

:::prerequisites
- Before entries can be added to a release, you must create a release from the  Releases page.
- Adding content to a release requires the appropriate permissions for the Content-Releases plugin (see [configuring administrator roles](/cms/features/users-permissions)).
:::

#### One entry at a time

**Path:** Edit view of the  Content Manager

1. Click on  in the _Entry_ area on the right side of the interface.
2. In the list, click on the  **Add to release** button.
2. Select which release to add this entry to.
3. Click on the **Publish** or **Unpublish** button depending on whether you want the entry to be published or unpublished when the release itself is published, then click **Continue**.

The *Releases* box on the right should show which release(s) the entry is included in.

:::info
If [Releases scheduling](/cms/features/releases#scheduling-a-release) is enabled and the entry is added to a scheduled release, the release date and time will also be displayed.
:::

#### Multiple entries at a time

**Path:** List view of the  Content Manager

1. Select which entries you want to add by ticking the box on the left side of the entries' record.
2. Click on the **Add to release** button located above the header of the table.
3. In the modal, select which release to add these entries to.
4. Click on the **Publish** or **Unpublish** button to decide whether these entries will be published or unpublished when the release is published, then click **Continue**.

### Removing content from a release {#removing-an-entry-from-a-release}

**Path:** Edit view of the  Content Manager

1. In the *Releases* box in the right sidebar, click on  below the name of the release.
2. Click the **Remove from release** button.

### Scheduling a release

**Path:**  Releases

Releases can be [published manually](#publishing-a-release) or scheduled to be automatically published at a given date and time, with the timezone of your choice.

You can schedule a release:
- when [creating the release](#creating-a-release),
- or once the release is already created, by editing it.

To schedule an existing release, while on a release page:
1. Click on the  button in the top right corner of the admin panel.
2. Select  **Edit**.
3. In the modal, check the **Schedule release** checkbox.
4. Select a date, time, and timezone for the release to be published.
5. Click **Save**.

<!--
:::tip
A release page can display entries either grouped by locale, content-type, or action (publish or unpublish). To change how entries are grouped, click the **Group by …** dropdown and select an option from the list.
:::
-->

### Publishing a release

**Path:**  Releases

Publishing a release means that all the actions (publish or unpublish) defined for each entry included in the release will be performed simultaneously. To publish a release, click the **Publish** button in the top right corner of the admin panel.

The _Status_ column displays the status of each entry:

   -  이미 발행됨: 해당 엔트리는 이미 발행된 상태이며, 릴리스를 발행해도 이 엔트리는 변경되지 않습니다.
   -  이미 미발행됨: 해당 엔트리는 이미 미발행 상태이며, 릴리스를 발행해도 이 엔트리는 변경되지 않습니다.
   -  발행 준비 완료: 릴리스와 함께 발행할 준비가 된 엔트리입니다.
   -  미발행 준비 완료: 릴리스와 함께 미발행할 준비가 된 엔트리입니다.
   -  발행 불가: 일부 필드가 올바르게 입력되지 않았거나, 발행에 필요한 단계를 완료하지 않아 발행할 수 없습니다. 이 경우 릴리스는 *Blocked*로 표시되며, 모든 문제를 해결해야 발행할 수 있습니다.

문서의 일부 엔트리가  상태라면, 를 클릭하고 **Edit the entry** 버튼을 눌러 문제를 해결하세요. 각 엔트리의 문제를 해결할 때마다 **Refresh** 버튼을 눌러 릴리스 페이지를 갱신해야 합니다.

:::caution
릴리스를 한 번 발행하면 해당 릴리스는 더 이상 수정할 수 없습니다. 동일한 엔트리 그룹으로 일부만 수정해 다시 릴리스할 수 없으며, 반드시 새 릴리스를 생성해야 합니다.
:::



# 리뷰 워크플로우
Source: https://docs.strapi.io/cms/features/review-workflows

# 리뷰 워크플로우

</IdentityCard>

## 설정

**기능 설정 경로:**  설정 > 글로벌 설정 > 리뷰 워크플로우

[콘텐츠 매니저](/cms/features/content-manager)에서 리뷰 워크플로우를 사용하려면, 기본 워크플로우를 설정하거나 새 워크플로우를 생성해야 합니다.

기본 워크플로우에는 4단계가 포함되어 있습니다: To do, In progress, Ready to review, Reviewed. 각 단계는 필요에 따라 수정, 재정렬, 삭제할 수 있으며, 새 단계를 추가할 수도 있습니다.

### 새 워크플로우 생성

1. **새 워크플로우 생성** 버튼을 클릭하거나 워크플로우의 편집 버튼 을 클릭합니다.
2. 워크플로우 편집 화면에서 다음을 설정합니다:
    | 설정명   | 설명                                                             |
    | -------- | ---------------------------------------------------------------- |
    | 워크플로우 이름  | 워크플로우의 고유 이름을 입력합니다.                                         |
    | 연결 대상  | (선택) 이 워크플로우를 하나 이상의 기존 콘텐츠 타입에 할당합니다.             |
    | 단계         | 검토 단계를 추가합니다([새 단계 추가](#adding-a-new-stage) 참고).            |
3. **저장** 버튼을 클릭하면 새 워크플로우가 목록에 표시되고, 할당된 모든 콘텐츠 타입에 적용됩니다.

:::note
되어 있습니다.
:::

### 워크플로우 편집

#### 새 단계 추가

1. **새 단계 추가** 버튼을 클릭합니다.
2. *단계 이름*을 입력합니다.
3. *색상*을 선택합니다.
4. 해당 단계에 있을 때 단계를 변경할 수 있는 *역할*을 선택합니다.
5. **저장** 버튼을 클릭합니다.

기본적으로 새 단계는 마지막에 추가되지만,  버튼으로 언제든지 순서를 변경할 수 있습니다.

:::tip
각 단계별로 역할을 설정할 때 "모든 단계에 적용"을 클릭하면 현재 역할을 모든 단계에 일괄 적용할 수 있습니다. 단계 컨텍스트 메뉴의 "단계 복제" 기능도 활용할 수 있습니다.
:::

#### 단계 복제

1. 단계의 컨텍스트 메뉴에서 **단계 복제**를 클릭합니다.
2. 복제된 단계의 이름을 변경합니다.
3. **저장** 버튼을 클릭합니다.

#### 단계 삭제

단계의 컨텍스트 메뉴에서 를 클릭한 후 **삭제**를 선택하면 해당 단계를 삭제할 수 있습니다.

대기 중인 리뷰가 있는 단계를 삭제하면, 해당 리뷰는 워크플로우의 첫 번째 단계로 이동됩니다. 워크플로우에는 최소 한 단계가 반드시 존재해야 하므로 마지막 단계는 삭제할 수 없습니다.

### 워크플로우 삭제

워크플로우 목록에서 삭제 버튼 을 클릭하면 워크플로우를 삭제할 수 있습니다.

:::note
마지막 워크플로우는 삭제할 수 없습니다.
:::

## 사용법

**기능 사용 경로:**  콘텐츠 매니저

### 리뷰 단계 변경 {#change-review-stage}

팀이 콘텐츠를 작성 및 수정하는 과정에서, 콘텐츠의 리뷰 단계를 워크플로우에 정의된 임의의 단계로 변경할 수 있습니다.

1. 콘텐츠 타입의 편집 화면에 접근합니다.
2. 화면 오른쪽의 *리뷰 워크플로우* 박스에서 _리뷰 단계_ 드롭다운을 클릭합니다.
3. 새 리뷰 단계를 선택하면 자동으로 저장됩니다.

### 담당자 지정 {#change-assignee}

리뷰 워크플로우가 적용된 콘텐츠 타입의 항목은 Strapi의 모든 관리자에게 리뷰 담당자로 지정할 수 있습니다.

1. 콘텐츠 타입의 편집 화면에 접근합니다.
2. 화면 오른쪽의 *리뷰 워크플로우* 박스에서 _담당자_ 드롭다운을 클릭합니다.
3. 새 담당자를 선택하면 자동으로 저장됩니다.



# 싱글 사인온(SSO)
Source: https://docs.strapi.io/cms/features/sso

# 싱글 사인온(SSO)

</IdentityCard>

## 사용법

특정 제공업체를 통해 관리자 패널에 접근하려면 일반 관리자 계정 로그인 대신 다음 절차를 따르세요:

1. Strapi 애플리케이션의 관리자 패널 URL로 이동합니다.
2. 로그인 폼 하단에 표시된 제공업체 로고 중 원하는 제공업체를 클릭합니다. 제공업체가 보이지 않으면  버튼을 클릭해 전체 목록을 확인할 수 있습니다.
3. 선택한 제공업체의 로그인 페이지로 리다이렉트되어 인증을 진행합니다.



# 사용자 및 권한(Users & Permissions)
Source: https://docs.strapi.io/cms/features/users-permissions

# 사용자 및 권한(Users & Permissions)

Users & Permissions 기능을 사용하면 Strapi 프로젝트의 엔드유저를 관리할 수 있습니다. 이 기능은 JSON Web Token(JWT) 기반의 인증 프로세스와, 사용자 그룹별 권한을 관리할 수 있는 ACL(Access Control List) 전략을 제공합니다.

</IdentityCard>

## 관리자 패널 설정

Users & Permissions 기능은 관리자 패널 설정과 코드 기반 설정 모두에서 관리할 수 있습니다.

### 역할

Users & Permissions 기능을 사용하면 엔드유저 역할을 생성 및 관리하고, 각 역할별로 접근 권한을 설정할 수 있습니다.

#### 새 역할 생성

**기능 경로:** 

### 이메일 템플릿

**기능 경로:** 

</Tabs>

:::warning
JWT 만료 시간을 30일 이상으로 설정하는 것은 보안상 권장하지 않습니다.
:::

### 회원가입 설정

User **모델**에 회원가입 시 추가로 받아야 할 필드를 추가했다면, 해당 필드를 `/config/plugins` 파일의 `config.register.allowedFields`에 명시해야 회원가입 API에서 허용됩니다.

예시: "nickname" 필드를 회원가입 시 허용하려면 아래와 같이 설정합니다.

</Tabs>

### 이메일 템플릿화

이 플러그인은 기본적으로 두 가지 템플릿(비밀번호 재설정, 이메일 주소 확인)을 제공합니다. 템플릿은 

</Tabs>

### 보안 설정

JWT는 디지털 서명으로 검증 및 신뢰할 수 있습니다. 서명에는 _secret_이 필요합니다. 기본적으로 Strapi는 `/extensions/users-permissions/config/jwt.js`에 secret을 생성·저장합니다.

개발 환경에서는 기본값을 사용해도 되지만, 운영 환경에서는 보안을 위해 환경 변수 `JWT_SECRET`을 직접 지정하는 것이 좋습니다.

기본적으로 `JWT_SECRET` 환경 변수를 지정하면 해당 값이 secret으로 사용됩니다. 다른 환경 변수를 사용하려면 아래와 같이 설정 파일을 수정하세요.

</Tabs>

#### 커스텀 콜백 검증기 생성 {#creating-a-custom-password-validation}

기본적으로 Strapi SSO는 설정에 명시된 URL과 정확히 일치하는 리디렉션 URL만 허용합니다:

</Tabs>

#### 토큰 사용법

`jwt`는 권한이 필요한 API 요청에 사용할 수 있습니다. 사용자로서 API 요청을 하려면, `GET` 요청의 `Authorization` 헤더에 JWT를 추가하세요.

토큰이 없는 요청은 기본적으로 public 역할 권한으로 처리됩니다. 각 역할별 권한은 관리자 대시보드에서 수정할 수 있습니다.

인증 실패 시 401(unauthorized) 에러가 반환됩니다.

`token` 변수는 로그인 또는 회원가입 시 받은 `data.jwt` 값입니다.

```js

const token = 'YOUR_TOKEN_HERE';

// API 요청 예시
axios
  .get('http://localhost:1337/posts', {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  })
  .then(response => {
    // 성공 처리
    console.log('Data: ', response.data);
  })
  .catch(error => {
    // 에러 처리
    console.log('An error occurred:', error.response);
  });
```

#### 사용자 회원가입

기본 역할이 'registered'인 새 사용자를 데이터베이스에 생성하는 예시:

```js

// API 요청 예시
// public 사용자가 회원가입할 수 있도록 제한/커스터마이즈하려면 아래 코드를 참고하세요.
axios
  .post('http://localhost:1337/api/auth/local/register', {
    username: 'Strapi user',
    email: 'user@strapi.io',
    password: 'strapiPassword',
  })
  .then(response => {
    // 성공 처리
    console.log('Well done!');
    console.log('User profile', response.data.user);
    console.log('User token', response.data.jwt);
  })
  .catch(error => {
    // 에러 처리
    console.log('An error occurred:', error.response);
  });
```

#### Strapi 컨텍스트의 user 객체

인증에 성공한 요청에서는 `user` 객체가 `ctx.state`에 포함되어 있습니다.

```js
create: async ctx => {
  const { id } = ctx.state.user;

  const depositObj = {
    ...ctx.request.body,
    depositor: id,
  };

  const data = await strapi.services.deposit.add(depositObj);

  // 201 created 반환
  ctx.created(data);
};
```

</rewritten_file>



# 설치
Source: https://docs.strapi.io/cms/installation

# 설치

Strapi 프로젝트는 컴퓨터에 로컬로 설치하거나 원격 서버에 설치할 수 있습니다. 다음 설치 가이드에서는 로컬 머신에 새로운 Strapi 프로젝트를 설치하고 생성하는 방법에 대한 단계별 지침을 제공합니다:

로컬 머신에 기존 Strapi 프로젝트가 있는 경우, 다음 가이드는 프로젝트를 위한 사용자 정의 Docker 이미지를 생성하는 단계별 지침을 제공합니다:



# Additional resources for migrating to Strapi 5
Source: https://docs.strapi.io/cms/migration/v4-to-v5/additional-resources/introduction

# Additional resources for upgrading to Strapi 5

The following pages cover some dedicated topics for specific use cases when upgrading to Strapi 5. Please ensure you have read the [introduction to upgrading to Strapi 5](/cms/migration/v4-to-v5/introduction-and-faq) and [step-by-step guide](/cms/migration/v4-to-v5/step-by-step) before moving forward.



# Breaking changes
Source: https://docs.strapi.io/cms/migration/v4-to-v5/breaking-changes

# Strapi v4 to Strapi 5 breaking changes

The present page lists all the breaking changes introduced in Strapi 5.
Breaking changes are grouped into topic-related categories, and for each line in the following tables line you will find:

- a short description of the breaking change,
- and 2 other columns, "Affects plugins" and "Handled by codemods", that sum up whether the breaking change also affects plugins and whether the breaking change is automatically handled by a codemod from the [upgrade CLI tool](/cms/upgrade-tool).

You can click on the description of any breaking change in the following tables to jump to the corresponding page with more details.

:::tip Tips
* To view a full list of available codemods, run the `npx @strapi/upgrade codemods ls` command in your terminal.
* To have a deeper look at the code executed by the codemods, head over to the  in the GitHub repository.
:::

## Database

| Description | Affects plugins | Handled by codemods |
|-------------|-----------------|---------------------|
| [Content types always have feature columns](/cms/migration/v4-to-v5/breaking-changes/database-columns) | Yes | No|
| [MySQL v5 is not supported anymore](/cms/migration/v4-to-v5/breaking-changes/mysql5-unsupported) | No | No |
| [Database identifiers longer than 55 characters will be automatically shortened](/cms/migration/v4-to-v5/breaking-changes/database-identifiers-shortened) | Yes | ✅ Yes |
| [Only the `better-sqlite3` package is supported for the SQLite client](/cms/migration/v4-to-v5/breaking-changes/only-better-sqlite3-for-sqlite) | No | ✅ Yes |
| [Only the `mysql2` package is supported for the MySQL client](/cms/migration/v4-to-v5/breaking-changes/only-mysql2-package-for-mysql) | No | ✅ Yes |

## Dependencies

| Description | Affects plugins | Handled by codemods |
|-------------|-----------------|---------------------|
| [The CLI default package manager is not yarn anymore](/cms/migration/v4-to-v5/breaking-changes/yarn-not-default) | No | No |
| [Vite is the default bundler in Strapi 5](/cms/migration/v4-to-v5/breaking-changes/vite) | Yes | No |
| [Strapi 5 uses `react-router-dom` v6](/cms/migration/v4-to-v5/breaking-changes/react-router-dom-6) | Yes | ✅ Yes |
| [Strapi 5 uses `koa-body` v6](/cms/migration/v4-to-v5/breaking-changes/koa-body-v6) | Yes | No |
| [Webpack aliases are removed in Strapi 5](/cms/migration/v4-to-v5/breaking-changes/webpack-aliases-removed) | Yes | No |
| [Apollo Server v3 upgraded to Apollo Server v4](/cms/migration/v4-to-v5/breaking-changes/upgrade-to-apollov4) | Yes | No |

## Configuration

| Description | Affects plugins | Handled by codemods |
|-------------|-----------------|---------------------|
| [Some `env`-only configuration options are handled by the server configuration](/cms/migration/v4-to-v5/breaking-changes/removed-support-for-some-env-options) | No | No |
| [Configuration filenames should meet strict requirements](/cms/migration/v4-to-v5/breaking-changes/strict-requirements-config-files) | No | No |
| [Server log level is `http`](/cms/migration/v4-to-v5/breaking-changes/server-default-log-level) | No | No |
| [Model config path uses uid instead of dot notation](/cms/migration/v4-to-v5/breaking-changes/model-config-path-uses-uid) | Yes | 👷 Partly |
| [The `webhooks.populateRelations` server configuration is removed](/cms/migration/v4-to-v5/breaking-changes/remove-webhook-populate-relations) | Yes | No |
| [The `defaultIndex` option is removed from the `public` middleware](/cms/migration/v4-to-v5/breaking-changes/default-index-removed) | No | No |
| [Server proxy configuration options are grouped under the `server.proxy` object](/cms/migration/v4-to-v5/breaking-changes/server-proxy) | No | No |

## Strapi objects, methods, packages, and back-end customization

| Description | Affects plugins | Handled by codemods |
|-------------|-----------------|---------------------|
| [`strapi.fetch` uses the native `fetch()` API](/cms/migration/v4-to-v5/breaking-changes/fetch) | Yes | No |
| [strapi factories import have changed](/cms/migration/v4-to-v5/breaking-changes/strapi-imports) | Yes | 👷 Partly |
| [The `isSupportedImage` method is removed in Strapi 5](/cms/migration/v4-to-v5/breaking-changes/is-supported-image-removed) | Yes | No |
| [`strapi-utils` has been refactored](/cms/migration/v4-to-v5/breaking-changes/strapi-utils-refactored) | Yes | ✅ Yes |
| [Core service methods use the Document Service API](/cms/migration/v4-to-v5/breaking-changes/core-service-methods-use-document-service) | Yes | No |
| [i18n is now part of the strapi core](/cms/migration/v4-to-v5/breaking-changes/i18n-content-manager-locale) | Yes | ✅ Yes |

## Plugins, providers, admin panel and front-end customization

| Description | Affects plugins | Handled by codemods |
|-------------|-----------------|---------------------|
| [Users & Permissions `register.allowedFields` defaults to `[]`](/cms/migration/v4-to-v5/breaking-changes/register-allowed-fields) | No | ✅ Yes |
| [The `helper-plugin` is removed](/cms/migration/v4-to-v5/breaking-changes/helper-plugin-deprecated) | Yes | 👷 Partly |
| [`injectContentManagerComponent()` is removed in favor of `getPlugin('content-manager').injectComponent()`](/cms/migration/v4-to-v5/breaking-changes/inject-content-manager-component) | Yes | No |
| [Some Mailgun provider legacy variables are not supported](/cms/migration/v4-to-v5/breaking-changes/mailgun-provider-variables) | Yes | No |
| [The `lockIcon` property has been replaced by `licenseOnly`](/cms/migration/v4-to-v5/breaking-changes/license-only) | Yes | No |
| [The `ContentManagerAppState` redux is modified](/cms/migration/v4-to-v5/breaking-changes/redux-content-manager-app-state) | Yes | No |
| [The `EditViewLayout` and `ListViewLayout` have been refactored](/cms/migration/v4-to-v5/breaking-changes/edit-view-layout-and-list-view-layout-rewritten) | Yes | No |
| [The Admin Panel RBAC redux store has been updated](/cms/migration/v4-to-v5/breaking-changes/admin-panel-rbac-store-updated) | Yes | No |
| [The `getWhere` method for permission provider instances has been removed](/cms/migration/v4-to-v5/breaking-changes/get-where-removed) | Yes | No |
| [The Design System has been upgraded](/cms/migration/v4-to-v5/breaking-changes/design-system) | Yes | No |

## Content API

| Description | Affects plugins | Handled by codemods |
|-------------|-----------------|---------------------|
| [Strapi 5 has a new, flattened response format for API calls](/cms/migration/v4-to-v5/breaking-changes/new-response-format) | Yes | No |
| [REST API input is validated by default in controllers](/cms/migration/v4-to-v5/breaking-changes/default-input-validation) | Yes | No |
| [The GraphQL API has been updated](/cms/migration/v4-to-v5/breaking-changes/graphql-api-updated) | Yes | No |
| [The Entity Service API is deprecated and replaced by the Document Service API](/cms/migration/v4-to-v5/breaking-changes/entity-service-deprecated) | Yes | 👷 Partly |
| [`documentId` should be used instead of `id` in API calls](/cms/migration/v4-to-v5/breaking-changes/use-document-id) | Yes | 👷 Partly |
| [Database lifecycle hooks are triggered differently based on Document Service API methods](/cms/migration/v4-to-v5/breaking-changes/lifecycle-hooks-document-service) | Yes | No |
| [The `publicationState` parameter is not supported and replaced by `status`](/cms/migration/v4-to-v5/breaking-changes/publication-state-removed) | Yes | ✅ Yes |
| [Content types with Draft & Publish disabled always have the publishedAt value set to a date](/cms/migration/v4-to-v5/breaking-changes/publishedat-always-set-when-dandp-disabled) | Yes | No |
| [Sorting by id is no longer possible to sort by chronological order](/cms/migration/v4-to-v5/breaking-changes/sort-by-id) | Yes | ✅ Yes |
| [There is no `findPage()` method with the Document Service API](/cms/migration/v4-to-v5/breaking-changes/no-find-page-in-document-service) | Yes | No |
| [Some attributes and content-types names are reserved by Strapi](/cms/migration/v4-to-v5/breaking-changes/attributes-and-content-types-names-reserved) | Yes | No |
| [Upload a file at entry creation is no longer possible](/cms/migration/v4-to-v5/breaking-changes/no-upload-at-entry-creation) | Yes | No |
| [Components and dynamic zones should be populated using the detailed population strategy](/cms/migration/v4-to-v5/breaking-changes/no-shared-population-strategy-components-dynamic-zones) | Yes | No |



# Strapi 5로 업그레이드 - 소개 및 FAQ
Source: https://docs.strapi.io/cms/migration/v4-to-v5/introduction-and-faq

# Strapi 5로 업그레이드: 소개 및 FAQ

Strapi의 최신 주요 버전은 Strapi 5입니다. Strapi v4는 2026년 3월까지 계속 지원됩니다.

Strapi 5로 업그레이드할 준비가 되었다고 생각되면, 현재 페이지가 도움이 될 것입니다. 여기서는 Strapi 4에서 Strapi 5로 업그레이드하기 위한 모든 사용 가능한 리소스를 나열하고 일반적인 질문에 답변합니다.

## 사용 가능한 리소스

다음의 모든 사용 가능한 리소스는 가장 일반적인 것부터 가장 구체적인 사용 사례까지 애플리케이션과 플러그인을 Strapi 5로 업그레이드하는 데 도움이 될 것입니다:

## 자주 묻는 질문

다음 질문과 답변은 가장 일반적인 사용 사례를 다루는 데 도움이 될 것입니다:

<details style={{backgroundColor: 'transparent', border: 'solid 1px #4945ff' }}>
<summary style={{fontSize: '18px'}}>업그레이드와 최신 의존성 설치를 어떻게 처리할 수 있나요?<br/>코드의 주요 변경사항을 어떻게 처리하고 코드를 Strapi 5에 적응시킬 수 있나요?</summary>

Strapi는 프로세스를 쉽게 하기 위해 [업그레이드 도구](/cms/upgrade-tool)를 제공합니다. 업그레이드 도구는 의존성 업그레이드와 **코드모드**  실행을 처리하는 일부 명령어가 있는 명령줄 도구입니다.

Strapi 5로 업그레이드하는 맥락에서 이 도구를 사용하는 방법을 알아보려면 <a href="/cms/migration/v4-to-v5/step-by-step">단계별 가이드</a>를 따르세요.

Strapi 5 문서는 또한 [완전한 주요 변경사항 데이터베이스](/cms/migration/v4-to-v5/breaking-changes)와 특정 사용 사례를 다루는 [전용 리소스](/cms/migration/v4-to-v5/additional-resources/introduction)를 제공합니다.

</details>

<details style={{backgroundColor: 'transparent', border: 'solid 1px #4945ff' }}>
<summary style={{fontSize: '18px'}}>데이터 마이그레이션을 어떻게 처리하여 Strapi 5에서 애플리케이션이 여전히 작동하도록 보장할 수 있나요?</summary>
<p>Strapi 5는 Strapi 5에서 애플리케이션이 처음으로 시작될 때 한 번 실행되는 일련의 데이터 마이그레이션 스크립트를 통합합니다.</p>
<p>하지만 <a href="/cms/migration/v4-to-v5/step-by-step">단계별 가이드</a>에서 지시하는 바와 같이 업그레이드를 수행하기 전에 <strong>항상 데이터베이스를 백업</strong>하세요(SQL 데이터베이스를 사용하는 경우 기본적으로 <code style={{color: 'rgb(73, 69, 255)', backgroundColor: 'rgb(240, 240, 255)'}}>.tmp/data.db</code>에 있습니다).</p>
</details>

<details style={{backgroundColor: 'transparent', border: 'solid 1px #4945ff' }}>
<summary style={{fontSize: '18px'}}>Strapi Cloud 고객으로서 Strapi 5 애플리케이션의 전체 업그레이드와 배포를 어떻게 처리할 수 있나요?</summary>

1. [백업을 생성](/cloud/projects/settings#backups)하고 <a href="/cms/migration/v4-to-v5/step-by-step">단계별 가이드</a>를 따라 로컬에서 코드를 업데이트하세요.
2. [Cloud CLI](/cloud/cli/cloud-cli)에서 `yarn deploy` 또는 `npm run deploy` 명령어를 실행하세요.<br/>

Strapi Cloud는 Strapi 5에서 업데이트된 코드를 배포하고 자동으로 데이터 마이그레이션 스크립트를 실행합니다.
<br/>

</details>



# Step-by-step guide to upgrade to Strapi 5
Source: https://docs.strapi.io/cms/migration/v4-to-v5/step-by-step

# Step-by-step guide to upgrade to Strapi 5

The latest major version of Strapi is Strapi 5.

The present page is meant to be used as step-by-step instructions for upgrading your Strapi v4 application to Strapi 5.

:::prerequisites
Your Strapi v4 application is already running on the latest v4 minor and patch version. If it's not, run the [upgrade tool](/cms/upgrade-tool) with the `minor` command to reach it: `npx @strapi/upgrade minor`.
:::

## Step 1: Get ready to upgrade

Before getting into the upgrade process itself, take the following precautions:

1. **Backup your database**.

  If you are using SQLite with the default configuration (the default database provided with Strapi), your database file is named `data.db` and is located in the `.tmp/` folder at the root of your Strapi application.
  
  If you are using another type of database, please refer to their official documentation (see  and ).

  If your project is hosted on Strapi Cloud, you can manually [create a backup](/cloud/projects/settings#creating-a-manual-backup).
2. **Backup your code**:
    * If your code is versioned with git, create a new dedicated branch to run the migration.
    * If your code is _not_ versioned with git, create a backup of your working Strapi v4 code and store it in a safe place.
3. **Ensure the plugins you are using are compatible with Strapi 5**.

  To do so, list the plugins you are using, then check compatibility for each of them by reading their dedicated documentation on the  website.

## Step 2: Run automated migrations

Strapi provides a tool to automate some parts of the upgrade to Strapi 5: the [upgrade tool](/cms/upgrade-tool).

1. **Run the upgrade tool**.  

  ```sh
  npx @strapi/upgrade major
  ```

  The command will execute the update and installation of the dependencies of Strapi 5, and run the codemods to handle some of the breaking changes that come with Strapi 5.

  The codemods will handle the following changes:

  | Codemod name and GitHub code link | Description |
  |-----------------------------------|-------------|
  |  | Comment out lifecycles files in favor of [Document Service Middlewares](/cms/migration/v4-to-v5/breaking-changes/lifecycle-hooks-document-service) | 
  |  | Remove the i18n plugin dependency as i18n is now integrated into the core of Strapi |
  |   | Upgrade the react and react-dom dependencies | 
  |   | Upgrade the react-router-dom dependency |
  |   | Upgrade the styled-components dependency |
  |   | Partly handle migrations from `@strapi/helper-plugin` |
  |             | Partly handle the migration from the Entity Service API to the new Document Service API |
  |             | Wrap the `accessKeyId` and `secretAccessKey` properties inside a `credentials` object for users using the `aws-s3` provider | 
  |                                                                     | Update the sqlite dependency to better-sqlite3 | 
  |                           | Transform `@strapi/strapi` imports to use the new public interface | 
  |                 | Replace string dot format for config get/set/has with uid format for 'plugin' and 'api' namespace where possible | 
  |                             | Update utils to use the new public interface | 

:::tip
If you develop Strapi plugins, other codemods handle some aspects of the helper-plugin deprecation. See the [related breaking change](/cms/migration/v4-to-v5/breaking-changes/helper-plugin-deprecated) for more information.
:::

2. Go over the changes made by the upgrade tool to **check if you have to manually complete some code updates**:

  Look for `__TODO__` automatically added to your code by the codemods. Some of them might have been added while migrating from the Entity Service API to the new Document Service API introduced in Strapi 5.
  
  :::info Document Service API
  Additional information about the Document Service API can be found in the [breaking change entry description](/cms/migration/v4-to-v5/breaking-changes/entity-service-deprecated), the [specific migration guide](/cms/migration/v4-to-v5/additional-resources/from-entity-service-to-document-service), and the [API reference](/cms/api/document-service).
  :::

## Step 3: Check and handle manual upgrades

The following main changes might affect your Strapi application and require you to do some manual actions.

For each of them, read the indicated breaking change entry and check if some manual actions are still required after the upgrade tool has run:

1. **Database migration**:
    1. MySQL v5 is not supported 👉 see [breaking change](/cms/migration/v4-to-v5/breaking-changes/mysql5-unsupported)
    2. Only better-sqlite3 is supported 👉 see [breaking change](/cms/migration/v4-to-v5/breaking-changes/only-better-sqlite3-for-sqlite)
    3. Only mysql2 is supported 👉 see [breaking change](/cms/migration/v4-to-v5/breaking-changes/only-mysql2-package-for-mysql)
    4. Lifecycle hooks are triggered differently 👉 see [breaking change](/cms/migration/v4-to-v5/breaking-changes/lifecycle-hooks-document-service)
2. **Configuration**:
    1. Some environment variables are handled by the server configuration 👉 see [breaking change](/cms/migration/v4-to-v5/breaking-changes/removed-support-for-some-env-options)
    2. Custom configuration must meet specific requirements 👉 see [breaking change](/cms/migration/v4-to-v5/breaking-changes/strict-requirements-config-files)
3. **Admin panel customization**:
    * The helper-plugin has been removed 👉 see [migration reference](/cms/migration/v4-to-v5/additional-resources/helper-plugin)

👉 Finally, go over the rest of the [breaking changes database](/cms/migration/v4-to-v5/breaking-changes) for any edge case you might be concerned about.

## Step 4: Migrate the API consuming side

Strapi 5 has updated both the REST and GraphQL APIs.

Follow the steps below and leverage retro-compatibility flags and guided migration resources to gradually update your code for Strapi 5.

### Migrate REST API calls

1. Enable the retro-compatibility flag by setting the `Strapi-Response-Format: v4` header.
2. Update your queries & mutations only, guided by the dedicated [breaking change entry for REST API](/cms/migration/v4-to-v5/breaking-changes/new-response-format).
3. Validate that your client is running correctly.
4. Disable the retro-compatibiliy flag by removing the `Strapi-Response-Format: v4` header and start using the new response format.

### Migrate GraphQL API calls

1. Enable the retro-compatibility flag by setting `v4ComptabilityMode` to `true` in the `graphql.config` object of [the `/config/plugins.js|ts` file](/cms/plugins/graphql#code-based-configuration).
2. Update your queries and mutations only, guided by the dedicated [breaking change entry for GraphQL](/cms/migration/v4-to-v5/breaking-changes/graphql-api-updated).
3. Validate that your client is running correctly.
4. Disable the retro-compatibily flag by setting `v4ComptabilityMode` to `false` and start using the new response format.



# Admin Panel API
Source: https://docs.strapi.io/cms/plugins-development/admin-panel-api

# Admin Panel API for plugins

A Strapi plugin can interact with both the [back end](/cms/plugins-development/server-api) and the front end of a Strapi application. The Admin Panel API is about the front end part, i.e. it allows a plugin to customize Strapi's [admin panel](/cms/intro).

The admin panel is a 

</Tabs>

### Settings API

The Settings API allows:

* [creating a new setting section](#createsettingsection)
* adding [a single link](#addsettingslink) or [multiple links at once](#addsettingslinks) to existing settings sections

:::note
Adding a new section happens in the [register](#register) lifecycle while adding links happens during the [bootstrap](#bootstrap) lifecycle.
:::

All functions accept links as objects with the following parameters:

| Parameter     | Type             | Description                                                                                                                                                                                                              |
| ------------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `id`          | String           | React id                                                                                                                                                                                                                 |
| `to`          | String           | Path the link should point to                                                                                                                                                                                            |
| `intlLabel`   | Object           | Label for the link, following the  convention, with:<ul><li>`id`: id used to insert the localized label</li><li>`defaultMessage`: default label for the link</li></ul> |
| `Component`   | Async function   | Returns a dynamic import of the plugin entry point                                                                                                                                                                       |
| `permissions` | Array of Objects | Permissions declared in the `permissions.js` file of the plugin                                                                                                                                                          |
| `licenseOnly` | Boolean | If set to `true`, adds a lightning ⚡️ icon next to the icon or menu entry to indicate that the feature or plugin requires a paid license.<br/>(Defaults to `false`) |

#### createSettingSection()

**Type**: `Function`

Create a new settings section.

The function takes 2 arguments:

| Argument        | Type             | Description                                                                                                                                                                                                                                                                                                                   |
| --------------- | ---------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| first argument  | Object           | Section label:<ul><li>`id` (String): section id</li><li>`intlLabel` (Object): localized label for the section, following the  convention, with:<ul><li>`id`: id used to insert the localized label</li><li>`defaultMessage`: default label for the section</li></ul></li></ul> |
| second argument | Array of Objects | Links included in the section                                                                                                                                                                                                                                                                                                 |

:::note
`intlLabel.id` are ids used in translation files (`[plugin-name]/admin/src/translations/[language].json`)
:::

**Example:**

```jsx title="my-plugin/admin/src/index.js"

const myComponent = async () => {
  const component = await import(
    /* webpackChunkName: "users-providers-settings-page" */ './pages/Providers'
  );

  return component;
};

  register(app) {
    app.createSettingSection(
      { id: String, intlLabel: { id: String, defaultMessage: String } }, // Section to create
      [
        // links
        {
          intlLabel: { id: String, defaultMessage: String },
          id: String,
          to: String,
          Component: myComponent,
          permissions: Object[],
        },
      ]
    );
  },
};
```

#### addSettingsLink()

**Type**: `Function`

Add a unique link to an existing settings section.

**Example:**

```jsx title="my-plugin/admin/src/index.js"

const myComponent = async () => {
  const component = await import(
    /* webpackChunkName: "users-providers-settings-page" */ './pages/Providers'
  );

  return component;
};

  bootstrap(app) {
		// Adding a single link
		app.addSettingsLink(
		 'global', // id of the section to add the link to
			{
				intlLabel: { id: String, defaultMessage: String },
				id: String,
				to: String,
				Component: myComponent,
				permissions: Object[],
        licenseOnly: true, // mark the feature as a paid one not available in your license
			}
    )
  }
}
```

#### addSettingsLinks()

**Type**: `Function`

Add multiple links to an existing settings section.

**Example:**

```jsx title="my-plugin/admin/src/index.js"

const myComponent = async () => {
  const component = await import(
    /* webpackChunkName: "users-providers-settings-page" */ './pages/Providers'
  );

  return component;
};

  bootstrap(app) {
    // Adding several links at once
    app.addSettingsLinks(
      'global', // id of the section to add the link in
        [{
          intlLabel: { id: String, defaultMessage: String },
          id: String,
          to: String,
          Component: myComponent,
          permissions: Object[],
          licenseOnly: true, // mark the feature as a paid one not available in your license
        }]
    )
  }
}
```

### Injection Zones API

Injection zones refer to areas of a view's layout where a plugin allows another to inject a custom React component (e.g. a UI element like a button).

Plugins can use:

* Strapi's [predefined injection zones](#using-predefined-injection-zones) for the Content Manager,
* or custom injection zones, created by a plugin

:::note
Injection zones are defined in the [register()](#register) lifecycle but components are injected in the [bootstrap()](#bootstrap) lifecycle.
:::

#### Using predefined injection zones

Strapi admin panel comes with predefined injection zones so components can be added to the UI of the [Content Manager](/cms/intro):

<!-- TODO: maybe add screenshots once the design system is ready? -->

| View      | Injection zone name & Location                                                                                                                                            |
| --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| List view | `actions`: sits between Filters and the cogs icon
| Edit view | `right-links`: sits between "Configure the view" and "Edit" buttons                       |

#### Creating a custom injection zone

To create a custom injection zone, declare it as a `` React component with an `area` prop that takes a string with the following naming convention: `plugin-name.viewName.injectionZoneName`.

#### Injecting components

A plugin has 2 different ways of injecting a component:

* to inject a component from a plugin into another plugin's injection zones, use the `injectComponent()` function
* to specifically inject a component into one of the Content Manager's [predefined injection zones](#using-predefined-injection-zones), use the `getPlugin('content-manager').injectComponent()` function instead

Both the `injectComponent()` and `getPlugin('content-manager').injectComponent()` methods accept the following arguments:

| Argument        | Type   | Description                                                                                                                                                                   |
| --------------- | ------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| first argument  | String | The view where the component is injected
| second argument | String | The zone where the component is injected
| third argument  | Object | An object with the following keys:<ul><li>`name` (string): the name of the component</li><li>`Component` (function or class): the React component to be injected</li></ul> |

<details>
<summary>Example: Inject a component in the informations box of the Edit View of the Content Manager:</summary>

```jsx title="my-plugin/admin/src/index.js"

  bootstrap(app) {
    app.getPlugin('content-manager').injectComponent('editView', 'informations', {
      name: 'my-plugin-my-compo',
      Component: () => 'my-compo',
    });
  }
}
```

</details>

<details>
<summary>Example: Creating a new injection zone and injecting it from a plugin to another one:</summary>

```jsx title="my-plugin/admin/src/injectionZones.js"
// Use the injection zone in a view

const HomePage = () => {
  return (
    <main>
      <h1>This is the homepage</h1>
	    
    </main>
  );
};
```

```jsx title="my-plugin/admin/src/index.js"
// Declare this injection zone in the register lifecycle of the plugin

  register() {
    app.registerPlugin({
      // ...
      injectionZones: {
        homePage: {
          right: []
        }
      }
    });
  },
}
```

```jsx title="my-other-plugin/admin/src/index.js"
// Inject the component from a plugin in another plugin

  register() {
    // ...
  },
  bootstrap(app) {
    app.getPlugin('my-plugin').injectComponent('homePage', 'right', {
      name: 'my-other-plugin-component',
      Component: () => 'This component is injected',
    });
  }
};
```

</details>

#### Accessing data with the `useCMEditViewDataManager` React hook

Once an injection zone is defined, the component to be injected in the Content Manager can have access to all the data of the Edit View through the `useCMEditViewDataManager` React hook.

<details>
<summary>Example of a basic component using the 'useCMEditViewDataManager' hook</summary>

```js

const MyCompo = () => {
  const {
    createActionAllowedFields: [], // Array of fields that the user is allowed to edit
    formErrors: {}, // Object errors
    readActionAllowedFields: [], // Array of field that the user is allowed to edit
    slug: 'api::address.address', // Slug of the content-type
    updateActionAllowedFields: [],
    allLayoutData: {
      components: {}, // components layout
      contentType: {}, // content-type layout
    },
    initialData: {},
    isCreatingEntry: true,
    isSingleType: true,
    status: 'resolved',
    layout: {}, // Current content-type layout
    hasDraftAndPublish: true,
    modifiedData: {},
    onPublish: () => {},
    onUnpublish: () => {},
    addComponentToDynamicZone: () => {},
    addNonRepeatableComponentToField: () => {},
    addRelation: () => {},
    addRepeatableComponentToField: () => {},
    moveComponentDown: () => {},
    moveComponentField: () => {},
    moveComponentUp: () => {},
    moveRelation: () => {},
    onChange: () => {},
    onRemoveRelation: () => {},
    removeComponentFromDynamicZone: () => {},
    removeComponentFromField: () => {},
    removeRepeatableField: () => {},
  } = useCMEditViewDataManager()

  return null
}
```

</details>

### Reducers API

Reducers are  reducers that can be used to share state between components. Reducers can be useful when:

* Large amounts of application state are needed in many places in the application.
* The application state is updated frequently.
* The logic to update that state may be complex.

Reducers can be added to a plugin interface with the `addReducers()` function during the [`register`](#register) lifecycle.

A reducer is declared as an object with this syntax:

**Example:**

```js title="my-plugin/admin/src/index.js"

const reducers = {
  // Reducer Syntax
  [`${pluginId}_exampleReducer`]: exampleReducer
}

  register(app) {
    app.addReducers(reducers)
  },
  bootstrap() {},
};

```

### Hooks API

The Hooks API allows a plugin to create and register hooks, i.e. places in the application where plugins can add personalized behavior.

Hooks should be registered during the [bootstrap](#bootstrap) lifecycle of a plugin.

Hooks can then be run in series, in waterfall or in parallel:

* `runHookSeries` returns an array corresponding to the result of each function executed, ordered
* `runHookParallel` returns an array corresponding to the result of the promise resolved by the function executed, ordered
* `runHookWaterfall` returns a single value corresponding to all the transformations applied by the different functions starting with the initial value `args`.

<details>
<summary>Example: Create a hook in a plugin and use it in another plugin</summary>

```jsx title="my-plugin/admin/src/index.js"
// Create a hook in a plugin

  register(app) {
    app.createHook('My-PLUGIN/MY_HOOK');
  }
}

```

```jsx title="my-other-plugin/admin/src/index.js"
// Use the hook in another plugin

  bootstrap(app) {
    app.registerHook('My-PLUGIN/MY_HOOK', (...args) => {
      console.log(args)

      // important: return the mutated data
      return args
    });

    app.registerPlugin({...})
  }
}
```

</details>

#### Predefined hooks

Strapi includes a predefined `Admin/CM/pages/ListView/inject-column-in-table` hook that can be used to add or mutate a column of the List View of the [Content Manager](/cms/intro):

```jsx
runHookWaterfall(INJECT_COLUMN_IN_TABLE, {
	displayedHeaders: ListFieldLayout[],
	layout: ListFieldLayout,
});
```

```tsx
interface ListFieldLayout {
  /**
   * The attribute data from the content-type's schema for the field
   */
  attribute: Attribute.Any | { type: 'custom' };
  /**
   * Typically used by plugins to render a custom cell
   */
  cellFormatter?: (
    data: Document,
    header: Omit<ListFieldLayout, 'cellFormatter'>,
    { collectionType, model }: { collectionType: string; model: string }
  ) => React.ReactNode;
  label: string | MessageDescriptor;
  /**
   * the name of the attribute we use to display the actual name e.g. relations
   * are just ids, so we use the mainField to display something meaninginful by
   * looking at the target's schema
   */
  mainField?: string;
  name: string;
  searchable?: boolean;
  sortable?: boolean;
}

interface ListLayout {
  layout: ListFieldLayout[];
  components?: never;
  metadatas: {
    [K in keyof Contracts.ContentTypes.Metadatas]: Contracts.ContentTypes.Metadatas[K]['list'];
  };
  options: LayoutOptions;
  settings: LayoutSettings;
}

type LayoutOptions = Schema['options'] & Schema['pluginOptions'] & object;

interface LayoutSettings extends Contracts.ContentTypes.Settings {
  displayName?: string;
  icon?: never;
}
```

Strapi also includes a `Admin/CM/pages/EditView/mutate-edit-view-layout` hook that can be used to mutate the Edit View  of the [Content Manager](/cms/intro):

```tsx
interface EditLayout {
  layout: Array<Array<EditFieldLayout[]>>;
  components: {
    [uid: string]: {
      layout: Array<EditFieldLayout[]>;
      settings: Contracts.Components.ComponentConfiguration['settings'] & {
        displayName?: string;
        icon?: string;
      };
    };
  };
  metadatas: {
    [K in keyof Contracts.ContentTypes.Metadatas]: Contracts.ContentTypes.Metadatas[K]['edit'];
  };
  options: LayoutOptions;
  settings: LayoutSettings;
}

interface EditFieldSharedProps extends Omit<InputProps, 'hint' | 'type'> {
  hint?: string;
  mainField?: string;
  size: number;
  unique?: boolean;
  visible?: boolean;
}

/**
 * Map over all the types in Attribute Types and use that to create a union of new types where the attribute type
 * is under the property attribute and the type is under the property type.
 */
type EditFieldLayout = {
  [K in Attribute.Kind]: EditFieldSharedProps & {
    attribute: Extract<Attribute.Any, { type: K }>;
    type: K;
  };
}[Attribute.Kind];

type LayoutOptions = Schema['options'] & Schema['pluginOptions'] & object;

interface LayoutSettings extends Contracts.ContentTypes.Settings {
  displayName?: string;
  icon?: never;
}
```

:::note
`EditViewLayout` and `ListViewLayout` are parts of the `useDocumentLayout` hook (see ).
:::



# Content Manager APIs
Source: https://docs.strapi.io/cms/plugins-development/content-manager-apis

# Content Manager APIs

Content-Manager APIs are part of the [Admin Panel API](/cms/plugins-development/admin-panel-api). They are a way to add content or options from plugins to the [Content-Manager](/cms/features/content-manager), so you can extend the Content-Manager by adding functionality from your own plugin, just like you can do it with [Injection Zones](/cms/plugins-development/admin-panel-api#injection-zones-api).

Strapi 5 provides 4 Content-Manager APIs, all accessible through `app.getPlugin('content-manager').apis`:

- [`addEditViewSidePanel`](#addeditviewsidepanel),
- [`addDocumentAction`](#adddocumentaction),
- [`addDocumentHeaderAction`](#adddocumentheaderaction),
- and [`addBulkAction`](#addbulkaction).

## General information

All the Content Manager APIs share the same API shape and must use components.

### API shape

All Content Manager APIs works in the same way: to use them, call them on your plugin’s [bootstrap](/cms/plugins-development/admin-panel-api#bootstrap) function, in 2 possible ways:

- Passing an array with what you want to add. For example, the following code would add the ReleasesPanel at the end of the current EditViewSidePanels:
  
  ```jsx
  app.getPlugin('content-manager').apis.addEditViewSidePanel([ReleasesPanel])
  ```

- Passing a function that receives the current elements and return the new ones. This is useful if, for example, you want to add something in a specific position in the list, like in the following code:

  ```jsx
  app.getPlugin('content-manager').apis.addEditViewSidePanel(
    (panels) => [SuperImportantPanel, ...panels]
  )
  ```

### Components

You need to pass components to the API in order to add things to the Content Manager. These components are basically functions that receive some properties and return and object with some shape (depending on the function). Each component’s return object is different based on the function you’re using, but they receive similar properties, depending on whether you use a ListView or EditView API. These properties include important information about the document(s) you are viewing or editing.

#### ListViewContext

```jsx
interface ListViewContext {
  /**
   * Will be either 'single-types' | 'collection-types'
   */
  collectionType: string;
  /**
   * The current selected documents in the table
   */
  documents: Document[];
  /**
   * The current content-type's model.
   */
  model: string;
}
```

#### EditViewContext

```jsx
interface EditViewContext {
  /**
   * This will only be null if the content-type
   * does not have draft & publish enabled.
   */
  activeTab: 'draft' | 'published' | null;
  /**
   * Will be either 'single-types' | 'collection-types'
   */
  collectionType: string;
  /**
   * Will be undefined if someone is creating an entry.
   */
  document?: Document;
  /**
   * Will be undefined if someone is creating an entry.
   */
  documentId?: string;
  /**
   * Will be undefined if someone is creating an entry.
   */
  meta?: DocumentMetadata;
  /**
   * The current content-type's model.
   */
  model: string;
}
```

:::tip
More information about types and APIs can be found in .
:::

**Example:**

Adding a panel to the sidebar can be done this way:

```jsx title="my-plugin/components/my-panel.ts"

const Panel: PanelComponent = ({ 
  activeTab, 
  collectionType, 
  document, 
  documentId, 
  meta, 
  model 
}: PanelComponentProps) => {
  return {
    title: 'My Panel',
    content: <p>I'm on {activeTab}</p>
  }
}
```

## Available APIs

<br/>

### `addEditViewSidePanel`

Use this to add new panels to the Edit view sidebar, just like in the following example where something is added to the Releases panel:

![addEditViewSidePanel](/img/assets/content-manager-apis/add-edit-view-side-panel.png)

```jsx
addEditViewSidePanel(panels: DescriptionReducer<PanelComponent> | PanelComponent[])
```

#### PanelDescription

The interface of the API only receives the following 2 properties:

```jsx
{
  title: string;
  content: React.ReactNode;	
}
```

### `addDocumentAction`

Use this API to add more actions to the Edit view or the List View of the Content Manager. There are 3 positions available:

- `header` of the Edit view:

    ![Header of the Edit view](/img/assets/content-manager-apis/add-document-action-header.png)
- `panel` of the Edit view:

    ![Panel of the Edit View](/img/assets/content-manager-apis/add-document-action-panel.png)
- `table-row` of the List view:

    ![Table-row in the List View](/img/assets/content-manager-apis/add-document-action-tablerow.png)

```jsx
addDocumentAction(actions: DescriptionReducer<DocumentActionComponent> | DocumentActionComponent[])
```

#### DocumentActionDescription

The interface and properties of the API look like the following: 

```jsx
interface DocumentActionDescription {
    label: string;
    onClick?: (event: React.SyntheticEvent) => Promise<boolean | void> | boolean | void;
    icon?: React.ReactNode;
    /**
     * @default false
     */
    disabled?: boolean;
    /**
     * @default 'panel'
     * @description Where the action should be rendered.
     */
    position?: DocumentActionPosition | DocumentActionPosition[];
    dialog?: DialogOptions | NotificationOptions | ModalOptions;
    /**
     * @default 'secondary'
     */
    variant?: ButtonProps['variant'];
}

type DocumentActionPosition = 'panel' | 'header' | 'table-row';

interface DialogOptions {
    type: 'dialog';
    title: string;
    content?: React.ReactNode;
    variant?: ButtonProps['variant'];
    onConfirm?: () => void | Promise<void>;
    onCancel?: () => void | Promise<void>;
}
interface NotificationOptions {
    type: 'notification';
    title: string;
    link?: {
        label: string;
        url: string;
        target?: string;
    };
    content?: string;
    onClose?: () => void;
    status?: NotificationConfig['type'];
    timeout?: number;
}
interface ModalOptions {
    type: 'modal';
    title: string;
    content: React.ComponentType<{
        onClose: () => void;
    }> | React.ReactNode;
    footer?: React.ComponentType<{
        onClose: () => void;
    }> | React.ReactNode;
    onClose?: () => void;
}
```

### `addDocumentHeaderAction`

Use this API to add more actions to the header of the Edit view of the Content Manager:

![addEditViewSidePanel](/img/assets/content-manager-apis/add-document-header-action.png)

```jsx
addDocumentHeaderAction(actions: DescriptionReducer<HeaderActionComponent> | HeaderActionComponent[])
```

#### HeaderActionDescription

The interface and properties of the API look like the following:

```jsx
interface HeaderActionDescription {
  disabled?: boolean;
  label: string;
  icon?: React.ReactNode;
  type?: 'icon' | 'default';
  onClick?: (event: React.SyntheticEvent) => Promise<boolean | void> | boolean | void;
  dialog?: DialogOptions;
  options?: Array<{
    disabled?: boolean;
    label: string;
    startIcon?: React.ReactNode;
    textValue?: string;
    value: string;
  }>;
  onSelect?: (value: string) => void;
  value?: string;
}

interface DialogOptions {
  type: 'dialog';
  title: string;
  content?: React.ReactNode;
  footer?: React.ReactNode;
}
```

### `addBulkAction`

Use this API to add buttons that show up when entries are selected on the List View of the Content Manager, just like the "Add to Release" button for instance:

![addEditViewSidePanel](/img/assets/content-manager-apis/add-bulk-action.png)

```jsx
addBulkAction(actions: DescriptionReducer<BulkActionComponent> | BulkActionComponent[])
```

#### BulkActionDescription

The interface and properties of the API look like the following: 

```jsx
interface BulkActionDescription {
  dialog?: DialogOptions | NotificationOptions | ModalOptions;
  disabled?: boolean;
  icon?: React.ReactNode;
  label: string;
  onClick?: (event: React.SyntheticEvent) => void;
  /**
   * @default 'default'
   */
  type?: 'icon' | 'default';
  /**
   * @default 'secondary'
   */
  variant?: ButtonProps['variant'];
}
```



# 플러그인 생성 및 설정
Source: https://docs.strapi.io/cms/plugins-development/create-a-plugin

# 플러그인 생성

Strapi 5 플러그인을 생성하는 방법은 여러 가지가 있지만, 가장 빠르고 권장되는 방법은 Plugin SDK를 사용하는 것입니다.

Plugin SDK는 로컬 플러그인으로 사용하거나 NPM에 게시하거나 마켓플레이스에 제출하기 위한 플러그인 개발에 중점을 둔 명령어 세트입니다.

Plugin SDK를 사용하면 플러그인을 생성하기 전에 Strapi 프로젝트를 설정할 필요가 없습니다.

현재 가이드는 처음부터 플러그인을 생성하고, 기존 Strapi 프로젝트에 연결하고, 플러그인을 게시하는 과정을 다룹니다. 이미 기존 플러그인이 있다면, 대신 Plugin SDK 명령어를 활용하도록 플러그인 설정을 개조할 수 있습니다(사용 가능한 명령어의 전체 목록은 [Plugin SDK 참조](/cms/plugins-development/plugin-sdk)를 참고하세요).

:::note
이 가이드는 Strapi 프로젝트 외부에서 플러그인을 개발하고자 한다고 가정합니다. 하지만 기존 프로젝트 내에서 플러그인을 개발하고 싶다면 단계는 거의 동일합니다. [모노레포를 사용하지 않는](#monorepo) 경우 단계는 정확히 동일합니다.
:::

:::prerequisites

</Tabs>

`my-strapi-plugin` 경로는 플러그인을 호출하고 싶은 이름과 생성할 경로로 대체할 수 있습니다(예: `code/strapi-plugins/my-new-strapi-plugin`).

플러그인 설정을 도와주는 일련의 프롬프트가 실행됩니다. 모든 옵션에 yes를 선택하면 최종 구조는 기본 [플러그인 구조](/cms/plugins-development/plugin-structure)와 유사해집니다.

### 플러그인을 프로젝트에 연결

개발 중에 플러그인을 테스트하기 위해 권장되는 접근 방법은 Strapi 프로젝트에 연결하는 것입니다.

플러그인을 프로젝트에 연결하는 것은 `watch:link` 명령어로 수행됩니다. 이 명령어는 플러그인을 Strapi 프로젝트에 연결하는 방법에 대한 설명을 출력합니다.

새 터미널 창에서 다음 명령어를 실행하세요:

</Tabs>

:::note
위 예제에서는 플러그인을 프로젝트에 연결할 때 플러그인의 이름(`my-strapi-plugin`)을 사용합니다. 이는 폴더 이름이 아닌 패키지 이름입니다.
:::

이 플러그인은 `node_modules`를 통해 설치되므로 명시적으로 `plugins` [구성 파일](/cms/configurations/plugins)에 추가할 필요가 없으며, [`develop 명령어`](/cms/cli#strapi-develop)를 실행하여 Strapi 프로젝트를 시작하면 자동으로 플러그인을 인식합니다.

이제 플러그인이 프로젝트에 연결되었으므로, `yarn develop` 또는 `npm run develop`을 실행하여 Strapi 애플리케이션을 시작하세요.

이제 원하는 대로 플러그인을 개발할 준비가 되었습니다! 서버 변경사항을 만들고 있다면, 효과를 보려면 서버를 재시작해야 합니다.

### 게시를 위한 플러그인 빌드

플러그인을 게시할 준비가 되면 빌드해야 합니다. 이를 위해 다음 명령어를 실행하세요:

</Tabs>

위 명령어는 플러그인을 빌드할 뿐만 아니라 출력이 유효하고 게시할 준비가 되었는지 검증합니다. 그런 다음 다른 패키지와 마찬가지로 플러그인을 NPM에 게시할 수 있습니다.

## 모노레포 환경에서 Plugin SDK 작업하기 {#monorepo}

모노레포 환경에서 플러그인을 개발하는 경우, 모노레포 워크스페이스 설정이 심볼릭 링크를 처리하므로 `watch:link` 명령어를 사용할 필요가 없습니다. 대신 `watch` 명령어를 사용할 수 있습니다.

하지만 관리자 코드를 작성하는 경우, 관리자 패널 컨텍스트에서 작업하기 쉽게 하기 위해 플러그인의 소스 코드를 대상으로 하는 `alias`를 추가할 수 있습니다:

```ts

  config.resolve.alias = {
    ...config.resolve.alias,
    'my-strapi-plugin': path.resolve(
      __dirname,
      // 플러그인이 로컬에 있다고 가정했습니다.
      '../plugins/my-strapi-plugin/admin/src'
    ),
  };

  return config;
};
```

:::caution
서버는 플러그인 코드를 가져오기 위해 `server/src/index.ts|js` 파일을 봅니다. 코드가 트랜스파일되지 않으면 서버가 플러그인을 찾을 수 없으므로 `watch` 명령어를 사용해야 합니다.
:::

### 로컬 플러그인 구성

Plugin SDK는 주로 플러그인을 로컬이 아닌 곳에서 개발하도록 설계되어 있으므로, 로컬 플러그인의 경우 구성을 수동으로 조정해야 합니다.

플러그인을 로컬에서 개발할 때(`@strapi/sdk-plugin` 사용), 플러그인 구성 파일은 다음 예제와 같습니다:

```js title="/config/plugins.js|ts"
myplugin: {
  enabled: true,
  resolve: `./src/plugins/local-plugin`,
},
```

하지만 이 설정은 때때로 다음과 같은 오류를 일으킬 수 있습니다:

```js
Error: 'X must be used within StrapiApp';
```

이 오류는 플러그인이 핵심 Strapi 기능을 가져오려고 시도할 때 자주 발생합니다. 예를 들어:

```js

```

이 문제를 해결하려면 플러그인에서 `@strapi/strapi`를 개발 의존성으로 제거하세요. 이렇게 하면 플러그인이 메인 애플리케이션과 동일한 Strapi 핵심 모듈 인스턴스를 사용하여 충돌과 관련 오류를 방지할 수 있습니다.

## Plugin SDK 없이 모노레포 환경에서 로컬 플러그인 설정

모노레포에서는 플러그인 루트에 2개의 진입점 파일을 추가하여 Plugin SDK를 사용하지 않고 로컬 플러그인을 구성할 수 있습니다:

- 서버 진입점: `strapi-server.js|ts`
- 관리자 진입점: `strapi-admin.js|ts`

### 서버 진입점

서버 진입점 파일은 플러그인의 서버 사이드 기능을 초기화합니다. `strapi-server.js`(또는 TypeScript 변형)의 예상 구조는 다음과 같습니다:

```js
module.exports = () => {
  return {
    register,
    config,
    controllers,
    // ... 기타 서버 관련 내보내기
  };
};
```

### 관리자 진입점

관리자 진입점 파일은 Strapi 관리자 패널에서 플러그인을 설정하는 데 필요한 구조를 설정합니다. `strapi-admin.js`(또는 TypeScript 변형)의 예상 구조는 다음과 같습니다:

```js

  register(app) {},
  bootstrap() {},
  registerTrads({ locales }) {},
};
```

이 객체는 플러그인을 관리자 애플리케이션에 등록하고, 부트스트랩 작업을 수행하고, 번역을 처리하는 방법을 포함합니다. 자세한 내용은 [관리자 패널 API 참조](/cms/plugins-development/admin-panel-api)를 참고하세요.

:::tip
완전한 예제는 을 확인하세요.
:::



# 플러그인 개발
Source: https://docs.strapi.io/cms/plugins-development/developing-plugins

# Strapi 플러그인 개발

Strapi는 내장 플러그인이나 

:::strapi 커스텀 필드 플러그인
플러그인은 Strapi에 [커스텀 필드](/cms/features/custom-fields)를 추가하는 데도 사용할 수 있습니다.
:::

## 가이드

<br />

:::strapi 추가 리소스
에는 Strapi 플러그인 개발 시 유용한 추가 정보가 포함될 수도 있습니다.
:::



# How to create components for Strapi plugins
Source: https://docs.strapi.io/cms/plugins-development/guides/create-components-for-plugins

# How to create components for Strapi plugins

When [developing a Strapi plugin](/cms/plugins-development/developing-plugins), you might want to create reusable components for your plugin. Components in Strapi are reusable data structures that can be used across different content-types.

To create components for your Strapi plugin, you'll need to follow a similar approach to creating content-types, but with some specific differences.

## Creating components

You can create components for your plugins in 2 different ways: using the Content-Type Builder (recommended way) or manually.

### Using the Content-Type Builder 

The recommended way to create components for your plugin is through the Content-Type Builder in the admin panel. 
The [Content-Type Builder documentation](/cms/features/content-type-builder#new-component) provides more details on this process.

### Creating components manually

If you prefer to create components manually, you'll need to:

1. Create a component schema in your plugin's structure.
2. Make sure the component is properly registered.

Components for plugins should be placed in the appropriate directory within your plugin structure. You would typically create them within the server part of your plugin (see [plugin structure documentation](/cms/plugins-development/plugin-structure)).

For more detailed information about components in Strapi, you can refer to the [Model attributes documentation](/cms/backend-customization/models#components-json).

## Reviewing the component structure

Components in Strapi follow the following format in their definition:

```javascript title="/my-plugin/server/components/category/component-name.json"
{
  "attributes": {
    "myComponent": {
      "type": "component",
      "repeatable": true,
      "component": "category.componentName"
    }
  }
}
```

## Making components visible in the admin panel

To ensure your plugin's components are visible in the admin panel, you need to set the appropriate `pluginOptions` in your component schema:

```javascript {9-16}
{
  "kind": "collectionType",
  "collectionName": "my_plugin_components",
  "info": {
    "singularName": "my-plugin-component",
    "pluralName": "my-plugin-components",
    "displayName": "My Plugin Component"
  },
  "pluginOptions": {
    "content-manager": {
      "visible": true
    },
    "content-type-builder": {
      "visible": true
    }
  },
  "attributes": {
    "name": {
      "type": "string"
    }
  }
}
```

This configuration ensures your components will be visible and editable in both the Content-Type Builder and Content Manager.



# How to pass data from server to admin panel with a Strapi plugin
Source: https://docs.strapi.io/cms/plugins-development/guides/pass-data-from-server-to-admin

# How to pass data from server to admin panel with a Strapi plugin

Strapi is **headless** . The admin panel is completely separate from the server.

When [developing a Strapi plugin](/cms/plugins-development/developing-plugins) you might want to pass data from the `/server` to the `/admin` folder. Within the `/server` folder you have access to the Strapi object and can do database queries whereas in the `/admin` folder you can't.

Passing data from the `/server` to the `/admin` folder can be done using the admin panel's Axios instance:

To pass data from the `/server` to `/admin` folder you would first [create a custom admin route](#create-a-custom-admin-route) and then [get the data returned in the admin panel](#get-the-data-in-the-admin-panel).

## Create a custom admin route

Admin routes are like the routes that you would have for any controller, except that the `type: 'admin'` declaration hides them from the general API router, and allows you to access them from the admin panel.

The following code will declare a custom admin route for the `my-plugin` plugin:

```js title="/my-plugin/server/routes/index.js"
module.exports = {
  'pass-data': {
    type: 'admin',
    routes: [
      {
        method: 'GET',
        path: '/pass-data',
        handler: 'myPluginContentType.index',
        config: {
          policies: [],
          auth: false,
        },
      },
    ]
  }
  // ...
};
```

This route will call the `index` method of the `myPluginContentType` controller when you send a GET request to the `/my-plugin/pass-data` URL endpoint.

Let's create a basic custom controller that simply returns a simple text:

```js title="/my-plugin/server/controllers/my-plugin-content-type.js"
'use strict';

module.exports = {
  async index(ctx) {
    ctx.body = 'You are in the my-plugin-content-type controller!';
  }
}
```

This means that when sending a GET request to the `/my-plugin/pass-data` URL endpoint, you should get the `You are in the my-plugin-content-type controller!` text returned with the response.

## Get the data in the admin panel

Any request sent from an admin panel component to the endpoint for which we defined the custom route `/my-plugin/pass-data` should now return the text message returned by the custom controller.

So for instance, if you create an `/admin/src/api/foobar.js` file and copy and paste the following code example:

```js title="/my-plugin/admin/src/api/foobar.js"

const foobarRequests = {
  getFoobar: async () => {
    const data = await axios.get(`/my-plugin/pass-data`);
    return data;
  },
};

```

You will be able to use `foobarRequests.getFoobar()` in the code of an admin panel component and have it return the `You are in the my-plugin-content-type controller!` text with the data.

For instance, within a React component, you could use `useEffect` to get the data after the component initializes:

```js title="/my-plugin/admin/src/components/MyComponent/index.js"

const [foobar, setFoobar] = useState([]);

// …
useEffect(() => {
  foobarRequests.getFoobar().then(res => {
    setSchemas(res.data);
  });
}, [setFoobar]);
// …
```

This would set the `You are in the my-plugin-content-type controller!` text within the `foobar` data of the component's state.



# How to store and access data from a Strapi plugin
Source: https://docs.strapi.io/cms/plugins-development/guides/store-and-access-data

# How to store and access data from a Strapi plugin

</Tabs>

The generator CLI is interactive and asks a few questions about the content-type and the attributes it will contain. Answer the first questions, then for the `Where do you want to add this model?` question, choose the `Add model to existing plugin` option and type the name of the related plugin when asked.

<figure style={{width: '100%', margin: '0' }}>
  <img src="/img/assets/development/generate-plugin-content-type.png" alt="Generating a content-type plugin with the CLI" />
  <em><figcaption style={{fontSize: '12px'}}>The <code>strapi generate content-type</code> CLI generator is used to create a basic content-type for a plugin.</figcaption></em>
</figure>

<br />

The CLI will generate some code required to use your plugin, which includes the following:

- the [content-type schema](/cms/backend-customization/models#model-schema)
- and a basic [controller](/cms/backend-customization/controllers), [service](/cms/backend-customization/services), and [route](/cms/backend-customization/routes) for the content-type

:::tip
You may want to create the whole structure of your content-types either entirely with the CLI generator or by directly creating and editing `schema.json` files. We recommend you first create a simple content-type with the CLI generator and then leverage the [Content-Type Builder](/cms/features/content-type-builder) in the admin panel to edit your content-type.

If your content-type is not visible in the admin panel, you might need to set the `content-manager.visible` and `content-type-builder.visible` parameters to `true` in the `pluginOptions` object of the content-type schema:

<details>
<summary>Making a plugin content-type visible in the admin panel:</summary>

The following highlighted lines in an example `schema.json` file show how to make a plugin content-type visible to the Content-Type Builder and Content-Manager:

```json title="/server/content-types/my-plugin-content-type/schema.json" {13-20} showLineNumbers
{
  "kind": "collectionType",
  "collectionName": "my_plugin_content_types",
  "info": {
    "singularName": "my-plugin-content-type",
    "pluralName": "my-plugin-content-types",
    "displayName": "My Plugin Content-Type"
  },
  "options": {
    "draftAndPublish": false,
    "comment": ""
  },
  "pluginOptions": {
    "content-manager": {
      "visible": true
    },
    "content-type-builder": {
      "visible": true
    }
  },
  "attributes": {
    "name": {
      "type": "string"
    }
  }
}

```

</details>
:::

### Ensure plugin content-types are imported

The CLI generator might not have imported all the related content-type files for your plugin, so you might have to make the following adjustments after the `strapi generate content-type` CLI command has finished running:

1. In the `/server/index.js` file, import the content-types:

  ```js {7,22} showLineNumbers title="/server/index.js"
  'use strict';

  const register = require('./register');
  const bootstrap = require('./bootstrap');
  const destroy = require('./destroy');
  const config = require('./config');
  const contentTypes = require('./content-types');
  const controllers = require('./controllers');
  const routes = require('./routes');
  const middlewares = require('./middlewares');
  const policies = require('./policies');
  const services = require('./services');

  module.exports = {
    register,
    bootstrap,
    destroy,
    config,
    controllers,
    routes,
    services,
    contentTypes,
    policies,
    middlewares,
  };

  ```

2. In the `/server/content-types/index.js` file, import the content-type folder:

  ```js title="/server/content-types/index.js"
  'use strict';

  module.exports = {
    // In the line below, replace my-plugin-content-type
    // with the actual name and folder path of your content type
    "my-plugin-content-type": require('./my-plugin-content-type'),
  };
  ```

3. Ensure that the `/server/content-types/[your-content-type-name]` folder contains not only the `schema.json` file generated by the CLI, but also an `index.js` file that exports the content-type with the following code:

  ```js title="/server/content-types/my-plugin-content-type/index.js
  'use strict';

  const schema = require('./schema');

  module.exports = {
    schema,
  };
  ```

## Interact with data from the plugin

Once you have created a content-type for your plugin, you can create, read, update, and delete data.

:::note
A plugin can only interact with data from the `/server` folder. If you need to update data from the admin panel, please refer to the [passing data guide](/cms/plugins-development/guides/pass-data-from-server-to-admin).
:::

To create, read, update, and delete data, you can use either the [Entity Service API](/cms/api/entity-service) or the [Query Engine API](/cms/api/query-engine). While it's recommended to use the Entity Service API, especially if you need access to components or dynamic zones, the Query Engine API is useful if you need unrestricted access to the underlying database.

Use the `plugin::your-plugin-slug.the-plugin-content-type-name` syntax for content-type identifiers in Entity Service and Query Engine API queries.

**Example:**

Here is how to find all the entries for the `my-plugin-content-type` collection type created for a plugin called `my-plugin`:

```js
// Using the Document Service API
let data = await strapi.documents('plugin::my-plugin.my-plugin-content-type').findMany();

// Using the Query Engine API
let data = await strapi.db.query('plugin::my-plugin.my-plugin-content-type').findMany();
````

:::tip
You can access the database via the `strapi` object which can be found in `middlewares`, `policies`, `controllers`, `services`, as well as from the `register`, `boostrap`, `destroy` lifecycle functions.
:::



# 플러그인 SDK
Source: https://docs.strapi.io/cms/plugins-development/plugin-sdk

# 플러그인 SDK 참조

플러그인 SDK는  패키지에서 제공하는 명령어 세트로, 로컬 플러그인으로 사용하거나 NPM에 게시하거나 마켓플레이스에 제출하기 위한 플러그인 개발에 중점을 둡니다.

현재 문서는 사용 가능한 플러그인 SDK 명령어를 나열합니다. [관련 가이드](/cms/plugins-development/create-a-plugin)는 이러한 명령어를 사용하여 처음부터 플러그인을 생성하고, 기존 프로젝트에 연결하고, 게시하는 방법을 보여줍니다.

## npx @strapi/sdk-plugin init

주어진 경로에 새 플러그인을 생성합니다.

```bash
npx @strapi/sdk-plugin init
```

| 인수    |  타입  | 설명               | 기본값                     |
| --------- | :----: | ------------------ | ------------------------- |
| `path`    | string | 플러그인 경로       | `./src/plugins/my-plugin` |

| 옵션           | 타입 | 설명                                    | 기본값 |
| ------------- | :--: | --------------------------------------- | ------- |
| `-d, --debug` |  -   | 상세 로그와 함께 디버깅 모드 활성화        | false   |
| `--silent`    |  -   | 아무것도 로그하지 않음                   | false   |

## strapi-plugin build

게시를 위해 Strapi 플러그인을 번들링합니다.

```bash
strapi-plugin build
```

| 옵션           |  타입  | 설명                                                                                                       | 기본값 |
| -------------- | :----: | ----------------------------------------------------------------------------------------------------------------- | ------- |
| `--force`      | string | 잠재적으로 파괴적인 요청을 포함하여 모든 프롬프트에 자동으로 "yes"라고 답하고 비대화식으로 실행합니다. | -       |
| `-d, --debug`  |   -    | 상세 로그와 함께 디버깅 모드 활성화                                                                           | false   |
| `--silent`     |   -    | 아무것도 로그하지 않음                                                                                               | false   |
| `--minify`     |   -    | 출력을 최소화                                                                                                 | true    |
| `--sourcemaps` |   -    | 소스맵 생성                                                                                                | false   |

## strapi-plugin watch:link

변경 시 플러그인을 자동으로 재컴파일하고 `yalc push --publish`를 실행합니다.

테스트 목적으로 플러그인을 기존 애플리케이션에 연결하여 실제 조건에서 실험하는 것이 매우 편리합니다. 이 명령어는 이 프로세스를 간소화하는 데 도움을 줍니다.

```bash
strapi-plugin watch:link
```

| 옵션           | 타입 | 설명                                    | 기본값 |
| ------------- | :--: | --------------------------------------- | ------- |
| `-d, --debug` |  -   | 상세 로그와 함께 디버깅 모드 활성화        | false   |
| `--silent`    |  -   | 아무것도 로그하지 않음                   | false   |

## strapi-plugin watch

플러그인 소스 코드의 변경 사항을 감시하고 매번 재빌드합니다. 플러그인을 구현하고 애플리케이션에서 테스트할 때 유용합니다.

```bash
strapi-plugin watch
```

| 옵션           | 타입 | 설명                                    | 기본값 |
| ------------- | :--: | --------------------------------------- | ------- |
| `-d, --debug` |  -   | 상세 로그와 함께 디버깅 모드 활성화        | false   |
| `--silent`    |  -   | 아무것도 로그하지 않음                   | false   |

## strapi-plugin verify

게시하기 전에 플러그인의 출력을 검증합니다.

```bash
strapi-plugin verify
```

| 옵션           | 타입 | 설명                                    | 기본값 |
| ------------- | :--: | --------------------------------------- | ------- |
| `-d, --debug` |  -   | 상세 로그와 함께 디버깅 모드 활성화        | false   |
| `--silent`    |  -   | 아무것도 로그하지 않음                   | false   |



# 플러그인 구조
Source: https://docs.strapi.io/cms/plugins-development/plugin-structure

# 플러그인 구조

[Plugin SDK로 플러그인을 생성](/cms/plugins-development/create-a-plugin)할 때, Strapi는 `/src/plugins/my-plugin` 폴더에 다음과 같은 보일러플레이트 구조를 생성합니다:

Strapi 플러그인은 2개 부분으로 나뉘며, 각각 다른 폴더에 있고 다른 API를 제공합니다:

| 플러그인 부분 | 설명 | 폴더       | API |
|-------------|-------------|--------------|-----|
| 관리자 패널 | [관리자 패널](/cms/intro)에서 보이는 것들을 포함합니다 (컴포넌트, 네비게이션, 설정 등) | `admin/` |[관리자 패널 API](/cms/plugins-development/admin-panel-api)|
| 백엔드 서버 | [백엔드 서버](/cms/backend-customization)와 관련된 것들을 포함합니다 (콘텐츠 타입, 컨트롤러, 미들웨어 등) |`server/` |[서버 API](/cms/plugins-development/server-api)|

<br />

:::note 특정 사용 사례에 대한 다른 부분의 유용성에 대한 참고사항
- **서버 전용 플러그인**: 애플리케이션의 API를 향상시키기 위해 서버 부분만 사용하는 플러그인을 만들 수 있습니다. 예를 들어, 이 플러그인은 특정 사용 사례에 유용한 자체적인 표시되거나 숨겨진 콘텐츠 타입, 컨트롤러 액션, 라우트를 가질 수 있습니다. 이런 시나리오에서는 플러그인이 관리자 패널에 인터페이스를 가질 필요가 없습니다.

- **관리자 패널 플러그인 vs. 애플리케이션별 커스터마이징**: 관리자 패널에 일부 컴포넌트를 주입하기 위한 플러그인을 만들 수 있습니다. 하지만 `/src/admin/index.js` 파일을 생성하고 `bootstrap` 라이프사이클 함수를 호출하여 컴포넌트를 주입하는 방법으로도 이를 달성할 수 있습니다. 이 경우 플러그인을 만들지 여부는 코드를 재사용하고 배포할 계획이 있는지 또는 고유한 Strapi 애플리케이션에만 유용한지에 따라 결정됩니다.
:::

<br/>

:::strapi 다음에 읽을 내용은?
Strapi 플러그인 개발 여정의 다음 단계는 Strapi 플러그인 API 중 하나를 사용해야 합니다.

플러그인 API 사용 방법을 이해하는 데 도움이 되는 2가지 유형의 리소스가 있습니다:

- [관리자 패널 API](/cms/plugins-development/admin-panel-api)와 [서버 API](/cms/plugins-development/server-api)에 대한 참조 문서는 Strapi 플러그인으로 할 수 있는 것들에 대한 개요를 제공합니다.
- [가이드](/cms/plugins-development/developing-plugins#guides)는 특정 사용 사례 기반 예제들을 다룹니다.
:::



# 플러그인 확장
Source: https://docs.strapi.io/cms/plugins-development/plugins-extension

# 플러그인 확장

Strapi는 [마켓플레이스](/cms/plugins/installing-plugins-via-marketplace#installing-marketplace-plugins-and-providers)에서 설치하거나 npm 패키지로 설치할 수 있는 플러그인들을 제공합니다. 또한 자신만의 플러그인을 만들거나([플러그인 개발](/cms/plugins-development/developing-plugins) 참고) 기존 플러그인을 확장할 수도 있습니다.

:::warning
* 플러그인 업데이트로 인해 이 플러그인의 확장 기능이 작동하지 않을 수 있습니다.
* 새로운 버전의 Strapi는 필요시 마이그레이션 가이드와 함께 릴리즈되지만, 이러한 가이드는 플러그인 확장을 다루지 않습니다. 광범위한 커스터마이징이 필요한 경우 플러그인을 포크하는 것을 고려하세요.
* 현재 플러그인의 관리자 패널 부분은 를 사용해서만 확장할 수 있지만, 이렇게 하면 향후 Strapi 버전에서 플러그인이 작동하지 않을 수 있다는 점을 고려하세요.
:::

플러그인 확장 코드는 `./src/extensions` 폴더에 있습니다([프로젝트 구조](/cms/project-structure) 참고). 일부 플러그인은 수정 준비가 된 파일들을 자동으로 생성합니다.

<details> 
<summary>확장 폴더 구조 예시</summary>

```bash
/extensions
  /some-plugin-to-extend
    strapi-server.js|ts
    /content-types
      /some-content-type-to-extend
        model.json
      /another-content-type-to-extend
        model.json
  /another-plugin-to-extend
    strapi-server.js|ts
```
</details>

플러그인은 2가지 방법으로 확장할 수 있습니다:

- [플러그인의 콘텐츠 타입 확장](#extending-a-plugins-content-types)
- [플러그인의 인터페이스 확장](#extending-a-plugins-interface) (예: 컨트롤러, 서비스, 정책, 미들웨어 등을 추가)

## 플러그인의 콘텐츠 타입 확장

플러그인의 콘텐츠 타입은 2가지 방법으로 확장할 수 있습니다: `strapi-server.js|ts` 내에서 프로그래밍 인터페이스를 사용하거나 콘텐츠 타입 스키마를 재정의하는 방법입니다.

콘텐츠 타입의 최종 스키마는 다음 로딩 순서에 따라 결정됩니다:

1. 원본 플러그인의 콘텐츠 타입
2. `./src/extensions/plugin-name/content-types/content-type-name/schema.json`에 정의된 [스키마](/cms/backend-customization/models#model-schema) 선언으로 재정의된 콘텐츠 타입
3. [`strapi-server.js|ts`에서 내보낸 `content-types` 키](/cms/plugins-development/server-api#content-types)의 콘텐츠 타입 선언
4. Strapi 애플리케이션의 [`register()` 함수](/cms/configurations/functions#register)에서의 콘텐츠 타입 선언

플러그인의 [콘텐츠 타입](/cms/backend-customization/models)을 덮어쓰려면:

1. _(선택사항)_ 폴더가 아직 없다면 앱 루트에 `./src/extensions` 폴더를 생성합니다.
2. 확장할 플러그인과 같은 이름의 하위 폴더를 생성합니다.
3. `content-types` 하위 폴더를 생성합니다.
4. `content-types` 하위 폴더 안에 덮어쓸 콘텐츠 타입과 같은 [singularName](/cms/backend-customization/models#model-information)으로 또 다른 하위 폴더를 생성합니다.
5. 이 `content-types/name-of-content-type` 하위 폴더 안에서 `schema.json` 파일로 콘텐츠 타입의 새로운 스키마를 정의합니다([스키마](/cms/backend-customization/models#model-schema) 문서 참고).
6. _(선택사항)_ 덮어쓸 각 콘텐츠 타입에 대해 4단계와 5단계를 반복합니다.

## 플러그인의 인터페이스 확장

Strapi 애플리케이션이 초기화될 때, 플러그인, 확장 및 전역 라이프사이클 함수 이벤트는 다음 순서로 발생합니다:

1. 플러그인이 로드되고 인터페이스가 노출됩니다.
2. `./src/extensions`의 파일들이 로드됩니다.
3. `./src/index.js|ts`의 `register()`와 `bootstrap()` 함수가 호출됩니다.

플러그인의 인터페이스는 2단계(`./src/extensions` 내에서) 또는 3단계(`./src/index.js|ts` 내에서)에서 확장할 수 있습니다.

:::note
Strapi 프로젝트가 TypeScript 기반이라면, `index` 파일이 TypeScript 확장자(즉, `src/index.ts`)를 가지고 있는지 확인하세요. 그렇지 않으면 컴파일되지 않습니다.
:::

### 확장 폴더 내에서

`./src/extensions` 폴더를 사용하여 플러그인의 서버 인터페이스를 확장하려면:

1. _(선택사항)_ 폴더가 아직 없다면 앱 루트에 `./src/extensions` 폴더를 생성합니다.
2. 확장할 플러그인과 같은 이름의 하위 폴더를 생성합니다.
3. [서버 API](/cms/plugins-development/server-api)를 사용하여 플러그인의 백엔드를 확장하기 위한 `strapi-server.js|ts` 파일을 생성합니다.
4. 이 파일 내에서 함수를 정의하고 내보냅니다. 이 함수는 `plugin` 인터페이스를 인수로 받아 확장할 수 있습니다.

<details>
<summary>백엔드 확장 예시</summary>

```js title="./src/extensions/some-plugin-to-extend/strapi-server.js|ts"

module.exports = (plugin) => {
  plugin.controllers.controllerA.find = (ctx) => {};

  plugin.policies[newPolicy] = (ctx) => {};

  plugin.routes['content-api'].routes.push({
    method: 'GET',
    path: '/route-path',
    handler: 'controller.action',
  });

  return plugin;
};
```
</details>

### register와 bootstrap 함수 내에서

`./src/index.js|ts` 내에서 플러그인의 인터페이스를 확장하려면, 전체 프로젝트의 `bootstrap()`과 `register()` [함수](/cms/configurations/functions)를 사용하고, [게터](/cms/plugins-development/server-api#usage)를 통해 프로그래밍 방식으로 인터페이스에 접근합니다.

<details>
<summary>./src/index.js|ts 내에서 플러그인의 콘텐츠 타입 확장 예시</summary>

```js title="./src/index.js|ts"

module.exports = {
  register({ strapi }) {
    const contentTypeName = strapi.contentType('plugin::my-plugin.content-type-name')  
    contentTypeName.attributes = {
      // 이전에 정의된 속성들을 확산
      ...contentTypeName.attributes,
      // 새로운 속성 추가 또는 기존 속성 재정의
      'toto': {
        type: 'string',
      }
    }
  },
  bootstrap({ strapi }) {},
};
```
</details>



# 플러그인용 서버 API
Source: https://docs.strapi.io/cms/plugins-development/server-api

# 플러그인용 서버 API

Strapi 플러그인은 Strapi 애플리케이션의 백엔드와 [프론트엔드](/cms/plugins-development/admin-panel-api) 모두와 상호작용할 수 있습니다. 서버 API는 백엔드 부분에 관한 것으로, 즉 플러그인이 Strapi 애플리케이션의 서버 부분과 상호작용하는 방법입니다.

:::prerequisites
[Strapi 플러그인을 생성](/cms/plugins-development/create-a-plugin)했어야 합니다.
:::

서버 API에는 다음이 포함됩니다:

- 필요한 인터페이스를 내보내는 [진입 파일](#entry-file),
- [라이프사이클 함수](#lifecycle-functions),
- [구성](#configuration) API,
- 그리고 [백엔드 서버의 모든 요소를 커스터마이징](#backend-customization)하는 기능.

플러그인 인터페이스를 선언하고 내보낸 후에는 [플러그인 인터페이스를 사용](#usage)할 수 있습니다.

:::note
플러그인의 서버 부분에 대한 전체 코드는 `/server/src/index.ts|js` 파일에 있을 수 있습니다. 그러나 Plugin SDK에서 생성한 [구조](/cms/plugins-development/plugin-structure)처럼 코드를 다른 폴더로 나누는 것이 권장됩니다.
:::

## 진입 파일

플러그인 폴더 루트의 `/src/server/index.js` 파일은 필요한 인터페이스를 내보내며, 다음 매개변수를 사용할 수 있습니다:

| 매개변수 타입              | 사용 가능한 매개변수                                                                                                                                                                                           |
| ---------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| 라이프사이클 함수           | <ul><li> [register](#register)</li><li>[bootstrap](#bootstrap)</li><li>[destroy](#destroy)</li></ul>                                                                                                           |
| 구성                    | <ul><li>[config](#configuration) 객체   </li></ul>                                                                                                                                                                             |
| 백엔드 커스터마이징         | <ul><li>[contentTypes](#content-types)</li><li>[routes](#routes)</li><li>[controllers](#controllers)</li><li>[services](#services)</li><li>[policies](#policies)</li><li>[middlewares](#middlewares)</li></ul> |

## 라이프사이클 함수

<br/>

### register()

이 함수는 [권한](/cms/features/users-permissions), [커스텀 필드](/cms/features/custom-fields#registering-a-custom-field-on-the-server)의 서버 부분, 또는 데이터베이스 마이그레이션을 등록하기 위해 애플리케이션이 [부트스트랩](#bootstrap)되기 전에 플러그인을 로드하기 위해 호출됩니다.

**타입**: `Function`

**예시:**

</Tabs>

### bootstrap()

[bootstrap](/cms/configurations/functions#bootstrap) 함수는 플러그인이 [등록](#register)된 직후에 호출됩니다.

**타입**: `Function`

**예시:**

</Tabs>

### destroy()

[destroy](/cms/configurations/functions#destroy) 라이프사이클 함수는 Strapi 인스턴스가 삭제될 때 플러그인을 정리(연결 종료, 리스너 제거 등)하기 위해 호출됩니다.

**타입**: `Function`

**예시:**

</Tabs>

## 구성

`config`는 기본 플러그인 구성을 저장합니다. [`./config/plugins.js` 구성 파일](/cms/configurations/plugins) 내에서 사용자가 입력한 구성을 로드하고 검증합니다.

**타입**: `Object`

| 매개변수      | 타입                                           | 설명                                                                                                                                              |
| ----------- | ---------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `default`   | Object, 또는 Object를 반환하는 Function | 사용자 구성과 병합되는 기본 플러그인 구성                                                                                         |
| `validator` | Function                                       | <ul><li>기본 플러그인 구성과 사용자 구성을 병합한 결과가 유효한지 확인</li><li>결과 구성이 유효하지 않을 때 오류 발생</li></ul> |

**예시:**

</Tabs>

Once defined, the configuration can be accessed:

- with `strapi.plugin('plugin-name').config('some-key')` for a specific configuration property,
- or with `strapi.config.get('plugin.plugin-name')` for the whole configuration object.

:::tip
Run `yarn strapi console` or `npm run strapi console` to access the strapi object in a live console.
:::

## Backend customization

All elements of the back-end server of Strapi can be customized through a plugin using the Server API.

:::prerequisites
To better understand this section, ensure you have read through the [back-end customization](/cms/backend-customization) documentation of a Strapi application.
:::

### Content-types

An object with the [content-types](/cms/backend-customization/models) the plugin provides.

**Type**: `Object`

:::note
Content-Types keys in the `contentTypes` object should re-use the `singularName` defined in the [`info`](/cms/backend-customization/models#model-information) key of the schema.
:::

**Example:**

</Tabs>

### Routes

An array of [routes](/cms/backend-customization/routes) configuration.

**Type**: `Object[]`

**Examples:**

</Tabs>

</TabItem>

</Tabs>

</TabItem>
</Tabs>

### Controllers

An object with the [controllers](/cms/backend-customization/controllers) the plugin provides.

**Type**: `Object`

**Example:**

</Tabs>

### Services

An object with the [services](/cms/backend-customization/services) the plugin provides.

Services should be functions taking `strapi` as a parameter.

**Type**: `Object`

**Example:**

</Tabs>

### Policies

An object with the [policies](/cms/backend-customization/policies) the plugin provides.

**Type**: `Object`

**Example:**

<Tabs groupdId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="/src/plugins/my-plugin/server/src/index.js"

"use strict";

//…
const policies = require('./policies');
//…

module.exports = {
  //…
  policies,
  //…
};
```

```js title="/src/plugins/my-plugin/server/policies/index.js"

const policyA = require('./policy-a');
const policyB = require('./policy-b');

module.exports = {
  policyA,
  policyB,
};
```

```js title="/src/plugins/my-plugin/server/policies/policy-a.js"

module.exports = (policyContext, config, { strapi }) => {
  if (ctx.state.user && ctx.state.user.isActive) {
    return true;
  }

  return false;
};
```



# Documentation plugin
Source: https://docs.strapi.io/cms/plugins/documentation

# Documentation plugin

The Documentation plugin automates your API documentation creation. It basically generates a swagger file. It follows the 

</IdentityCard>

:::caution Unmaintained plugin
The Documentation plugin is not actively maintained and may not work with Strapi 5.
:::

</Tabs>

Once the plugin is installed, starting Strapi generates the API documentation.

## Configuration

Most configuration options for the Documentation plugin are handled via your Strapi project's code. A few settings are available in the admin panel.

### Admin panel settings

The Documentation plugin affects multiple parts of the admin panel. The following table lists all the additional options and settings that are added to a Strapi application once the plugin has been installed:

| Section impacted    | Options and settings         |
|------------------|-------------------------------------------------------------|
| Documentation    | <ul>Addition of a new Documentation option in the main navigation  which shows a panel with buttons to  open and  regenerate the documentation.</ul>        |
| Settings     | <ul><li>Addition of a "Documentation plugin" setting section, which controls whether the documentation endpoint is private or not (see [restricting access](#restrict-access)).<br/> 👉 Path reminder:  *Settings > Documentation plugin* </li><br/>  <li> Activation of role based access control for accessing, updating, deleting, and regenerating the documentation. Administrators can authorize different access levels to different types of users in the *Plugins* tab and the *Settings* tab (see [Users & Permissions documentation](/cms/features/users-permissions)).<br/>👉 Path reminder:  *Settings > Administration Panel > Roles* </li></ul>| 

#### Restricting access to your API documentation {#restrict-access}

By default, your API documentation will be accessible by anyone.

To restrict API documentation access, enable the **Restricted Access** option from the admin panel:

1. Navigate to  *Settings* in the main navigation of the admin panel.
2. Choose **Documentation**.
3. Toggle **Restricted Access** to `ON`.
4. Define a password in the `password` input.
5. Save the settings.

### Code-based configuration

To configure the Documentation plugin, create a `settings.json` file in the `src/extensions/documentation/config` folder. In this file, you can specify all your environment variables, licenses, external documentation links, and all the entries listed in the . 

The following is an example configuration:

```json title="src/extensions/documentation/config/settings.json"
{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "DOCUMENTATION",
    "description": "",
    "termsOfService": "YOUR_TERMS_OF_SERVICE_URL",
    "contact": {
      "name": "TEAM",
      "email": "contact-email@something.io",
      "url": "mywebsite.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "x-strapi-config": {
    "plugins": ["upload", "users-permissions"],
    "path": "/documentation"
  },
  "servers": [
    {
      "url": "http://localhost:1337/api",
      "description": "Development server"
    }
  ],
  "externalDocs": {
    "description": "Find out more",
    "url": "https://docs.strapi.io/developer-docs/latest/getting-started/introduction.html"
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}
```

:::tip
If you need to add a custom key, prefix it by `x-` (e.g., `x-strapi-something`).
:::

#### Creating a new version of the documentation {#create-a-new-version-of-the-documentation}

To create a new version, change the `info.version` key in the `settings.json` file:

```json title="src/extensions/documentation/config/settings.json"
{
  "info": {
    "version": "2.0.0"
  }
}
```

This will automatically create a new version.

#### Defining which plugins need documentation generated {#define-which-plugins}

If you want plugins to be included in documentation generation, they should be included in the `plugins` array in the `x-strapi-config` object. By default, the array is initialized with `["upload", "users-permissions"]`:

```json title="src/extensions/documentation/config/settings.json"
{
  "x-strapi-config": {
    "plugins": ["upload", "users-permissions"]
  }
}
```

To add more plugins, such as your custom plugins, add their name to the array.

If you do not want plugins to be included in documentation generation, provide an empty array (i.e., `plugins: []`).

#### Overriding the generated documentation

The Documentation plugins comes with 3 methods to override the generated documentation: [`excludeFromGeneration`](#excluding-from-generation), [`registerOverride`](#register-override), and [`mutateDocumentation`](#mutate-documentation).

##### excludeFromGeneration() {#excluding-from-generation}

To exclude certain APIs or plugins from being generated, use the `excludeFromGeneration` found on the documentation plugin’s `override` service in your application or plugin's [`register` lifecycle](/cms/plugins-development/admin-panel-api#register).

:::note
`excludeFromGeneration` gives more fine-grained control over what is generated.

For example, pluginA might create several new APIs while pluginB may only want to generate documentation for some of those APIs. In that case, pluginB could still benefit from the generated documentation it does need by excluding only what it does not need.
:::

*****

| Parameter | Type                       | Description                                              |
| --------- | -------------------------- | -------------------------------------------------------- |
| `api`       | String or Array of Strings | The name of the API/plugin, or list of names, to exclude |

```js title="Application or plugin register lifecycle"

module.exports = {
  register({ strapi }) {
    strapi
      .plugin("documentation")
      .service("override")
      .excludeFromGeneration("restaurant");
    // or several
    strapi
      .plugin("documentation")
      .service("override")
      .excludeFromGeneration(["address", "upload"]);
  }
}
```

##### registerOverride() {#register-override}

If the Documentation plugin fails to generate what you expect, it is possible to replace what has been generated.

The Documentation plugin exposes an API that allows you to replace what was generated for the following OpenAPI root level keys: `paths`, `tags`, `components` .

To provide an override, use the `registerOverride` function found on the Documentation plugin’s `override` service in your application or plugin's [`register` lifecycle](/cms/plugins-development/admin-panel-api#register).

| Parameter                     | Type                      | Description                                                                                                   |
| ----------------------------- | ------------------------- | ------------------------------------------------------------------------------------------------------------- |
| `override`                     | Object                    | OpenAPI object including any of the following keys paths, tags, components. Accepts JavaScript, JSON, or yaml |
| `options`                      | Object                    | Accepts `pluginOrigin` and `excludeFromGeneration`                                                               |
| `options.pluginOrigin`          | String                    | The plugin that is registering the override                                                                   |
| `options.excludeFromGeneration` | String or Array of String | The name of the API/plugin, or list of names, to exclude                                                      |

:::caution
Plugin developers providing an override should always specify the `pluginOrigin` options key. Otherwise the override will run regardless of the user’s configuration.
:::

The Documentation plugin will use the registered overrides to replace the value of common keys on the generated documentation with what the override provides. If no common keys are found, the plugin will add new keys to the generated documentation.

If the override completely replaces what the documentation generates, you can specify that generation is no longer necessary by providing the names of the APIs or plugins to exclude in the options key array `excludeFromGeneration`.

If the override should only be applied to a specific version, the override must include a value for `info.version`. Otherwise, the override will run on all documentation versions.

```js title="Application or plugin register lifecycle"

module.exports = {
  register({ strapi }) {
    if (strapi.plugin('documentation')) {
      const override = {
        // Only run this override for version 1.0.0
        info: { version: '1.0.0' },
        paths: {
          '/answer-to-everything': {
            get: {
              responses: { 200: { description: "*" }}
            }
          }
        }
      }

      strapi
        .plugin('documentation')
        .service('override')
        .registerOverride(override, {
          // Specify the origin in case the user does not want this plugin documented
          pluginOrigin: 'upload',
          // The override provides everything don't generate anything
          excludeFromGeneration: ['upload'],
        });
    }
  },
}
```

The overrides system is provided to try and simplify amending the generated documentation. It is the only way a plugin can add or modify the generated documentation.

##### mutateDocumentation() {#mutate-documentation}

The Documentation plugin’s configuration also accepts a `mutateDocumentation` function on `info['x-strapi-config']`. This function receives a draft state of the generated documentation that be can be mutated. It should only be applied from an application and has the final say in the OpenAPI schema.

| Parameter                   | Type   | Description                                                            |
| --------------------------- | ------ | ---------------------------------------------------------------------- |
| `generatedDocumentationDraft` | Object | The generated documentation with applied overrides as a mutable object |

```js title="config/plugins.js"

module.exports = {
  documentation: {
    config: {
      "x-strapi-config": {
        mutateDocumentation: (generatedDocumentationDraft) => {
          generatedDocumentationDraft.paths[
            "/answer-to-everything" // must be an existing path
          ].get.responses["200"].description = "*";
        },
      },
    },
  },
};
```

## Usage

The Documentation plugin visualizes your API using . To access the UI, select  in the main navigation of the admin panel. Then click **Open documentation** to open the Swagger UI. Using the Swagger UI you can view all of the endpoints available on your API and trigger API calls.

:::tip
Once the plugin is installed, the plugin user interface can be accessed at the following URL:
`<server-url>:<server-port>/documentation/<documentation-version>`
(e.g., ).
:::

### Regenerating documentation {#regenerate-documentation}

There are 2 ways to update the documentation after making changes to your API:

- restart your application to regenerate the version of the documentation specified in the Documentation plugin's configuration,
- or go to the Documentation plugin page and click the **regenerate** button for the documentation version you want to regenerate.

### Authenticating requests

Strapi is secured by default, which means that most of your endpoints require the user to be authorized. If the CRUD action has not been set to Public in the [Users & Permissions feature](/cms/features/users-permissions#roles) then you must provide your JSON web token (JWT). To do this, while viewing the API Documentation, click the **Authorize** button and paste your JWT in the _bearerAuth_ _value_ field.



# GraphQL plugin
Source: https://docs.strapi.io/cms/plugins/graphql

# GraphQL plugin

By default Strapi create [REST endpoints](/cms/api/rest#endpoints) for each of your content-types. The GraphQL plugin adds a GraphQL endpoint to fetch and mutate your content. With the GraphQL plugin installed, you can use the Apollo Server-based GraphQL Sandbox to interactively build your queries and mutations and read documentation tailored to your content types.

</IdentityCard>

</Tabs>

Once installed, the GraphQL sandbox is accessible at the `/graphql` URL and can be used to interactively build your queries and mutations and read documentation tailored to your content-types.

Once the plugin is installed, the **GraphQL Sandbox** is accessible at the `/graphql` route (e.g., 

</Tabs>

#### Dynamically enable Apollo Sandbox

You can use a function to dynamically enable Apollo Sandbox depending on the environment:

</Tabs>

#### CORS exceptions for Landing Page

If the landing page is enabled in production environments (which is not recommended), CORS headers for the Apollo Server landing page must be added manually.

To add them globally, you can merge the following into your middleware configuration:

```javascript title="/config/middlewares"
{
  name: "strapi::security",
  config: {
    contentSecurityPolicy: {
      useDefaults: true,
      directives: {
        "connect-src": ["'self'", "https:", "apollo-server-landing-page.cdn.apollographql.com"],
        "img-src": ["'self'", "data:", "blob:", "apollo-server-landing-page.cdn.apollographql.com"],
        "script-src": ["'self'", "'unsafe-inline'", "apollo-server-landing-page.cdn.apollographql.com"],
        "style-src": ["'self'", "'unsafe-inline'", "apollo-server-landing-page.cdn.apollographql.com"],
        "frame-src": ["sandbox.embed.apollographql.com"]
      }
    }
  }
}
```

To add these exceptions only for the `/graphql` path (recommended), you can create a new middleware to handle it. For example:

</Tabs>

#### Shadow CRUD

To simplify and automate the build of the GraphQL schema, we introduced the Shadow CRUD feature. It automatically generates the type definitions, queries, mutations and resolvers based on your models.

**Example:**

If you've generated an API called `Document` using [the interactive `strapi generate` CLI](/cms/cli#strapi-generate) or the administration panel, your model looks like this:

```json title="/src/api/[api-name]/content-types/document/schema.json"

{
  "kind": "collectionType",
  "collectionName": "documents",
  "info": {
    "singularName": "document",
    "pluralName": "documents",
    "displayName": "document",
    "name": "document"
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "name": {
      "type": "string"
    },
    "description": {
      "type": "richtext"
    },
    "locked": {
      "type": "boolean"
    }
  }
}
```

<details> 
<summary>Generated GraphQL type and queries</summary>

```graphql
# Document's Type definition
input DocumentFiltersInput {
  name: StringFilterInput
  description: StringFilterInput
  locked: BooleanFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [DocumentFiltersInput]
  or: [DocumentFiltersInput]
  not: DocumentFiltersInput
}

input DocumentInput {
  name: String
  description: String
  locked: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type Document {
  name: String
  description: String
  locked: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type DocumentEntity {
  id: ID
  attributes: Document
}

type DocumentEntityResponse {
  data: DocumentEntity
}

type DocumentEntityResponseCollection {
  data: [DocumentEntity!]!
  meta: ResponseCollectionMeta!
}

type DocumentRelationResponseCollection {
  data: [DocumentEntity!]!
}

# Queries to retrieve one or multiple restaurants.
type Query  {
  document(id: ID): DocumentEntityResponse
  documents(
    filters: DocumentFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
):DocumentEntityResponseCollection
}

# Mutations to create, update or delete a restaurant.
type Mutation {
  createDocument(data: DocumentInput!): DocumentEntityResponse
  updateDocument(id: ID!, data: DocumentInput!): DocumentEntityResponse
  deleteDocument(id: ID!): DocumentEntityResponse
}
```

</details>

#### Customization

Strapi provides a programmatic API to customize GraphQL, which allows:

* disabling some operations for the [Shadow CRUD](#shadow-crud)
* [using getters](#using-getters) to return information about allowed operations
* registering and using an `extension` object to [extend the existing schema](#extending-the-schema) (e.g. extend types or define custom resolvers, policies and middlewares)

<details> 
<summary>Example of GraphQL customizations</summary>

</Tabs>

</details>

##### Disabling operations in the Shadow CRUD

The `extension` service provided with the GraphQL plugin exposes functions that can be used to disable operations on Content-Types:

| Content-type function | Description                                    | Argument type    | Possible argument values |
| --------------------  | ---------------------------------------------- | ---------------- | ---------------------------------------------------------------------------------------------------------- |
| `disable()`           | Fully disable the Content-Type                 | -                | -                                                                                                          |
| `disableQueries()`    | Only disable queries for the Content-Type      | -                | -                                                                                                          |
| `disableMutations()`  | Only disable mutations for the Content-Type    | -                | -                                                                                                          |
| `disableAction()`     | Disable a specific action for the Content-Type | String           | One value from the list:<ul><li>`create`</li><li>`find`</li><li>`findOne`</li><li>`update`</li><li>`delete`</li></ul>   |
| `disableActions()`    | Disable specific actions for the Content-Type  | Array of Strings | Multiple values from the list: <ul><li>`create`</li><li>`find`</li><li>`findOne`</li><li>`update`</li><li>`delete`</li></ul>  |

Actions can also be disabled at the field level, with the following functions:

| Field function     | Description                      |
| ------------------ | -------------------------------- |
| `disable()`        | Fully disable the field          |
| `disableOutput()`  | Disable the output on a field    |
| `disableInput()`   | Disable the input on a field     |
| `disableFilters()` | Disable filters input on a field |

**Examples:**

```js
// Disable the 'find' operation on the 'restaurant' content-type in the 'restaurant' API
strapi
  .plugin('graphql')
  .service('extension')
  .shadowCRUD('api::restaurant.restaurant')
  .disableAction('find')

// Disable the 'name' field on the 'document' content-type in the 'document' API
strapi
  .plugin('graphql')
  .service('extension')
  .shadowCRUD('api::document.document')
  .field('name')
  .disable()
```

##### Using getters

The following getters can be used to retrieve information about operations allowed on content-types:

| Content-type getter        | Description                                                       | Argument type | Possible argument values                                                                                              |
| -------------------------- | ----------------------------------------------------------------- | ------------- | --------------------------------------------------------------------------------------------------------------------- |
| `isEnabled()`              | Returns whether a content-type is enabled                         | -             | -                                                                                                                     |
| `isDisabled()`             | Returns whether a content-type is disabled                        | -             | -                                                                                                                     |
| `areQueriesEnabled()`      | Returns whether queries are enabled on a content-type             | -             | -                                                                                                                     |
| `areQueriesDisabled()`     | Returns whether queries are disabled on a content-type            | -             | -                                                                                                                     |
| `areMutationsEnabled()`    | Returns whether mutations are enabled on a content-type           | -             | -                                                                                                                     |
| `areMutationsDisabled()`   | Returns whether mutations are disabled on a content-type          | -             | -                                                                                                                     |
| `isActionEnabled(action)`  | Returns whether the passed `action` is enabled on a content-type  | String        | One value from the list:<ul><li>`create`</li><li>`find`</li><li>`findOne`</li><li>`update`</li><li>`delete`</li></ul> |
| `isActionDisabled(action)` | Returns whether the passed `action` is disabled on a content-type | String        | One value from the list:<ul><li>`create`</li><li>`find`</li><li>`findOne`</li><li>`update`</li><li>`delete`</li></ul> |

The following getters can be used to retrieve information about operations allowed on fields:

| Field getter          | Description                                   |
| --------------------- | --------------------------------------------- |
| `isEnabled()`         | Returns whether a field is enabled            |
| `isDisabled()`        | Returns whether a field is disabled           |
| `hasInputEnabled()`   | Returns whether a field has input enabled     |
| `hasOutputEnabled()`  | Returns whether a field has output enabled    |
| `hasFiltersEnabled()` | Returns whether a field has filtering enabled |

###### Extending the schema

The schema generated by the Content API can be extended by registering an extension.

This extension, defined either as an object or a function returning an object, will be used by the `use()` function exposed by the `extension` [service](/cms/backend-customization/services) provided with the GraphQL plugin.

The object describing the extension accepts the following parameters:

| Parameter         | Type   | Description                                                                                  |
| ----------------- | ------ | -------------------------------------------------------------------------------------------- |
| `types`           | Array  | Allows extending the schema types using 

</Tabs>

</details>
:::

###### Custom configuration for resolvers

A resolver is a GraphQL query or mutation handler (i.e. a function, or a collection of functions, that generate(s) a response for a GraphQL query or mutation). Each field has a default resolver.

When [extending the GraphQL schema](#extending-the-schema), the `resolversConfig` key can be used to define a custom configuration for a resolver, which can include:

* [authorization configuration](#authorization-configuration) with the `auth` key
* [policies with the `policies`](#policies) key
* and [middlewares with the `middlewares`](#middlewares) key

###### Authorization configuration

By default, the authorization of a GraphQL request is handled by the registered authorization strategy that can be either [API token](/cms/features/api-tokens) or through the [Users & Permissions plugin](#usage-with-the-users--permissions-plugin). The Users & Permissions plugin offers a more granular control.

<details>
<summary> Authorization with the Users & Permissions plugin</summary>

With the Users & Permissions plugin, a GraphQL request is allowed if the appropriate permissions are given.

For instance, if a 'Category' content-type exists and is queried through GraphQL with the `Query.categories` handler, the request is allowed if the appropriate `find` permission for the 'Categories' content-type is given.

To query a single category, which is done with the `Query.category` handler, the request is allowed if the the `findOne` permission is given.

Please refer to the user guide on how to [define permissions with the Users & Permissions plugin](/cms/features/rbac#editing-a-role).
</details>

To change how the authorization is configured, use the resolver configuration defined at `resolversConfig.[MyResolverName]`. The authorization can be configured:

* either with `auth: false` to fully bypass the authorization system and allow all requests,
* or with a `scope` attribute that accepts an array of strings to define the permissions required to authorize the request.

<details>
<summary> Examples of authorization configuration</summary>

</Tabs>
</details>

###### Policies

[Policies](/cms/backend-customization/policies) can be applied to a GraphQL resolver through the `resolversConfig.[MyResolverName].policies` key.

The `policies` key is an array accepting a list of policies, each item in this list being either a reference to an already registered policy or an implementation that is passed directly (see [policies configuration documentation](/cms/backend-customization/routes#policies)).

Policies directly implemented in `resolversConfig` are functions that take a `context` object and the `strapi` instance as arguments.
The `context` object gives access to:

* the `parent`, `args`, `context` and `info` arguments of the GraphQL resolver,
* Koa's 

</Tabs>

</details>

###### Middlewares

[Middlewares](/cms/backend-customization/middlewares) can be applied to a GraphQL resolver through the `resolversConfig.[MyResolverName].middlewares` key. The only difference between the GraphQL and REST implementations is that the `config` key becomes `options`.  

The `middlewares` key is an array accepting a list of middlewares, each item in this list being either a reference to an already registered middleware or an implementation that is passed directly (see [middlewares configuration documentation](/cms/backend-customization/routes#middlewares)).

Middlewares directly implemented in `resolversConfig` can take the GraphQL resolver's 

</Tabs>

</details>

##### Security

GraphQL is a query language allowing users to use a broader panel of inputs than traditional REST APIs. GraphQL APIs are inherently prone to security risks, such as credential leakage and denial of service attacks, that can be reduced by taking appropriate precautions.

### Disable introspection and Sandbox in production

In production environments, disabling the GraphQL Sandbox and the introspection query is strongly recommended.
If you haven't edited the [configuration file](#available-options), it is already disabled in production by default.

###### Limit max depth and complexity

A malicious user could send a query with a very high depth, which could overload your server. Use the `depthLimit` [configuration parameter](/cms/plugins/graphql#code-based-configuration) to limit the maximum number of nested fields that can be queried in a single request. By default, `depthLimit` is set to 10 but can be set to a higher value during testing and development.

:::tip
To increase GraphQL security even further, 3rd-party tools can be used. See the guide about 

You should see a new user is created in the `Users` collection type in your Strapi admin panel.

#### Authentication

To perform authorized requests, you must first get a JWT:

Then on each request, send along an `Authorization` header in the form of `{ "Authorization": "Bearer YOUR_JWT_GOES_HERE" }`. This can be set in the HTTP Headers section of your GraphQL Sandbox.

#### Usage with API tokens {#api-tokens}

To use API tokens for authentication, pass the token in the `Authorization` header using the format `Bearer your-api-token`.

:::note
Using API tokens in the the GraphQL Sandbox requires adding the authorization header with your token in the `HTTP HEADERS` tab:

```http
{
  "Authorization" : "Bearer



# Installing Plugins via the Marketplace
Source: https://docs.strapi.io/cms/plugins/installing-plugins-via-marketplace

# Using the Marketplace

Strapi comes with built-in plugins such as [Documentation](/cms/plugins/documentation), [GraphQL](/cms/plugins/graphql), and [Sentry](/cms/plugins/sentry). The Marketplace is where users can find additional plugins to customize Strapi applications, and additional providers to extend plugins. The Marketplace is located in the admin panel, indicated by  _Marketplace_. In the Marketplace, users can browse or search for plugins and providers, link to detailed descriptions for each, and submit new plugins and providers.

:::note strapi In-app Marketplace vs. Market website
The Marketplace in the admin panel displays all existing plugins, regardless of the version of Strapi they are for. All plugins can also be discoverable through the  website.

Keep in mind however that v4 and v5 plugins are not cross-compatible, but that providers are compatible both with v4 and v5 plugins.
:::

The Plugins and Providers tabs display each plugin/provider on individual cards containing:

- their name, sometimes followed by either of the following badges:
  - <img alt="maintained by Strapi icon" src="/img/strapi-logo.png" width="14px" style={{position: "relative", bottom:"2px", marginRight:"2px"}} /> to indicate it is made by Strapi,
  -  to indicate it was verified by Strapi.
- the number of times the plugin/provider was starred on GitHub and downloaded
- the description
- a **More**  button to be redirected to the Market website for additional information, including about the version of Strapi the plugin is for, and implementation instructions

In the top right corner of the Marketplace, the **Submit plugin** button redirects to the Strapi Market where it is possible to submit your own plugin and provider.

:::tip Tips

- The search bar displays incremental search results based on the plugin/provider name and description.
- Use the "Sort by" button or set filters to find plugins more easily.

:::

## Installing Marketplace plugins and providers

To install a new plugin or provider via the Marketplace:

1. Go to the  *Marketplace*.
2. Choose the **Plugins** tab to browse available plugins or the **Providers** tab to browse available providers.
3. Choose an available plugin/provider and click on the **More**  button.
4. Once redirected to the Strapi Market website, follow the plugin/provider-specific implementation instructions.

:::strapi Developing Strapi plugins
Can't find a plugin that suits your use case? Feel free to [create your own](/cms/plugins-development/developing-plugins)!
:::



# Sentry plugin
Source: https://docs.strapi.io/cms/plugins/sentry

# Sentry plugin

This plugin enables you to track errors in your Strapi application using Sentry.

</IdentityCard>

By using the Sentry plugin you can:

* Initialize a Sentry instance upon startup of a Strapi application
* Send Strapi application errors as events to Sentry
* Include additional metadata in Sentry events to assist in debugging
* Expose a global Sentry service usable by the Strapi server

## Installation

Install the Sentry plugin by adding the dependency to your Strapi application as follows:

</Tabs>

## Configuration

Create or edit your `/config/plugins` file to configure the Sentry plugin. The following properties are available:

| Property | Type | Default Value | Description |
| -------- | ---- | ------------- |------------ |
| `dsn` | string | `null` | Your Sentry 

</Tabs>

### Disabling for non-production environments

If the `dsn` property is set to a nil value (`null` or `undefined`) while `sentry.enabled` is true, the Sentry plugin will be available to use in the running Strapi instance, but the service will not actually send errors to Sentry. That allows you to write code that runs on every environment without additional checks, but only send errors to Sentry in production.

When you start Strapi with a nil `dsn` config property, the plugin will print the following warning:<br/>`info: @strapi/plugin-sentry is disabled because no Sentry DSN was provided`

You can make use of that by using the [`env` utility](/cms/configurations/guides/access-cast-environment-variables) to set the `dsn` configuration property depending on the environment.

</Tabs>

### Disabling the plugin completely

Like every other Strapi plugin, you can also disable this plugin in the plugins configuration file. This will cause `strapi.plugins('sentry')` to return `undefined`:

</Tabs>

## Usage

After installing and configuring the plugin, you can access a Sentry service in your Strapi application as follows:

```js
const sentryService = strapi.plugin('sentry').service('sentry');
```

This service exposes the following methods:

| Method | Description | Parameters |
| ------ | ----------- | ---------- |
| `sendError()` | Manually send errors to Sentry. | <ul><li><code>error</code>: The error to be sent.</li><li><code>configureScope</code>: Optional. Enables you to customize the error event.</li></ul> See the official  for more details. |
| `getInstance()` | Used for direct access to the Sentry instance. | - |

The `sendError()` method can be used as follows:

```js
try {
  // Your code here
} catch (error) {
  // Either send a simple error
  strapi
    .plugin('sentry')
    .service('sentry')
    .sendError(error);

  // Or send an error with a customized Sentry scope
  strapi
    .plugin('sentry')
    .service('sentry')
    .sendError(error, (scope, sentryInstance) => {
      // Customize the scope here
      scope.setTag('my_custom_tag', 'Tag value');
    });
  throw error;
}
```

The `getInstance()` method is accessible as follows:

```js
const sentryInstance = strapi
  .plugin('sentry')
  .service('sentry')
  .getInstance();
```



# 프로젝트 구조
Source: https://docs.strapi.io/cms/project-structure

# 프로젝트 구조

Strapi 프로젝트의 구조는 [TypeScript](/cms/typescript)로 생성했는지(기본값, `--quickstart` 옵션 사용 시) 또는 순수 JavaScript로 생성했는지에 따라 다르며, 기본적으로 아래와 같은 형태를 가집니다:



# 빠른 시작 가이드 - Strapi 개발자 문서
Source: https://docs.strapi.io/cms/quick-start

# 빠른 시작 가이드

Strapi는 매우 유연합니다. 빠르게 결과를 보고 싶거나, 제품을 깊이 있게 탐구하고 싶을 때 모두 적합합니다. 이 튜토리얼에서는 직접 프로젝트와 콘텐츠 구조를 처음부터 만들어보고, 이후 Strapi Cloud에 배포하여 데이터를 추가하는 과정을 안내합니다.

*예상 소요 시간: 5~10분*

:::prerequisites

2. 터미널에서 로그인 또는 회원가입을 하라는 메시지가 표시됩니다. 진행하면 30일 무료 

    </Tabs>

3. 터미널에서 프로젝트 이름(Enter로 기본값 사용 가능), 권장 NodeJS 버전, 가까운 리전을 선택하세요:

    ![Strapi Cloud 터미널 질문과 답변](/img/assets/quick-start-guide/qsg-strapi-cloud-terminal-questions.png)

잠시 후, 로컬 프로젝트가 Strapi Cloud에 배포됩니다. 🚀 

완료되면 터미널에 `https://cloud.strapi.io/projects`로 시작하는 링크가 표시됩니다. 클릭하거나 복사해 브라우저에 입력하면, Strapi Cloud 대시보드에서 방금 만든 `my-strapi-project`를 확인할 수 있습니다. 우측 상단 **Visit app** 버튼을 클릭해 배포된 프로젝트에 접속하세요.

:::callout  축하합니다!
이제 프로젝트가 Strapi Cloud에 배포되어 온라인에서 접근할 수 있습니다. [Cloud 전용 문서](/cloud/intro)도 참고하거나, D단계로 넘어가 온라인 프로젝트에 데이터를 추가해보세요.
:::

:::tip
콘텐츠 타입 빌더로 더 많은 필드를 추가하거나 새로운 콘텐츠 타입을 만들어보세요. 변경 사항이 있을 때마다 `deploy` 명령어로 다시 배포하면, 몇 분 내에 온라인 프로젝트가 업데이트됩니다. 정말 마법 같죠? 🪄
:::

##  D단계: 콘텐츠 매니저로 Strapi Cloud 프로젝트에 콘텐츠 추가하기

이제 "Restaurant"와 "Category" 두 컬렉션 타입으로 기본 구조를 만들고, 프로젝트를 Strapi Cloud에 배포했습니다. 이제 실제로 데이터를 추가해보겠습니다.

<details>
<summary>1단계: Strapi Cloud 프로젝트의 관리자 패널 로그인</summary>

### 1단계: Strapi Cloud 프로젝트의 관리자 패널 로그인

Strapi Cloud 프로젝트가 생성되었으니, 로그인해봅시다:

1. 에서 `my-strapi-project`를 클릭하세요.
2. **Visit app** 버튼을 클릭합니다.
3. 새로 열린 페이지에서 첫 번째 관리자 계정을 생성하세요.

로그인 후, 이제 Strapi Cloud 프로젝트에 데이터를 추가할 수 있습니다.

<details>
<summary> 사용자 및 Strapi Cloud 프로젝트 관련 추가 정보와 팁</summary>

:::note 참고: 로컬 사용자와 Strapi Cloud 사용자는 다릅니다
Strapi Cloud 프로젝트와 로컬 프로젝트의 데이터베이스는 서로 다릅니다. 즉, 로컬에서 만든 데이터(사용자 포함)는 자동으로 Cloud로 이전되지 않습니다. 처음 Cloud 프로젝트에 로그인할 때 새 관리자 계정을 만드는 이유입니다.
:::

:::tip 팁: Strapi Cloud 프로젝트의 관리자 패널 바로 접근하기
Strapi Cloud에 배포된 프로젝트는 `https://my-strapi-project-name.strapiapp.com`과 같은 고유 URL로 접근할 수 있습니다. 온라인 프로젝트의 관리자 패널은 URL 뒤에 `/admin`을 붙이면 됩니다(예: `https://my-strapi-project-name.strapiapp.com/admin`). URL은 Cloud 대시보드에서 확인할 수 있으며, 프로젝트 이름 클릭 후 **Visit app** 버튼으로도 바로 이동할 수 있습니다.
:::

</details>

</details>

<details>
<summary>2단계: "Restaurant" 컬렉션 타입에 엔트리 추가</summary>

### 2단계: "Restaurant" 컬렉션 타입에 엔트리 추가

1. 좌측 메뉴에서  _Content Manager > Collection types - Restaurant_로 이동합니다.
2. **Create new entry**를 클릭합니다.
3. _Name_ 필드에 좋아하는 음식점 이름을 입력하세요. 예: `Biscotte Restaurant`.
4. _Description_ 필드에 간단한 소개를 작성하세요. 예시: `Welcome to Biscotte restaurant! Restaurant Biscotte offers a cuisine based on fresh, quality products, often local, organic when possible, and always produced by passionate producers.`
5. **Save**를 클릭합니다.

이제 _Collection types - Restaurant_ 뷰에 음식점이 등록됩니다.

</details>

<details>
<summary>3단계: 카테고리 추가</summary>

#### 3단계: 카테고리 추가

 _Content Manager > Collection types - Category_로 이동해 2개의 카테고리를 만들어봅시다:

1. **Create new entry**를 클릭합니다.
2. _Name_ 필드에 `French Food`를 입력합니다.
3. **Save**를 클릭합니다.
4. _Collection types - Category_로 돌아가 **Create new entry**를 다시 클릭합니다.  
5. _Name_ 필드에 `Brunch`를 입력하고 **Save**를 클릭합니다.

"French Food"와 "Brunch" 카테고리가 _Collection types - Category_ 뷰에 등록됩니다.

이제 음식점에 카테고리를 추가해봅시다:

1.  _Content Manager > Collection types - Restaurant_로 이동해 "Biscotte Restaurant"를 클릭합니다.
2. 페이지 하단의 **Categories** 드롭다운에서 "French Food"를 선택합니다. 페이지 상단으로 돌아가 **Save**를 클릭하세요.

</details>

<details>
<summary>4단계: 역할 및 권한 설정</summary>

### 4단계: 역할 및 권한 설정

음식점과 카테고리를 추가했으니, 이제 API를 통해 외부에서 접근할 수 있도록 공개 권한을 설정해야 합니다:

1. 좌측 하단 _ Settings_를 클릭합니다.
2. _Users & Permissions Plugin_에서 _Roles_를 선택합니다.
3. **Public** 역할을 클릭합니다.
4. _Permissions_ 아래로 스크롤합니다.
5. _Permissions_ 탭에서 _Restaurant_를 찾아 클릭합니다.
6. **find**와 **findOne** 체크박스를 선택합니다.
7. _Category_도 동일하게 **find**와 **findOne**을 체크합니다.
8. 마지막으로 **Save**를 클릭합니다.

</details>

<details>
<summary>5단계: 콘텐츠 발행</summary>

### 5단계: 콘텐츠 발행

기본적으로 생성된 콘텐츠는 초안 상태로 저장됩니다. 카테고리와 음식점을 발행해봅시다.

먼저  _Content Manager > Collection types - Category_로 이동해:

1. "Brunch" 항목을 클릭합니다.
2. 다음 화면에서 **Publish**를 클릭합니다.
3. _Confirmation_ 창에서 **Yes, publish**를 클릭합니다.  

다시 카테고리 목록으로 돌아가 "French Food"도 동일하게 발행하세요.

마지막으로, 음식점도 발행하려면  _Content Manager > Collection types - Restaurant_에서 "Biscotte Restaurant"를 클릭한 후 **Publish**를 클릭하세요.

</details>

<details>
<summary>6단계: API 사용하기</summary>

### 6단계: API 사용하기

이제 콘텐츠를 생성하고, API를 통해 접근할 수 있게 되었습니다. 수고하셨습니다! 이제 결과를 직접 확인해보세요.

예시: Strapi Cloud 프로젝트 URL의 `/api/restaurants` 경로로 접속하면 음식점 목록을 확인할 수 있습니다(예: `https://beautiful-first-strapi-project.strapiapp.com/api/restaurants`).

아래는 API 응답 예시입니다 👇.

<details>
<summary>API 응답 예시 보기</summary>

```json
{
  "data": [
    {
      "id": 3,
      "documentId": "wf7m1n3g8g22yr5k50hsryhk",
      "Name": "Biscotte Restaurant",
      "Description": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "text": "Welcome to Biscotte restaurant! Restaurant Biscotte offers a cuisine based on fresh, quality products, often local, organic when possible, and always produced by passionate producers."
            }
          ]
        }
      ],
      "createdAt": "2024-09-10T12:49:32.350Z",
      "updatedAt": "2024-09-10T13:14:18.275Z",
      "publishedAt": "2024-09-10T13:14:18.280Z",
      "locale": null
    }
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 25,
      "pageCount": 1,
      "total": 1
    }
  }
}
```

</details>

</details>

:::callout  축하합니다!
이제 콘텐츠가 생성·발행되었고, API를 통해 접근할 수 있습니다.
멋진 콘텐츠를 계속 만들어보세요!
:::

:::tip 팁: 로컬과 Strapi Cloud 프로젝트 간 데이터 전송
Strapi Cloud와 로컬 프로젝트의 데이터베이스는 서로 다릅니다. 데이터가 자동으로 동기화되지 않으니, [데이터 관리 시스템](/cms/features/data-management)을 활용해 프로젝트 간 데이터를 전송할 수 있습니다.
:::

##  다음 단계는?

이제 Strapi로 콘텐츠를 생성·발행하는 기본 과정을 익혔으니, 아래 기능도 탐구해보세요:

 Strapi의 [REST](/cms/api/rest) API로 콘텐츠 쿼리하기<br/>
  **기능** 카테고리에서 다양한 Strapi 기능 살펴보기<br/>
 [Cloud 전용 문서](/cloud/intro)에서 Strapi Cloud 프로젝트 더 알아보기<br/>
 [백엔드 커스터마이징](/cms/backend-customization) 및 [관리자 패널 커스터마이징](/cms/admin-panel-customization)으로 고급 활용하기<br/>



# 템플릿
Source: https://docs.strapi.io/cms/templates

# 템플릿

Strapi 5의 템플릿은 특정 목적에 맞게 설계된 독립형 Strapi 애플리케이션입니다.

Strapi 5 템플릿은 일반 Strapi 애플리케이션에서 볼 수 있는 모든 파일과 폴더를 포함하는 폴더입니다(자세한 구조는 [프로젝트 구조](/cms/project-structure) 참고).

## 템플릿 사용하기

템플릿을 기반으로 새 Strapi 프로젝트를 생성하려면 다음 명령어를 실행하세요:

</Tabs>

필수 `--template` 파라미터 외에도, `--template-path`와 `--template-branch` 옵션을 추가로 지정해 템플릿을 더 세밀하게 선택할 수 있습니다.

아래 표는 템플릿을 지정하는 다양한 방법을 보여줍니다:

| 문법 | 설명 |
|--------|-------------|
| `--template website` |  중 하나를 폴더명으로 지정하여 사용 |
| `--template strapi/strapi` | 템플릿의 GitHub 저장소를 축약형으로 지정(기본 브랜치 사용) |
| `--template strapi/strapi/some/sub/path` | GitHub 저장소 축약형과 하위 경로를 함께 지정(기본 브랜치 사용) |
| `--template strapi/strapi`<br/>`--template-branch=xxx`<br/>`--template-path=some/sub/path` | 브랜치와 하위 경로를 명시적으로 지정하는 가장 상세한 방법 |
| `--template https://github.com/owner/some-template-repo` | 전체 저장소 URL을 사용(기본 브랜치 사용) |
| `--template https://github.com/owner/some-template-repo --template-branch=xxx --template-path=sub/path` | 전체 저장소 URL, 브랜치, 하위 경로를 모두 지정 |
| `--template https://github.com/strapi/strapi/tree/branch/sub/path` | 저장소, 브랜치, 하위 경로를 직접 지정<br/><br/>⚠️ _브랜치명에 `/`가 포함된 경우 동작하지 않을 수 있으니, 이럴 땐 `--template-branch`와 `--template-path`를 명시적으로 지정하세요._ |

## 템플릿 만들기

Strapi 5 템플릿을 만드는 방법은 Strapi 애플리케이션을 만드는 것과 동일합니다. [CLI 설치](/cms/installation/cli) 문서를 참고해 애플리케이션을 생성한 뒤, 해당 폴더 전체를 템플릿으로 사용할 수 있습니다. 이후 새 프로젝트 생성 시 `--template` 플래그에 해당 폴더를 지정하면 템플릿으로 활용할 수 있습니다.

예시로, 을 참고하세요.



# 테스트
Source: https://docs.strapi.io/cms/testing

# 단위 테스트

:::strapi
Strapi 블로그에서 

</Tabs>

설치 후 `package.json` 파일에 다음을 추가하세요.

`scripts` 섹션에 `test` 명령어 추가:

```json
  "scripts": {
    "develop": "strapi develop",
    "start": "strapi start",
    "build": "strapi build",
    "strapi": "strapi",
    "test": "jest --forceExit --detectOpenHandles"
  },
```

그리고 파일 하단에 다음을 추가:

```json
  "jest": {
    "testPathIgnorePatterns": [
      "/node_modules/",
      ".tmp",
      ".cache"
    ],
    "testEnvironment": "node"
  }
```

이 설정은 `Jest`가 테스트를 찾지 않아야 할 폴더를 무시하도록 합니다.

## 테스트 환경 설정

테스트 프레임워크는 유효한 테스트를 위해 깨끗한 환경이 필요하며, 실제 데이터베이스와 격리되어야 합니다.

`jest`가 실행되면 `test` [환경](/cms/configurations/environment)을 사용합니다(`NODE_ENV`가 `test`로 변경됨). 이 목적을 위해 별도의 환경 설정 파일이 필요합니다. `./config/env/test/database.js` 파일을 만들고, 아래와 같이 작성하세요.

```js title="path: ./config/env/test/database.js"
module.exports = ({ env }) => ({
  connection: {
    client: 'sqlite',
    connection: {
      filename: env('DATABASE_FILENAME', '.tmp/test.db'),
    },
    useNullAsDefault: true,
    debug: false
  },
});
```

## Strapi 인스턴스 생성

무엇이든 테스트하려면 테스트 환경에서 동작하는 Strapi 인스턴스가 필요합니다. 즉, Strapi 앱의 인스턴스를 객체로 받아와야 하며, 이는 에서 인스턴스를 생성하는 것과 유사합니다.

이 작업을 위해 몇 개의 파일을 추가해야 합니다. 모든 테스트를 넣을 `tests` 폴더를 만들고, 그 안에 `helpers` 폴더를 만들어 주요 Strapi 헬퍼를 `strapi.js` 파일에 작성합니다.

```js title="path: ./tests/helpers/strapi.js"
const Strapi = require("@strapi/strapi");
const fs = require("fs");

let instance;

async function setupStrapi() {
  if (!instance) {
    await Strapi().load();
    instance = strapi;
    
    await instance.server.mount();
  }
  return instance;
}

async function cleanupStrapi() {
  const dbSettings = strapi.config.get("database.connection");

  // 서버를 닫아 db 파일을 해제
  await strapi.server.httpServer.close();

  // 데이터베이스 연결을 닫음
  await strapi.db.connection.destroy();

  // 모든 테스트가 끝난 후 임시 DB 파일 삭제
  if (dbSettings && dbSettings.connection && dbSettings.connection.filename) {
    const tmpDbFile = dbSettings.connection.filename;
    if (fs.existsSync(tmpDbFile)) {
      fs.unlinkSync(tmpDbFile);
    }
  }
}

module.exports = { setupStrapi, cleanupStrapi };
```

## Strapi 인스턴스 테스트

테스트의 메인 진입 파일이 필요합니다. 이 파일은 헬퍼 파일도 테스트합니다.

```js title="path: ./tests/app.test.js"
const fs = require('fs');
const { setupStrapi, cleanupStrapi } = require("./helpers/strapi");

beforeAll(async () => {
  await setupStrapi();
});

afterAll(async () => {
  await cleanupStrapi();
});

it("strapi is defined", () => {
  expect(strapi).toBeDefined();
});
```

이것만으로도 단위 테스트를 작성할 수 있습니다. `yarn test`를 실행하면 첫 테스트 결과를 볼 수 있습니다.

```bash
yarn run v1.13.0
$ jest
 PASS  tests/app.test.js
  ✓ strapi is defined (2 ms)

Test Suites: 1 passed, 1 total
Tests:       1 passed, 1 total
Snapshots:   0 total
Time:        4.187 s
Ran all test suites.
✨  Done in 5.73s.
```

:::tip
Jest에서 타임아웃 오류가 발생한다면, `app.test.js` 파일의 `beforeAll` 바로 위에 `jest.setTimeout(15000)`을 추가하고, 필요에 따라 ms 값을 조정하세요.
:::

## 기본 엔드포인트 컨트롤러 테스트

:::tip
예시에서는 [컨트롤러](/cms/backend-customization/controllers) 섹션의 `Hello world` `/hello` 엔드포인트를 사용합니다.
:::

일부에서는 API 테스트가 단위 테스트가 아니라 제한된 통합 테스트라고 할 수 있지만, 여기서는 첫 엔드포인트 테스트를 계속 진행합니다.

엔드포인트가 제대로 동작하는지, `/hello` 라우트가 "Hello World"를 반환하는지 테스트합니다.

`supertest`를 사용해 엔드포인트가 예상대로 동작하는지 확인하는 별도 테스트 파일을 만듭니다.

```js title="path: ./tests/hello/index.js"
const request = require('supertest');

it("should return hello world", async () => {
  await request(strapi.server.httpServer)
    .get("/api/hello")
    .expect(200) // HTTP 상태 확인
    .then((data) => {
      expect(data.text).toBe("Hello World!"); // 응답 내용 확인
    });
});
```

그리고 이 코드를 `./tests/app.test.js` 파일 하단에 추가하세요.

```js
require('./hello');
```

이후 `yarn test`를 실행하면 다음과 같은 결과가 나옵니다.

```bash
➜  my-project yarn test
yarn run v1.13.0
$ jest --detectOpenHandles
 PASS  tests/app.test.js (5.742 s)
  ✓ strapi is defined (4 ms)
  ✓ should return hello world (54 ms)

[2020-05-22T14:37:38.018Z] debug GET /hello (10 ms) 200
Test Suites: 1 passed, 1 total
Tests:       2 passed, 2 total
Snapshots:   0 total
Time:        6.635 s, estimated 7 s
Ran all test suites.
✨  Done in 9.09s.
```

:::tip
`Jest has detected the following 1 open handles potentially keeping Jest from exiting` 오류가 발생한다면, jest 버전을 26.6.3으로 맞추면 문제가 해결됩니다.
:::

## 인증된 엔드포인트 컨트롤러 테스트

대부분의 API는 인증이 필요합니다. 이를 위해 JWT 토큰이 필요하며, 유효한 사용자를 만들어야 합니다.

인증 테스트를 위한 헬퍼를 만들어보겠습니다.

```js title="path: ./tests/helpers/auth.js"
const request = require('supertest');

// 유효한 사용자 생성
const createStrapiUser = async (strapi, data) => {
  // 사용자를 생성하고 저장
  const user = await strapi.plugins['users-permissions'].services.user.add({
    ...data,
    confirmed: true,
  });

  return user;
};

// JWT 토큰 생성
const createJwtToken = (strapi, user) => {
  return strapi.plugins['users-permissions'].services.jwt.issue({
    id: user.id,
  });
};

// 인증된 요청을 위한 유저와 JWT 생성
const createAuthRequest = async (strapi) => {
  // 테스트 사용자 생성
  const user = await createStrapiUser(strapi, {
    username: 'testuser',
    email: 'testuser@strapi.com',
    password: 'Password123',
  });

  // JWT 토큰 생성
  const jwt = createJwtToken(strapi, user);

  return { user, jwt };
};

module.exports = {
  createStrapiUser,
  createJwtToken,
  createAuthRequest,
};
```

이제 인증이 필요한 엔드포인트를 테스트할 수 있습니다:

```js title="path: ./tests/auth/index.js"
const request = require('supertest');
const { createAuthRequest } = require('../helpers/auth');

it("should return user profile when authenticated", async () => {
  const { jwt } = await createAuthRequest(strapi);
  
  await request(strapi.server.httpServer)
    .get("/api/users/me")
    .set('Authorization', `Bearer ${jwt}`)
    .expect(200)
    .then((data) => {
      expect(data.body).toBeDefined();
      expect(data.body.id).toBeDefined();
      expect(data.body.username).toBe('testuser');
    });
});
```

## 추가 테스트 시나리오

### 콘텐츠 타입 테스트

특정 콘텐츠 타입의 CRUD 작업을 테스트할 수 있습니다:

```js title="path: ./tests/article/index.js"
const request = require('supertest');
const { createAuthRequest } = require('../helpers/auth');

describe('Article', () => {
  let jwt;
  let user;

  beforeAll(async () => {
    const authData = await createAuthRequest(strapi);
    jwt = authData.jwt;
    user = authData.user;
  });

  it("should create article", async () => {
    const article = {
      data: {
        title: "Test Article",
        content: "This is a test article content",
        author: user.id,
      }
    };

    await request(strapi.server.httpServer)
      .post("/api/articles")
      .set('Authorization', `Bearer ${jwt}`)
      .send(article)
      .expect(200)
      .then((data) => {
        expect(data.body.data).toBeDefined();
        expect(data.body.data.attributes.title).toBe(article.data.title);
      });
  });

  it("should return articles", async () => {
    await request(strapi.server.httpServer)
      .get("/api/articles")
      .expect(200)
      .then((data) => {
        expect(Array.isArray(data.body.data)).toBe(true);
      });
  });
});
```

### 서비스 테스트

Strapi 서비스를 직접 테스트할 수도 있습니다:

```js title="path: ./tests/services/article.test.js"
describe('Article Service', () => {
  it('should create article via service', async () => {
    const articleData = {
      title: 'Service Test Article',
      content: 'Content created via service',
    };

    const article = await strapi.documents('api::article.article').create({
      data: articleData,
    });

    expect(article).toBeDefined();
    expect(article.title).toBe(articleData.title);
  });

  it('should find articles via service', async () => {
    const articles = await strapi.documents('api::article.article').findMany();
    
    expect(Array.isArray(articles)).toBe(true);
  });
});
```

이러한 테스트 패턴을 사용하여 Strapi 애플리케이션의 다양한 부분을 포괄적으로 테스트할 수 있습니다.



# TypeScript
Source: https://docs.strapi.io/cms/typescript

# TypeScript 

  </Tabs>

- 제공된 [변환](/cms/typescript/adding-support-to-existing-project) 단계를 사용하여 기존 Strapi 프로젝트에 TypeScript 지원을 추가.

<br />

:::strapi 다음에 할 일은?
- TypeScript 기반 Strapi 프로젝트의 [구조](/cms/project-structure)를 이해하세요
- TypeScript와 관련된 [구성 옵션](/cms/configurations/typescript) 옵션에 대해 알아보세요
- TypeScript 관련 개발 [옵션 및 기능](/cms/typescript/development)에 대해 자세히 알아보세요
- 특정 사용 사례에 대한 [가이드](/cms/typescript/guides)를 읽어보세요
:::



# TypeScript 개발
Source: https://docs.strapi.io/cms/typescript/development

# Strapi와 함께하는 TypeScript 개발

[TypeScript](/cms/typescript) 기반 애플리케이션을 Strapi로 개발하면서 다음을 할 수 있습니다:

- 자동 완성 기능이 있는 [`Strapi`](#use-strapi-typescript-typings) 클래스의 [타이핑에 접근](#use-strapi-typescript-typings),
- 프로젝트의 콘텐츠 타입에 대한 [타이핑 생성](#generate-typings-for-content-types-schemas),
- [프로그래밍 방식으로 Strapi 시작](#start-strapi-programmatically),
- [플러그인 개발](#develop-a-plugin-using-typescript)을 위한 TypeScript 관련 지침 따르기.

:::strapi 문서와 엔트리
TypeScript 기반 프로젝트로 문서와 엔트리를 조작하는 방법에 대한 자세한 정보와 모범 사례는 [전용 가이드](/cms/typescript/documents-and-entries)에서 찾을 수 있습니다.
:::

## `Strapi` TypeScript 타이핑 사용

Strapi는 TypeScript 개발 경험을 향상시키기 위해 `Strapi` 클래스에 타이핑을 제공합니다. 이러한 타이핑은 개발 중 자동으로 제안을 제공하는 자동 완성 기능을 제공합니다.

Strapi 애플리케이션을 개발하면서 TypeScript 기반 자동 완성을 경험하려면 다음을 시도해볼 수 있습니다:

1. 코드 에디터에서 `./src/index.ts` 파일을 열기.
2. 전역 `register` 메서드 내에서 `strapi` 인수를 `Strapi` 타입으로 선언:

    ```typescript title="./src/index.ts"
    import { Strapi } from '@strapi/strapi';

    export default {
      register({ strapi }: { strapi: Strapi }) {
        // ...
      },
    };
    ```

3. `register` 메서드의 본문 내에서 `strapi.`를 입력하기 시작하고 키보드 화살표를 사용하여 사용 가능한 속성을 탐색.

4. 목록에서 `runLifecyclesFunctions`를 선택.

5. `strapi.runLifecyclesFunctions` 메서드가 추가되면, 코드 에디터에서 사용 가능한 라이프사이클 타입 목록 (즉, `register`, `bootstrap`, `destroy`)을 반환합니다. 키보드 화살표를 사용하여 라이프사이클 중 하나를 선택하면 코드가 자동 완성됩니다.

## 콘텐츠 타입 스키마에 대한 타이핑 생성

프로젝트 스키마에 대한 타이핑을 생성하려면 [`ts:generate-types` CLI 명령어](/cms/cli#strapi-ts)를 사용하세요. `ts:generate-types` 명령어는 프로젝트 루트에 `types` 폴더를 생성하여 프로젝트에 대한 타이핑을 저장합니다. 선택적 `--debug` 플래그는 생성된 스키마의 상세한 테이블을 반환합니다.

`ts:generate-types`를 사용하려면 프로젝트 루트의 터미널에서 다음 코드를 실행하세요:

</Tabs>

:::tip 팁: 자동으로 타입 생성하기
[`config/typescript.js|ts` 구성 파일](/cms/configurations/typescript#strapi-specific-configuration-for-typescript)에 `autogenerate: true`를 추가하면 서버 재시작 시 타입이 자동으로 생성됩니다.
:::

:::tip 팁: 프론트엔드 애플리케이션에서 타입 사용하기
프론트엔드 애플리케이션에서 Strapi 타입을 사용하려면, Strapi가 공식 솔루션을 구현할 때까지 할 수 있습니다.
:::

### 생성된 타입으로 인한 빌드 문제 해결

생성된 타입은 제외할 수 있어서 Entity Service가 이를 사용하지 않고 콘텐츠 타입에서 사용 가능한 실제 속성을 확인하지 않는 느슨한 타입으로 대체됩니다.

이를 위해 Strapi 프로젝트의 `tsconfig.json`을 편집하고 `exclude` 배열에 `types/generated/**`를 추가하세요:

```json title="./tsconfig.json"
  // ...
  "exclude": [
    "node_modules/",
    "build/",
    "dist/",
    ".cache/",
    ".tmp/",
    "src/admin/",
    "**/*.test.ts",
    "src/plugins/**",
    "types/generated/**"
  ]
  // ...
```

하지만 여전히 프로젝트에서 생성된 타입을 사용하고 싶지만 Strapi가 이를 사용하지 않도록 하려면, 생성된 타입을 복사하여 `generated` 디렉터리 밖에 붙여넣고(타입이 재생성될 때 덮어쓰이지 않도록) 파일 하단에서 `declare module '@strapi/types'`를 제거하는 우회 방법을 사용할 수 있습니다.

:::warning
타입은 호환성 문제를 피하기 위해 `@strapi/strapi`에서만 가져와야 합니다. `@strapi/types`의 타입은 내부 사용 전용이며 예고 없이 변경될 수 있습니다.
:::

## 프로그래밍 방식으로 Strapi 시작

TypeScript 프로젝트에서 프로그래밍 방식으로 Strapi를 시작하려면 Strapi 인스턴스에 컴파일된 코드 위치가 필요합니다. 이 섹션에서는 컴파일된 코드 디렉터리를 설정하고 지정하는 방법을 설명합니다.

### `strapi()` 팩토리 사용 {#use-the-createstrapi-factory}

`strapi()` 팩토리를 사용하여 프로그래밍 방식으로 Strapi를 실행할 수 있습니다. TypeScript 프로젝트의 코드는 특정 디렉터리에 컴파일되므로, 컴파일된 코드를 읽어야 하는 위치를 나타내기 위해 `distDir` 매개변수를 팩토리에 전달해야 합니다:

```js title="./server.js"

const strapi = require('@strapi/strapi');
const app = strapi.createStrapi({ distDir: './dist' });
app.start(); 
```

### `strapi.compile()` 함수 사용

`strapi.compile()` 함수는 주로 Strapi 인스턴스를 시작하고 프로젝트에 TypeScript 코드가 포함되어 있는지 감지해야 하는 도구를 개발하는 데 사용해야 합니다. `strapi.compile()`은 프로젝트 언어를 자동으로 감지합니다. 프로젝트 코드에 TypeScript 코드가 포함되어 있으면, `strapi.compile()`은 코드를 컴파일하고 Strapi가 필요로 하는 디렉터리에 대한 특정 값을 가진 컨텍스트를 반환합니다:

```js
const strapi = require('@strapi/strapi');

strapi.compile().then(appContext => strapi(appContext).start());
```

## TypeScript를 사용하여 플러그인 개발

새로운 플러그인은 [플러그인 개발 문서](/cms/plugins-development/developing-plugins)를 따라 생성할 수 있으며, CLI 도구에서 프롬프트를 받을 때 "TypeScript"를 선택하면 됩니다.

TypeScript 애플리케이션에는 2가지 중요한 구별점이 있습니다:

- 플러그인을 생성한 후, 플러그인 디렉터리 `src/admin/plugins/[my-plugin-name]`에서 `yarn` 또는 `npm install`을 실행하여 플러그인의 종속성을 설치합니다.
- 플러그인 디렉터리 `src/admin/plugins/[my-plugin-name]`에서 `yarn build` 또는 `npm run build`를 실행하여 플러그인을 포함한 관리자 패널을 빌드합니다.

:::note
초기 설치 후에는 `yarn` 또는 `npm install` 명령어를 반복할 필요가 없습니다. `yarn build` 또는 `npm run build` 명령어는 관리자 패널에 영향을 주는 플러그인 개발을 구현하는 데 필요합니다.
:::



# TypeScript 가이드
Source: https://docs.strapi.io/cms/typescript/guides

# TypeScript 가이드

다음 가이드는 [TypeScript 기반](/cms/typescript) Strapi 프로젝트의 특정 측면에서 도움을 줄 것입니다.



# 업그레이드 도구
Source: https://docs.strapi.io/cms/upgrade-tool

# 업그레이드 도구

업그레이드 도구는 Strapi 사용자가 애플리케이션의 의존성과 코드를 특정 버전으로 업그레이드할 수 있도록 도와줍니다.

업그레이드 도구를 실행하면 애플리케이션의 의존성이 업데이트 및 설치되고, 대상 버전까지의 브레이킹 체인지에 맞춰 **코드모드** 

</Tabs>


